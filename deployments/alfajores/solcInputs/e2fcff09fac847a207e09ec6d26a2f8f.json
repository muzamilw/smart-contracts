{
  "language": "Solidity",
  "sources": {
    "contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/Context.sol\";\r\nimport \"../utils/introspection/ERC165.sol\";\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControl {\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n    function grantRole(bytes32 role, address account) external;\r\n    function revokeRole(bytes32 role, address account) external;\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping (address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping (bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControl).interfaceId\r\n            || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override {\r\n        require(hasRole(getRoleAdmin(role), _msgSender()), \"AccessControl: sender must be an admin to grant\");\r\n\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override {\r\n        require(hasRole(getRoleAdmin(role), _msgSender()), \"AccessControl: sender must be an admin to revoke\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\r\n        _roles[role].adminRole = adminRole;\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account) private {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account) private {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n"
    },
    "contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC165.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n"
    },
    "contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n"
    },
    "contracts/tatum/Tatum721General.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"../token/ERC721/ERC721.sol\";\r\nimport \"../token/ERC721/extensions/ERC721Enumerable.sol\";\r\nimport \"../token/ERC721/extensions/ERC721URIStorage.sol\";\r\nimport \"../security/Pausable.sol\";\r\nimport \"../utils/Ownable.sol\";\r\nimport \"../access/AccessControl.sol\";\r\nimport \"../token/ERC721/extensions/ERC721Burnable.sol\";\r\n\r\ncontract Tatum721General is ERC721, ERC721Enumerable, ERC721URIStorage, Pausable, AccessControl, ERC721Burnable {\r\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\r\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\r\n\r\n    bool _publicMint;\r\n    constructor(string memory name_, string memory symbol_, bool publicMint)\r\n    ERC721(name_, symbol_)\r\n    {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n        _setupRole(MINTER_ROLE, _msgSender());\r\n        _setupRole(PAUSER_ROLE, _msgSender());\r\n        _publicMint = publicMint;\r\n    }\r\n\r\n    function pause() public {\r\n        require(\r\n            hasRole(PAUSER_ROLE, _msgSender()),\r\n            \"TatumGeneral721: must have pauser role to pause\"\r\n        );\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public {\r\n        require(\r\n            hasRole(PAUSER_ROLE, _msgSender()),\r\n            \"TatumGeneral721: must have pauser role to pause\"\r\n        );\r\n        _unpause();\r\n    }\r\n\r\n    /**\r\n      * @dev Function to mint tokens.\r\n     * @param to The address that will receive the minted tokens.\r\n     * @param tokenId The token id to mint.\r\n     * @param uri The token URI of the minted token.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mintWithTokenURI(\r\n        address to,\r\n        uint256 tokenId,\r\n        string memory uri\r\n    ) public returns (bool) {\r\n        if (!_publicMint) {\r\n            require(\r\n                hasRole(MINTER_ROLE, _msgSender()),\r\n                \"TatumGeneral721: must have minter role to mint\"\r\n            );\r\n        }\r\n        _safeMint(to, tokenId);\r\n        _setTokenURI(tokenId, uri);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens. This helper function allows to mint multiple NFTs in 1 transaction.\r\n     * @param to The address that will receive the minted tokens.\r\n     * @param tokenId The token id to mint.\r\n     * @param uri The token URI of the minted token.\r\n     * @return A boolean that indicates if the operation was successful.\r\n    */\r\n    function mintMultiple(\r\n        address[] memory to,\r\n        uint256[] memory tokenId,\r\n        string[] memory uri\r\n    ) public returns (bool) {\r\n        if (!_publicMint) {\r\n            require(\r\n                hasRole(MINTER_ROLE, _msgSender()),\r\n                \"TatumGeneral721: must have minter role to mint\"\r\n            );\r\n        }\r\n        for (uint256 i = 0; i < to.length; i++) {\r\n            _safeMint(to[i], tokenId[i]);\r\n            _setTokenURI(tokenId[i], uri[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function safeTransfer(address to, uint256 tokenId, bytes calldata data) public virtual {\r\n        super._safeTransfer(_msgSender(), to, tokenId, data);\r\n    }\r\n\r\n    function safeTransfer(address to, uint256 tokenId) public virtual {\r\n        super._safeTransfer(_msgSender(), to, tokenId, \"\");\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId)\r\n    internal\r\n    whenNotPaused\r\n    override(ERC721, ERC721Enumerable)\r\n    {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n    }\r\n\r\n    // The following functions are overrides required by Solidity.\r\n\r\n    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\r\n        super._burn(tokenId);\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n    public\r\n    view\r\n    override(ERC721, ERC721URIStorage)\r\n    returns (string memory)\r\n    {\r\n        return super.tokenURI(tokenId);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId)\r\n    public\r\n    view\r\n    override(ERC721, ERC721Enumerable, AccessControl)\r\n    returns (bool)\r\n    {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n}\r\n"
    },
    "contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC721.sol\";\r\nimport \"./IERC721Receiver.sol\";\r\nimport \"./extensions/IERC721Metadata.sol\";\r\nimport \"./extensions/IERC721Enumerable.sol\";\r\nimport \"../../utils/Address.sol\";\r\nimport \"../../utils/Ownable.sol\";\r\nimport \"../../utils/Strings.sol\";\r\nimport \"../../utils/introspection/ERC165.sol\";\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Ownable, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping (uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping (address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping (uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IERC721).interfaceId\r\n            || interfaceId == type(IERC721Metadata).interfaceId\r\n            || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0\r\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\r\n            : '';\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\r\n     * in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual payable override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual payable override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     d*\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\r\n        private returns (bool)\r\n    {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    // solhint-disable-next-line no-inline-assembly\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\r\n}\r\n"
    },
    "contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../ERC721.sol\";\r\nimport \"./IERC721Enumerable.sol\";\r\n\r\n/**\r\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\r\n * enumerability of all the token ids in the contract as well as all token ids owned by each\r\n * account.\r\n */\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    // Array with all token ids, used for enumeration\r\n    uint256[] private _allTokens;\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\r\n        return interfaceId == type(IERC721Enumerable).interfaceId\r\n            || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    function tokensOfOwner(address owner) public view returns (uint256[] memory) {\r\n        uint256[] memory memoryArray = new uint256[](ERC721.balanceOf(owner));\r\n        for(uint i = 0; i < ERC721.balanceOf(owner); i++) {\r\n            memoryArray[i] = _ownedTokens[owner][i];\r\n        }\r\n        return memoryArray;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n        return _allTokens[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        if (from == address(0)) {\r\n            _addTokenToAllTokensEnumeration(tokenId);\r\n        } else if (from != to) {\r\n            _removeTokenFromOwnerEnumeration(from, tokenId);\r\n        }\r\n        if (to == address(0)) {\r\n            _removeTokenFromAllTokensEnumeration(tokenId);\r\n        } else if (to != from) {\r\n            _addTokenToOwnerEnumeration(to, tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n     * @param to address representing the new owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n     */\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        uint256 length = ERC721.balanceOf(to);\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's token tracking data structures.\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list\r\n     */\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\r\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n     */\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's token tracking data structures.\r\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\r\n     */\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _allTokensIndex[tokenId];\r\n        _allTokens.pop();\r\n    }\r\n}\r\n"
    },
    "contracts/token/ERC721/extensions/ERC721URIStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../ERC721.sol\";\r\n\r\n/**\r\n * @dev ERC721 token with storage based token uri management.\r\n */\r\nabstract contract ERC721URIStorage is ERC721 {\r\n    using Strings for uint256;\r\n\r\n    // Optional mapping for token URIs\r\n    mapping (uint256 => string) private _tokenURIs;\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721URIStorage: URI query for nonexistent token\");\r\n\r\n        string memory _tokenURI = _tokenURIs[tokenId];\r\n        string memory base = _baseURI();\r\n\r\n        // If there is no base URI, return the token URI.\r\n        if (bytes(base).length == 0) {\r\n            return _tokenURI;\r\n        }\r\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\r\n        if (bytes(_tokenURI).length > 0) {\r\n            return string(abi.encodePacked(base, _tokenURI));\r\n        }\r\n\r\n        return super.tokenURI(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\r\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\r\n        _tokenURIs[tokenId] = _tokenURI;\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual override {\r\n        super._burn(tokenId);\r\n\r\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\r\n            delete _tokenURIs[tokenId];\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor () {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n"
    },
    "contracts/utils/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}"
    },
    "contracts/token/ERC721/extensions/ERC721Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../ERC721.sol\";\r\nimport \"../../../utils/Context.sol\";\r\n\r\n/**\r\n * @title ERC721 Burnable Token\r\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\r\n */\r\nabstract contract ERC721Burnable is Context, ERC721 {\r\n    /**\r\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own `tokenId` or be an approved operator.\r\n     */\r\n    function burn(uint256 tokenId) public virtual {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721Burnable: caller is not owner nor approved\");\r\n        _burn(tokenId);\r\n    }\r\n}\r\n"
    },
    "contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../../utils/introspection/IERC165.sol\";\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external payable;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n      * - `from` cannot be the zero address.\r\n      * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external payable;\r\n}\r\n"
    },
    "contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n"
    },
    "contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../IERC721.sol\";\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n"
    },
    "contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../IERC721.sol\";\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n"
    },
    "contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant alphabet = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = alphabet[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n}\r\n"
    },
    "contracts/token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../ERC721.sol\";\r\nimport \"../extensions/ERC721Enumerable.sol\";\r\nimport \"../extensions/ERC721Burnable.sol\";\r\nimport \"../extensions/ERC721Pausable.sol\";\r\nimport \"../../../access/AccessControlEnumerable.sol\";\r\nimport \"../../../utils/Context.sol\";\r\nimport \"../../../utils/Counters.sol\";\r\n\r\n/**\r\n * @dev {ERC721} token, including:\r\n *\r\n *  - ability for holders to burn (destroy) their tokens\r\n *  - a minter role that allows for token minting (creation)\r\n *  - a pauser role that allows to stop all token transfers\r\n *  - token ID and URI autogeneration\r\n *\r\n * This contract uses {AccessControl} to lock permissioned functions using the\r\n * different roles - head to its documentation for details.\r\n *\r\n * The account that deploys the contract will be granted the minter and pauser\r\n * roles, as well as the default admin role, which will let it grant both minter\r\n * and pauser roles to other accounts.\r\n */\r\ncontract ERC721PresetMinterPauserAutoId is Context, AccessControlEnumerable, ERC721Enumerable, ERC721Burnable, ERC721Pausable {\r\n    using Counters for Counters.Counter;\r\n\r\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\r\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\r\n\r\n    Counters.Counter private _tokenIdTracker;\r\n\r\n    string private _baseTokenURI;\r\n\r\n    /**\r\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\r\n     * account that deploys the contract.\r\n     *\r\n     * Token URIs will be autogenerated based on `baseURI` and their token IDs.\r\n     * See {ERC721-tokenURI}.\r\n     */\r\n    constructor(string memory name, string memory symbol, string memory baseTokenURI) ERC721(name, symbol) {\r\n        _baseTokenURI = baseTokenURI;\r\n\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n\r\n        _setupRole(MINTER_ROLE, _msgSender());\r\n        _setupRole(PAUSER_ROLE, _msgSender());\r\n    }\r\n\r\n    function _baseURI() internal view virtual override returns (string memory) {\r\n        return _baseTokenURI;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates a new token for `to`. Its token ID will be automatically\r\n     * assigned (and available on the emitted {IERC721-Transfer} event), and the token\r\n     * URI autogenerated based on the base URI passed at construction.\r\n     *\r\n     * See {ERC721-_mint}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the `MINTER_ROLE`.\r\n     */\r\n    function mint(address to) public virtual {\r\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC721PresetMinterPauserAutoId: must have minter role to mint\");\r\n\r\n        // We cannot just use balanceOf to create the new tokenId because tokens\r\n        // can be burned (destroyed), so we need a separate counter.\r\n        _mint(to, _tokenIdTracker.current());\r\n        _tokenIdTracker.increment();\r\n    }\r\n\r\n    /**\r\n     * @dev Pauses all token transfers.\r\n     *\r\n     * See {ERC721Pausable} and {Pausable-_pause}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the `PAUSER_ROLE`.\r\n     */\r\n    function pause() public virtual {\r\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC721PresetMinterPauserAutoId: must have pauser role to pause\");\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n     * @dev Unpauses all token transfers.\r\n     *\r\n     * See {ERC721Pausable} and {Pausable-_unpause}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the `PAUSER_ROLE`.\r\n     */\r\n    function unpause() public virtual {\r\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC721PresetMinterPauserAutoId: must have pauser role to unpause\");\r\n        _unpause();\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override(ERC721, ERC721Enumerable, ERC721Pausable) {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(AccessControlEnumerable, ERC721, ERC721Enumerable) returns (bool) {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n}\r\n"
    },
    "contracts/token/ERC721/extensions/ERC721Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../ERC721.sol\";\r\nimport \"../../../security/Pausable.sol\";\r\n\r\n/**\r\n * @dev ERC721 token with pausable token transfers, minting and burning.\r\n *\r\n * Useful for scenarios such as preventing trades until the end of an evaluation\r\n * period, or having an emergency switch for freezing all token transfers in the\r\n * event of a large bug.\r\n */\r\nabstract contract ERC721Pausable is ERC721, Pausable {\r\n    /**\r\n     * @dev See {ERC721-_beforeTokenTransfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the contract must not be paused.\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        require(!paused(), \"ERC721Pausable: token transfer while paused\");\r\n    }\r\n}\r\n"
    },
    "contracts/access/AccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./AccessControl.sol\";\r\nimport \"../utils/structs/EnumerableSet.sol\";\r\n\r\n/**\r\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\r\n */\r\ninterface IAccessControlEnumerable {\r\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\r\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\r\n */\r\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    mapping (bytes32 => EnumerableSet.AddressSet) private _roleMembers;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControlEnumerable).interfaceId\r\n            || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns one of the accounts that have `role`. `index` must be a\r\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\r\n     *\r\n     * Role bearers are not sorted in any particular way, and their ordering may\r\n     * change at any point.\r\n     *\r\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\r\n     * you perform all queries on the same block. See the following\r\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\r\n     * for more information.\r\n     */\r\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\r\n        return _roleMembers[role].at(index);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of accounts that have `role`. Can be used\r\n     * together with {getRoleMember} to enumerate all bearers of a role.\r\n     */\r\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\r\n        return _roleMembers[role].length();\r\n    }\r\n\r\n    /**\r\n     * @dev Overload {grantRole} to track enumerable memberships\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override {\r\n        super.grantRole(role, account);\r\n        _roleMembers[role].add(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload {revokeRole} to track enumerable memberships\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override {\r\n        super.revokeRole(role, account);\r\n        _roleMembers[role].remove(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload {_setupRole} to track enumerable memberships\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual override {\r\n        super._setupRole(role, account);\r\n        _roleMembers[role].add(account);\r\n    }\r\n}\r\n"
    },
    "contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n */\r\nlibrary Counters {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n"
    },
    "contracts/token/ERC20/extensions/ERC20Snapshot.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../ERC20.sol\";\r\nimport \"../../../utils/Arrays.sol\";\r\nimport \"../../../utils/Counters.sol\";\r\n\r\n/**\r\n * @dev This contract extends an ERC20 token with a snapshot mechanism. When a snapshot is created, the balances and\r\n * total supply at the time are recorded for later access.\r\n *\r\n * This can be used to safely create mechanisms based on token balances such as trustless dividends or weighted voting.\r\n * In naive implementations it's possible to perform a \"double spend\" attack by reusing the same balance from different\r\n * accounts. By using snapshots to calculate dividends or voting power, those attacks no longer apply. It can also be\r\n * used to create an efficient ERC20 forking mechanism.\r\n *\r\n * Snapshots are created by the internal {_snapshot} function, which will emit the {Snapshot} event and return a\r\n * snapshot id. To get the total supply at the time of a snapshot, call the function {totalSupplyAt} with the snapshot\r\n * id. To get the balance of an account at the time of a snapshot, call the {balanceOfAt} function with the snapshot id\r\n * and the account address.\r\n *\r\n * ==== Gas Costs\r\n *\r\n * Snapshots are efficient. Snapshot creation is _O(1)_. Retrieval of balances or total supply from a snapshot is _O(log\r\n * n)_ in the number of snapshots that have been created, although _n_ for a specific account will generally be much\r\n * smaller since identical balances in subsequent snapshots are stored as a single entry.\r\n *\r\n * There is a constant overhead for normal ERC20 transfers due to the additional snapshot bookkeeping. This overhead is\r\n * only significant for the first transfer that immediately follows a snapshot for a particular account. Subsequent\r\n * transfers will have normal cost until the next snapshot, and so on.\r\n */\r\nabstract contract ERC20Snapshot is ERC20 {\r\n    // Inspired by Jordi Baylina's MiniMeToken to record historical balances:\r\n    // https://github.com/Giveth/minimd/blob/ea04d950eea153a04c51fa510b068b9dded390cb/contracts/MiniMeToken.sol\r\n\r\n    using Arrays for uint256[];\r\n    using Counters for Counters.Counter;\r\n\r\n    // Snapshotted values have arrays of ids and the value corresponding to that id. These could be an array of a\r\n    // Snapshot struct, but that would impede usage of functions that work on an array.\r\n    struct Snapshots {\r\n        uint256[] ids;\r\n        uint256[] values;\r\n    }\r\n\r\n    mapping (address => Snapshots) private _accountBalanceSnapshots;\r\n    Snapshots private _totalSupplySnapshots;\r\n\r\n    // Snapshot ids increase monotonically, with the first value being 1. An id of 0 is invalid.\r\n    Counters.Counter private _currentSnapshotId;\r\n\r\n    /**\r\n     * @dev Emitted by {_snapshot} when a snapshot identified by `id` is created.\r\n     */\r\n    event Snapshot(uint256 id);\r\n\r\n    /**\r\n     * @dev Creates a new snapshot and returns its snapshot id.\r\n     *\r\n     * Emits a {Snapshot} event that contains the same id.\r\n     *\r\n     * {_snapshot} is `internal` and you have to decide how to expose it externally. Its usage may be restricted to a\r\n     * set of accounts, for example using {AccessControl}, or it may be open to the public.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * While an open way of calling {_snapshot} is required for certain trust minimization mechanisms such as forking,\r\n     * you must consider that it can potentially be used by attackers in two ways.\r\n     *\r\n     * First, it can be used to increase the cost of retrieval of values from snapshots, although it will grow\r\n     * logarithmically thus rendering this attack ineffective in the long term. Second, it can be used to target\r\n     * specific accounts and increase the cost of ERC20 transfers for them, in the ways specified in the Gas Costs\r\n     * section above.\r\n     *\r\n     * We haven't measured the actual numbers; if this is something you're interested in please reach out to us.\r\n     * ====\r\n     */\r\n    function _snapshot() internal virtual returns (uint256) {\r\n        _currentSnapshotId.increment();\r\n\r\n        uint256 currentId = _currentSnapshotId.current();\r\n        emit Snapshot(currentId);\r\n        return currentId;\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieves the balance of `account` at the time `snapshotId` was created.\r\n     */\r\n    function balanceOfAt(address account, uint256 snapshotId) public view virtual returns (uint256) {\r\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _accountBalanceSnapshots[account]);\r\n\r\n        return snapshotted ? value : balanceOf(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieves the total supply at the time `snapshotId` was created.\r\n     */\r\n    function totalSupplyAt(uint256 snapshotId) public view virtual returns(uint256) {\r\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _totalSupplySnapshots);\r\n\r\n        return snapshotted ? value : totalSupply();\r\n    }\r\n\r\n\r\n    // Update balance and/or total supply snapshots before the values are modified. This is implemented\r\n    // in the _beforeTokenTransfer hook, which is executed for _mint, _burn, and _transfer operations.\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\r\n      super._beforeTokenTransfer(from, to, amount);\r\n\r\n      if (from == address(0)) {\r\n        // mint\r\n        _updateAccountSnapshot(to);\r\n        _updateTotalSupplySnapshot();\r\n      } else if (to == address(0)) {\r\n        // burn\r\n        _updateAccountSnapshot(from);\r\n        _updateTotalSupplySnapshot();\r\n      } else {\r\n        // transfer\r\n        _updateAccountSnapshot(from);\r\n        _updateAccountSnapshot(to);\r\n      }\r\n    }\r\n\r\n    function _valueAt(uint256 snapshotId, Snapshots storage snapshots)\r\n        private view returns (bool, uint256)\r\n    {\r\n        require(snapshotId > 0, \"ERC20Snapshot: id is 0\");\r\n        // solhint-disable-next-line max-line-length\r\n        require(snapshotId <= _currentSnapshotId.current(), \"ERC20Snapshot: nonexistent id\");\r\n\r\n        // When a valid snapshot is queried, there are three possibilities:\r\n        //  a) The queried value was not modified after the snapshot was taken. Therefore, a snapshot entry was never\r\n        //  created for this id, and all stored snapshot ids are smaller than the requested one. The value that corresponds\r\n        //  to this id is the current one.\r\n        //  b) The queried value was modified after the snapshot was taken. Therefore, there will be an entry with the\r\n        //  requested id, and its value is the one to return.\r\n        //  c) More snapshots were created after the requested one, and the queried value was later modified. There will be\r\n        //  no entry for the requested id: the value that corresponds to it is that of the smallest snapshot id that is\r\n        //  larger than the requested one.\r\n        //\r\n        // In summary, we need to find an element in an array, returning the index of the smallest value that is larger if\r\n        // it is not found, unless said value doesn't exist (e.g. when all values are smaller). Arrays.findUpperBound does\r\n        // exactly this.\r\n\r\n        uint256 index = snapshots.ids.findUpperBound(snapshotId);\r\n\r\n        if (index == snapshots.ids.length) {\r\n            return (false, 0);\r\n        } else {\r\n            return (true, snapshots.values[index]);\r\n        }\r\n    }\r\n\r\n    function _updateAccountSnapshot(address account) private {\r\n        _updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account));\r\n    }\r\n\r\n    function _updateTotalSupplySnapshot() private {\r\n        _updateSnapshot(_totalSupplySnapshots, totalSupply());\r\n    }\r\n\r\n    function _updateSnapshot(Snapshots storage snapshots, uint256 currentValue) private {\r\n        uint256 currentId = _currentSnapshotId.current();\r\n        if (_lastSnapshotId(snapshots.ids) < currentId) {\r\n            snapshots.ids.push(currentId);\r\n            snapshots.values.push(currentValue);\r\n        }\r\n    }\r\n\r\n    function _lastSnapshotId(uint256[] storage ids) private view returns (uint256) {\r\n        if (ids.length == 0) {\r\n            return 0;\r\n        } else {\r\n            return ids[ids.length - 1];\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"../../utils/Context.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The defaut value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overloaded;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        _balances[account] = accountBalance - amount;\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n"
    },
    "contracts/utils/Arrays.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./math/Math.sol\";\r\n\r\n/**\r\n * @dev Collection of functions related to array types.\r\n */\r\nlibrary Arrays {\r\n   /**\r\n     * @dev Searches a sorted `array` and returns the first index that contains\r\n     * a value greater or equal to `element`. If no such index exists (i.e. all\r\n     * values in the array are strictly less than `element`), the array length is\r\n     * returned. Time complexity O(log n).\r\n     *\r\n     * `array` is expected to be sorted in ascending order, and to contain no\r\n     * repeated elements.\r\n     */\r\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\r\n        if (array.length == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 low = 0;\r\n        uint256 high = array.length;\r\n\r\n        while (low < high) {\r\n            uint256 mid = Math.average(low, high);\r\n\r\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\r\n            // because Math.average rounds down (it does integer division with truncation).\r\n            if (array[mid] > element) {\r\n                high = mid;\r\n            } else {\r\n                low = mid + 1;\r\n            }\r\n        }\r\n\r\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\r\n        if (low > 0 && array[low - 1] == element) {\r\n            return low - 1;\r\n        } else {\r\n            return low;\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n"
    },
    "contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/MathMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/math/Math.sol\";\r\n\r\ncontract MathMock {\r\n    function max(uint256 a, uint256 b) public pure returns (uint256) {\r\n        return Math.max(a, b);\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) public pure returns (uint256) {\r\n        return Math.min(a, b);\r\n    }\r\n\r\n    function average(uint256 a, uint256 b) public pure returns (uint256) {\r\n        return Math.average(a, b);\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/ArraysImpl.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/Arrays.sol\";\r\n\r\ncontract ArraysImpl {\r\n    using Arrays for uint256[];\r\n\r\n    uint256[] private _array;\r\n\r\n    constructor (uint256[] memory array) {\r\n        _array = array;\r\n    }\r\n\r\n    function findUpperBound(uint256 element) external view returns (uint256) {\r\n        return _array.findUpperBound(element);\r\n    }\r\n}\r\n"
    },
    "contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../ERC20.sol\";\r\nimport \"../extensions/ERC20Burnable.sol\";\r\nimport \"../extensions/ERC20Pausable.sol\";\r\nimport \"../../../access/AccessControlEnumerable.sol\";\r\nimport \"../../../utils/Context.sol\";\r\n\r\n/**\r\n * @dev {ERC20} token, including:\r\n *\r\n *  - ability for holders to burn (destroy) their tokens\r\n *  - a minter role that allows for token minting (creation)\r\n *  - a pauser role that allows to stop all token transfers\r\n *\r\n * This contract uses {AccessControl} to lock permissioned functions using the\r\n * different roles - head to its documentation for details.\r\n *\r\n * The account that deploys the contract will be granted the minter and pauser\r\n * roles, as well as the default admin role, which will let it grant both minter\r\n * and pauser roles to other accounts.\r\n */\r\ncontract ERC20PresetMinterPauser is Context, AccessControlEnumerable, ERC20Burnable, ERC20Pausable {\r\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\r\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\r\n\r\n    /**\r\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\r\n     * account that deploys the contract.\r\n     *\r\n     * See {ERC20-constructor}.\r\n     */\r\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n\r\n        _setupRole(MINTER_ROLE, _msgSender());\r\n        _setupRole(PAUSER_ROLE, _msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` new tokens for `to`.\r\n     *\r\n     * See {ERC20-_mint}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the `MINTER_ROLE`.\r\n     */\r\n    function mint(address to, uint256 amount) public virtual {\r\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have minter role to mint\");\r\n        _mint(to, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Pauses all token transfers.\r\n     *\r\n     * See {ERC20Pausable} and {Pausable-_pause}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the `PAUSER_ROLE`.\r\n     */\r\n    function pause() public virtual {\r\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to pause\");\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n     * @dev Unpauses all token transfers.\r\n     *\r\n     * See {ERC20Pausable} and {Pausable-_unpause}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the `PAUSER_ROLE`.\r\n     */\r\n    function unpause() public virtual {\r\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to unpause\");\r\n        _unpause();\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override(ERC20, ERC20Pausable) {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n    }\r\n}\r\n"
    },
    "contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../ERC20.sol\";\r\nimport \"../../../utils/Context.sol\";\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\nabstract contract ERC20Burnable is Context, ERC20 {\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\r\n     * allowance.\r\n     *\r\n     * See {ERC20-_burn} and {ERC20-allowance}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have allowance for ``accounts``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public virtual {\r\n        uint256 currentAllowance = allowance(account, _msgSender());\r\n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\r\n        _approve(account, _msgSender(), currentAllowance - amount);\r\n        _burn(account, amount);\r\n    }\r\n}\r\n"
    },
    "contracts/token/ERC20/extensions/ERC20Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../ERC20.sol\";\r\nimport \"../../../security/Pausable.sol\";\r\n\r\n/**\r\n * @dev ERC20 token with pausable token transfers, minting and burning.\r\n *\r\n * Useful for scenarios such as preventing trades until the end of an evaluation\r\n * period, or having an emergency switch for freezing all token transfers in the\r\n * event of a large bug.\r\n */\r\nabstract contract ERC20Pausable is ERC20, Pausable {\r\n    /**\r\n     * @dev See {ERC20-_beforeTokenTransfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the contract must not be paused.\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n\r\n        require(!paused(), \"ERC20Pausable: token transfer while paused\");\r\n    }\r\n}\r\n"
    },
    "contracts/utils/PaymentSplitter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Address.sol\";\r\nimport \"./Context.sol\";\r\nimport \"./math/SafeMath.sol\";\r\n\r\n/**\r\n * @title PaymentSplitter\r\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\r\n * that the Ether will be split in this way, since it is handled transparently by the contract.\r\n *\r\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\r\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\r\n * an amount proportional to the percentage of total shares they were assigned.\r\n *\r\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\r\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\r\n * function.\r\n */\r\ncontract PaymentSplitter is Context {\r\n    event PayeeAdded(address account, uint256 shares);\r\n    event PaymentReleased(address to, uint256 amount);\r\n    event PaymentReceived(address from, uint256 amount);\r\n\r\n    uint256 private _totalShares;\r\n    uint256 private _totalReleased;\r\n\r\n    mapping(address => uint256) private _shares;\r\n    mapping(address => uint256) private _released;\r\n    address[] private _payees;\r\n\r\n    /**\r\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\r\n     * the matching position in the `shares` array.\r\n     *\r\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\r\n     * duplicates in `payees`.\r\n     */\r\n    constructor (address[] memory payees, uint256[] memory shares_) payable {\r\n        // solhint-disable-next-line max-line-length\r\n        require(payees.length == shares_.length, \"PaymentSplitter: payees and shares length mismatch\");\r\n        require(payees.length > 0, \"PaymentSplitter: no payees\");\r\n\r\n        for (uint256 i = 0; i < payees.length; i++) {\r\n            _addPayee(payees[i], shares_[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\r\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\r\n     * reliability of the events, and not the actual splitting of Ether.\r\n     *\r\n     * To learn more about this see the Solidity documentation for\r\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\r\n     * functions].\r\n     */\r\n    receive () external payable virtual {\r\n        emit PaymentReceived(_msgSender(), msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the total shares held by payees.\r\n     */\r\n    function totalShares() public view returns (uint256) {\r\n        return _totalShares;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the total amount of Ether already released.\r\n     */\r\n    function totalReleased() public view returns (uint256) {\r\n        return _totalReleased;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the amount of shares held by an account.\r\n     */\r\n    function shares(address account) public view returns (uint256) {\r\n        return _shares[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the amount of Ether already released to a payee.\r\n     */\r\n    function released(address account) public view returns (uint256) {\r\n        return _released[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the address of the payee number `index`.\r\n     */\r\n    function payee(uint256 index) public view returns (address) {\r\n        return _payees[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\r\n     * total shares and their previous withdrawals.\r\n     */\r\n    function release(address payable account) public virtual {\r\n        require(_shares[account] > 0, \"PaymentSplitter: account has no shares\");\r\n\r\n        uint256 totalReceived = address(this).balance + _totalReleased;\r\n        uint256 payment = totalReceived * _shares[account] / _totalShares - _released[account];\r\n\r\n        require(payment != 0, \"PaymentSplitter: account is not due payment\");\r\n\r\n        _released[account] = _released[account] + payment;\r\n        _totalReleased = _totalReleased + payment;\r\n\r\n        Address.sendValue(account, payment);\r\n        emit PaymentReleased(account, payment);\r\n    }\r\n\r\n    /**\r\n     * @dev Add a new payee to the contract.\r\n     * @param account The address of the payee to add.\r\n     * @param shares_ The number of shares owned by the payee.\r\n     */\r\n    function _addPayee(address account, uint256 shares_) private {\r\n        require(account != address(0), \"PaymentSplitter: account is the zero address\");\r\n        require(shares_ > 0, \"PaymentSplitter: shares are 0\");\r\n        require(_shares[account] == 0, \"PaymentSplitter: account already has shares\");\r\n\r\n        _payees.push(account);\r\n        _shares[account] = shares_;\r\n        _totalShares = _totalShares + shares_;\r\n        emit PayeeAdded(account, shares_);\r\n    }\r\n}\r\n"
    },
    "contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/SafeMathMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/math/SafeMath.sol\";\r\n\r\ncontract SafeMathMock {\r\n    function tryAdd(uint256 a, uint256 b) public pure returns (bool flag, uint256 value) {\r\n        return SafeMath.tryAdd(a, b);\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) public pure returns (bool flag, uint256 value) {\r\n        return SafeMath.trySub(a, b);\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) public pure returns (bool flag, uint256 value) {\r\n        return SafeMath.tryMul(a, b);\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) public pure returns (bool flag, uint256 value) {\r\n        return SafeMath.tryDiv(a, b);\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) public pure returns (bool flag, uint256 value) {\r\n        return SafeMath.tryMod(a, b);\r\n    }\r\n\r\n    // using the do* naming convention to avoid warnings due to clashing opcode names\r\n\r\n    function doAdd(uint256 a, uint256 b) public pure returns (uint256) {\r\n        return SafeMath.add(a, b);\r\n    }\r\n\r\n    function doSub(uint256 a, uint256 b) public pure returns (uint256) {\r\n        return SafeMath.sub(a, b);\r\n    }\r\n\r\n    function doMul(uint256 a, uint256 b) public pure returns (uint256) {\r\n        return SafeMath.mul(a, b);\r\n    }\r\n\r\n    function doDiv(uint256 a, uint256 b) public pure returns (uint256) {\r\n        return SafeMath.div(a, b);\r\n    }\r\n\r\n    function doMod(uint256 a, uint256 b) public pure returns (uint256) {\r\n        return SafeMath.mod(a, b);\r\n    }\r\n\r\n    function subWithMessage(uint256 a, uint256 b, string memory errorMessage) public pure returns (uint256) {\r\n        return SafeMath.sub(a, b, errorMessage);\r\n    }\r\n\r\n    function divWithMessage(uint256 a, uint256 b, string memory errorMessage) public pure returns (uint256) {\r\n        return SafeMath.div(a, b, errorMessage);\r\n    }\r\n\r\n    function modWithMessage(uint256 a, uint256 b, string memory errorMessage) public pure returns (uint256) {\r\n        return SafeMath.mod(a, b, errorMessage);\r\n    }\r\n\r\n    function addMemoryCheck() public pure returns (uint256 mem) {\r\n        uint256 length = 32;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { mem := mload(0x40) }\r\n        for (uint256 i = 0; i < length; ++i) { SafeMath.add(1, 1); }\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { mem := sub(mload(0x40), mem) }\r\n    }\r\n\r\n    function subMemoryCheck() public pure returns (uint256 mem) {\r\n        uint256 length = 32;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { mem := mload(0x40) }\r\n        for (uint256 i = 0; i < length; ++i) { SafeMath.sub(1, 1); }\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { mem := sub(mload(0x40), mem) }\r\n    }\r\n\r\n    function mulMemoryCheck() public pure returns (uint256 mem) {\r\n        uint256 length = 32;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { mem := mload(0x40) }\r\n        for (uint256 i = 0; i < length; ++i) { SafeMath.mul(1, 1); }\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { mem := sub(mload(0x40), mem) }\r\n    }\r\n\r\n    function divMemoryCheck() public pure returns (uint256 mem) {\r\n        uint256 length = 32;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { mem := mload(0x40) }\r\n        for (uint256 i = 0; i < length; ++i) { SafeMath.div(1, 1); }\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { mem := sub(mload(0x40), mem) }\r\n    }\r\n\r\n    function modMemoryCheck() public pure returns (uint256 mem) {\r\n        uint256 length = 32;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { mem := mload(0x40) }\r\n        for (uint256 i = 0; i < length; ++i) { SafeMath.mod(1, 1); }\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { mem := sub(mload(0x40), mem) }\r\n    }\r\n\r\n}\r\n"
    },
    "contracts/tatum/TatumCashback1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../token/ERC1155/IERC1155.sol\";\r\nimport \"../token/ERC1155/IERC1155Receiver.sol\";\r\nimport \"../token/ERC1155/extensions/IERC1155MetadataURI.sol\";\r\nimport \"../utils/Address.sol\";\r\nimport \"../utils/Context.sol\";\r\nimport \"../utils/introspection/ERC165.sol\";\r\n\r\ncontract Tatum1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\r\n    using Address for address;\r\n    // Mapping cashbacks and values to tokens\r\n    mapping(uint256 => address[]) private _cashbackRecipients;\r\n    mapping(uint256 => uint256[]) private _cashbackValues;\r\n    // Mapping from token ID to account balances\r\n    mapping(uint256 => mapping(address => uint256)) private _balances;\r\n\r\n    // Mapping from account to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\r\n    string private _uri;\r\n\r\n    /**\r\n     * @dev See {_setURI}.\r\n     */\r\n    constructor(string memory uri_) {\r\n        _setURI(uri_);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override(ERC165, IERC165)\r\n        returns (bool)\r\n    {\r\n        return\r\n            interfaceId == type(IERC1155).interfaceId ||\r\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function uri(uint256)\r\n        external\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        return _uri;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            account != address(0),\r\n            \"ERC1155: balance query for the zero address\"\r\n        );\r\n        return _balances[id][account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOfBatch}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256[] memory)\r\n    {\r\n        require(\r\n            accounts.length == ids.length,\r\n            \"ERC1155: accounts and ids length mismatch\"\r\n        );\r\n\r\n        uint256[] memory batchBalances = new uint256[](accounts.length);\r\n\r\n        for (uint256 i = 0; i < accounts.length; ++i) {\r\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\r\n        }\r\n\r\n        return batchBalances;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address, bool) public virtual override {\r\n        require(false, \"Not supported\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address, address)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        require(false, \"Not supported\");\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeTransfer}.\r\n     * Also sends cashback to authors if any\r\n     */\r\n    function safeTransfer(\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) public payable {\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n        address from = _msgSender();\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(\r\n            operator,\r\n            from,\r\n            to,\r\n            _asSingletonArray(id),\r\n            _asSingletonArray(amount),\r\n            data\r\n        );\r\n\r\n        uint256 fromBalance = _balances[id][from];\r\n        require(\r\n            fromBalance >= amount,\r\n            \"ERC1155: insufficient balance for transfer\"\r\n        );\r\n        _balances[id][from] = fromBalance - amount;\r\n        _balances[id][to] += amount;\r\n        if (_cashbackRecipients[id].length != 0) {\r\n            uint256 sum = 0;\r\n            for (uint256 i = 0; i < _cashbackValues[id].length; i++) {\r\n                sum += _cashbackValues[id][i];\r\n            }\r\n            require(\r\n                msg.value >= sum,\r\n                \"ERC1155: value must be greater than cashback values\"\r\n            );\r\n            for (uint256 j = 0; j < _cashbackRecipients[id].length; j++) {\r\n                // transferring cashback to authors\r\n                payable(_cashbackRecipients[id][j]).transfer(\r\n                    _cashbackValues[id][j]\r\n                );\r\n            }\r\n            if (msg.value > sum) {\r\n                payable(msg.sender).transfer(msg.value - sum);\r\n            }\r\n        } else {\r\n            if (msg.value > 0) {\r\n                payable(msg.sender).transfer(msg.value);\r\n            }\r\n        }\r\n        emit TransferSingle(operator, from, to, id, amount);\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeBatchTransfer}.\r\n     * Also sends cashback to authors if any\r\n     */\r\n    function safeBatchTransfer(\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts\r\n    ) public payable {\r\n        require(\r\n            ids.length == amounts.length,\r\n            \"ERC1155: ids and amounts length mismatch\"\r\n        );\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n        address from = _msgSender();\r\n        address operator = _msgSender();\r\n        uint256 bal = msg.value;\r\n        //_beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            uint256 id = ids[i];\r\n            uint256 amount = amounts[i];\r\n\r\n            uint256 fromBalance = _balances[id][from];\r\n            require(\r\n                fromBalance >= amounts[i],\r\n                \"ERC1155: insufficient balance for transfer\"\r\n            );\r\n            _balances[id][from] = fromBalance - amount;\r\n            _balances[id][to] += amount;\r\n            if (_cashbackRecipients[id].length != 0) {\r\n                for (uint256 j = 0; j < _cashbackRecipients[id].length; j++) {\r\n                    // transferring cashback to authors\r\n                    payable(_cashbackRecipients[id][j]).transfer(\r\n                        _cashbackValues[id][j]\r\n                    );\r\n                    bal = bal - _cashbackValues[id][j];\r\n                }\r\n            }\r\n        }\r\n        if (bal > 0) {\r\n            payable(msg.sender).transfer(bal);\r\n        }\r\n        emit TransferBatch(operator, from, to, ids, amounts);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address,\r\n        address,\r\n        uint256,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual override {\r\n        require(false, \"Not supported\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeBatchTransferFrom}.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address,\r\n        address,\r\n        uint256[] memory,\r\n        uint256[] memory,\r\n        bytes memory\r\n    ) public virtual override {\r\n        require(false, \"Not supported\");\r\n    }\r\n\r\n    function _setURI(string memory newuri) internal virtual {\r\n        _uri = newuri;\r\n    }\r\n\r\n    function _mint(\r\n        address account,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(account != address(0), \"ERC1155: mint to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(\r\n            operator,\r\n            address(0),\r\n            account,\r\n            _asSingletonArray(id),\r\n            _asSingletonArray(amount),\r\n            data\r\n        );\r\n\r\n        _balances[id][account] += amount;\r\n        emit TransferSingle(operator, address(0), account, id, amount);\r\n\r\n        _doSafeTransferAcceptanceCheck(\r\n            operator,\r\n            address(0),\r\n            account,\r\n            id,\r\n            amount,\r\n            data\r\n        );\r\n    }\r\n\r\n    function mint(\r\n        address account,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) public {\r\n        _mint(account, id, amount, data);\r\n    }\r\n\r\n    function burn(\r\n        address account,\r\n        uint256 id,\r\n        uint256 amount\r\n    ) public {\r\n        _burn(account, id, amount);\r\n    }\r\n\r\n    function burnBatch(\r\n        address account,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts\r\n    ) public {\r\n        _burnBatch(account, ids, amounts);\r\n    }\r\n\r\n    function mintBatch(\r\n        address[] memory to,\r\n        uint256[][] memory ids,\r\n        uint256[][] memory amounts,\r\n        bytes memory data\r\n    ) public {\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            _mintBatch(to[i], ids[i], amounts[i], data);\r\n        }\r\n    }\r\n\r\n    function mintWithCashback(\r\n        address account,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data,\r\n        address[] memory authorAddresses,\r\n        uint256[] memory cashbackValues\r\n    ) public {\r\n        // saving cashback addresses and values\r\n        _cashbackRecipients[id] = authorAddresses;\r\n        _cashbackValues[id] = cashbackValues;\r\n        _mint(account, id, amount, data);\r\n    }\r\n\r\n    function mintBatchWithCashback(\r\n        address[] memory to,\r\n        uint256[][] memory ids,\r\n        uint256[][] memory amounts,\r\n        bytes memory data,\r\n        address[][][] memory authorAddresses,\r\n        uint256[][][] memory cashbackValues\r\n    ) public {\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            _mintBatch(to[i], ids[i], amounts[i], data);\r\n            for (uint256 j = 0; j < ids[i].length; j++) {\r\n                _cashbackRecipients[ids[i][j]] = authorAddresses[i][j];\r\n                _cashbackValues[ids[i][j]] = cashbackValues[i][j];\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fetch cashback values and recipients for a token id, returns array\r\n     */\r\n    function tokenCashbackValues(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint256[] memory)\r\n    {\r\n        return _cashbackValues[tokenId];\r\n    }\r\n\r\n    function tokenCashbackRecipients(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        returns (address[] memory)\r\n    {\r\n        return _cashbackRecipients[tokenId];\r\n    }\r\n\r\n    /**\r\n     * To update the cashback values of an existing author, returns bool\r\n     */\r\n    function updateCashbackForAuthor(uint256 tokenId, uint256 cashbackValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        for (uint256 i = 0; i < _cashbackValues[tokenId].length; i++) {\r\n            if (_cashbackRecipients[tokenId][i] == _msgSender()) {\r\n                _cashbackValues[tokenId][i] = cashbackValue;\r\n                return true;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _mintBatch(\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(to != address(0), \"ERC1155: mint to the zero address\");\r\n        require(\r\n            ids.length == amounts.length,\r\n            \"ERC1155: ids and amounts length mismatch\"\r\n        );\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            _balances[ids[i]][to] += amounts[i];\r\n        }\r\n\r\n        emit TransferBatch(operator, address(0), to, ids, amounts);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(\r\n            operator,\r\n            address(0),\r\n            to,\r\n            ids,\r\n            amounts,\r\n            data\r\n        );\r\n    }\r\n\r\n    function _burn(\r\n        address account,\r\n        uint256 id,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(account != address(0), \"ERC1155: burn from the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(\r\n            operator,\r\n            account,\r\n            address(0),\r\n            _asSingletonArray(id),\r\n            _asSingletonArray(amount),\r\n            \"\"\r\n        );\r\n\r\n        uint256 accountBalance = _balances[id][account];\r\n        require(\r\n            accountBalance >= amount,\r\n            \"ERC1155: burn amount exceeds balance\"\r\n        );\r\n        _balances[id][account] = accountBalance - amount;\r\n\r\n        emit TransferSingle(operator, account, address(0), id, amount);\r\n    }\r\n\r\n    function _burnBatch(\r\n        address account,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts\r\n    ) internal virtual {\r\n        require(account != address(0), \"ERC1155: burn from the zero address\");\r\n        require(\r\n            ids.length == amounts.length,\r\n            \"ERC1155: ids and amounts length mismatch\"\r\n        );\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \"\");\r\n\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            uint256 id = ids[i];\r\n            uint256 amount = amounts[i];\r\n\r\n            uint256 accountBalance = _balances[id][account];\r\n            require(\r\n                accountBalance >= amount,\r\n                \"ERC1155: burn amount exceeds balance\"\r\n            );\r\n            _balances[id][account] = accountBalance - amount;\r\n        }\r\n\r\n        emit TransferBatch(operator, account, address(0), ids, amounts);\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {}\r\n\r\n    function _doSafeTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) private {\r\n        if (to.isContract()) {\r\n            try\r\n                IERC1155Receiver(to).onERC1155Received(\r\n                    operator,\r\n                    from,\r\n                    id,\r\n                    amount,\r\n                    data\r\n                )\r\n            returns (bytes4 response) {\r\n                if (\r\n                    response != IERC1155Receiver(to).onERC1155Received.selector\r\n                ) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _doSafeBatchTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) private {\r\n        if (to.isContract()) {\r\n            try\r\n                IERC1155Receiver(to).onERC1155BatchReceived(\r\n                    operator,\r\n                    from,\r\n                    ids,\r\n                    amounts,\r\n                    data\r\n                )\r\n            returns (bytes4 response) {\r\n                if (\r\n                    response !=\r\n                    IERC1155Receiver(to).onERC1155BatchReceived.selector\r\n                ) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _asSingletonArray(uint256 element)\r\n        private\r\n        pure\r\n        returns (uint256[] memory)\r\n    {\r\n        uint256[] memory array = new uint256[](1);\r\n        array[0] = element;\r\n\r\n        return array;\r\n    }\r\n}\r\n"
    },
    "contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../../utils/introspection/IERC165.sol\";\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\r\n}\r\n"
    },
    "contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../../utils/introspection/IERC165.sol\";\r\n\r\n/**\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155Receiver is IERC165 {\r\n\r\n    /**\r\n        @dev Handles the receipt of a single ERC1155 token type. This function is\r\n        called at the end of a `safeTransferFrom` after the balance has been updated.\r\n        To accept the transfer, this must return\r\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n        (i.e. 0xf23a6e61, or its own function selector).\r\n        @param operator The address which initiated the transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param id The ID of the token being transferred\r\n        @param value The amount of tokens being transferred\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns(bytes4);\r\n\r\n    /**\r\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n        is called at the end of a `safeBatchTransferFrom` after the balances have\r\n        been updated. To accept the transfer(s), this must return\r\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n        (i.e. 0xbc197c81, or its own function selector).\r\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns(bytes4);\r\n}\r\n"
    },
    "contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../IERC1155.sol\";\r\n\r\n/**\r\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\r\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155MetadataURI is IERC1155 {\r\n    /**\r\n     * @dev Returns the URI for token type `id`.\r\n     *\r\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\r\n     * clients with the actual token type ID.\r\n     */\r\n    function uri(uint256 id) external view returns (string memory);\r\n}\r\n"
    },
    "contracts/token/ERC1155/utils/ERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../IERC1155Receiver.sol\";\r\nimport \"../../../utils/introspection/ERC165.sol\";\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IERC1155Receiver).interfaceId\r\n            || super.supportsInterface(interfaceId);\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/ERC1155ReceiverMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../token/ERC1155/IERC1155Receiver.sol\";\r\nimport \"../utils/introspection/ERC165.sol\";\r\n\r\ncontract ERC1155ReceiverMock is IERC1155Receiver, ERC165 {\r\n    bytes4 private _recRetval;\r\n    bool private _recReverts;\r\n    bytes4 private _batRetval;\r\n    bool private _batReverts;\r\n\r\n    event Received(address operator, address from, uint256 id, uint256 value, bytes data, uint256 gas);\r\n    event BatchReceived(address operator, address from, uint256[] ids, uint256[] values, bytes data, uint256 gas);\r\n\r\n    constructor (\r\n        bytes4 recRetval,\r\n        bool recReverts,\r\n        bytes4 batRetval,\r\n        bool batReverts\r\n    )\r\n    {\r\n        _recRetval = recRetval;\r\n        _recReverts = recReverts;\r\n        _batRetval = batRetval;\r\n        _batReverts = batReverts;\r\n    }\r\n\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        override\r\n        returns(bytes4)\r\n    {\r\n        require(!_recReverts, \"ERC1155ReceiverMock: reverting on receive\");\r\n        emit Received(operator, from, id, value, data, gasleft());\r\n        return _recRetval;\r\n    }\r\n\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        override\r\n        returns(bytes4)\r\n    {\r\n        require(!_batReverts, \"ERC1155ReceiverMock: reverting on batch receive\");\r\n        emit BatchReceived(operator, from, ids, values, data, gasleft());\r\n        return _batRetval;\r\n    }\r\n}\r\n"
    },
    "contracts/tatum/nft/NftAuction.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"../../token/ERC20/IERC20.sol\";\r\nimport \"../../token/ERC721/IERC721.sol\";\r\nimport \"../../token/ERC1155/IERC1155.sol\";\r\nimport \"../../access/Ownable.sol\";\r\nimport \"../../utils/Address.sol\";\r\nimport \"../../security/Pausable.sol\";\r\n\r\ncontract Tatum {\r\n    function tokenCashbackValues(uint256 tokenId, uint256 tokenPrice)\r\n    public\r\n    view\r\n    virtual\r\n    returns (uint256[] memory)\r\n    {}\r\n\r\n    function getCashbackAddress(uint256 tokenId)\r\n    public\r\n    view\r\n    virtual\r\n    returns (address)\r\n    {}\r\n}\r\n\r\ncontract NftAuction is Ownable, Pausable {\r\n    using Address for address;\r\n\r\n    struct Auction {\r\n        // address of the seller\r\n        address seller;\r\n        // address of the token to sale\r\n        address nftAddress;\r\n        // ID of the NFT\r\n        uint256 tokenId;\r\n        // if the auction is for ERC721 - true - or ERC1155 - false\r\n        bool isErc721;\r\n        // Block height of end of auction\r\n        uint256 endedAt;\r\n        // Block height, in which the auction started.\r\n        uint256 startedAt;\r\n        // optional - if the auction is settled in the ERC20 token or in native currency\r\n        address erc20Address;\r\n        // for ERC-1155 - how many tokens are for sale\r\n        uint256 amount;\r\n        // Ending price of the asset at the end of the auction\r\n        uint256 endingPrice;\r\n        // Actual highest bidder\r\n        address bidder;\r\n        // Actual highest bid fee included\r\n        uint256 highestBid;\r\n    }\r\n\r\n    // List of all auctions id => auction.\r\n    mapping(string => Auction) private _auctions;\r\n\r\n    uint256 private _auctionCount = 0;\r\n\r\n    string[] private _openAuctions;\r\n\r\n    // in percents, what's the fee for the auction house, 1% - 100, 100% - 10000, range 1-10000 means 0.01% - 100%\r\n    uint256 private _auctionFee;\r\n    // recipient of the auction fee\r\n    address private _auctionFeeRecipient;\r\n\r\n    /**\r\n     * @dev Emitted when new auction is created by the owner of the contract. Amount is valid only for ERC-1155 tokens\r\n     */\r\n    event AuctionCreated(\r\n        bool indexed isErc721,\r\n        address indexed nftAddress,\r\n        uint256 indexed tokenId,\r\n        string id,\r\n        uint256 amount,\r\n        address erc20Address,\r\n        uint256 endedAt\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when auction assets were bid.\r\n     */\r\n    event AuctionBid(address indexed buyer, uint256 indexed amount, string id);\r\n\r\n    /**\r\n     * @dev Emitted when auction is settled.\r\n     */\r\n    event AuctionSettled(string id);\r\n\r\n    /**\r\n     * @dev Emitted when auction was cancelled and assets were returned to the seller.\r\n     */\r\n    event AuctionCancelled(string id);\r\n\r\n    receive() external payable {}\r\n\r\n    function onERC1155Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual returns (bytes4) {\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(\r\n        address,\r\n        address,\r\n        uint256[] memory,\r\n        uint256[] memory,\r\n        bytes memory\r\n    ) public virtual returns (bytes4) {\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n\r\n    constructor(uint256 fee, address feeRecipient) {\r\n        _auctionFee = fee;\r\n        _auctionFeeRecipient = feeRecipient;\r\n    }\r\n\r\n    function getAuctionFee() public view virtual returns (uint256) {\r\n        return _auctionFee;\r\n    }\r\n\r\n    function getOpenAuctions()\r\n    public\r\n    view\r\n    virtual\r\n    returns (string[] memory)\r\n    {\r\n        return _openAuctions;\r\n    }\r\n\r\n    function getAuctionFeeRecipient() public view virtual returns (address) {\r\n        return _auctionFeeRecipient;\r\n    }\r\n\r\n    function getAuction(string memory id)\r\n    public\r\n    view\r\n    virtual\r\n    returns (Auction memory)\r\n    {\r\n        return _auctions[id];\r\n    }\r\n\r\n    function setAuctionFee(uint256 fee) public virtual onlyOwner {\r\n        require(\r\n            _auctionCount == 0,\r\n            \"Fee can't be changed if there is ongoing auction.\"\r\n        );\r\n        _auctionFee = fee;\r\n    }\r\n\r\n    function setAuctionFeeRecipient(address recipient)\r\n    public\r\n    virtual\r\n    onlyOwner\r\n    {\r\n        _auctionFeeRecipient = recipient;\r\n    }\r\n\r\n    /**\r\n     * Check if the seller is the owner of the token.\r\n     * We expect that the owner of the tokens approves the spending before he launch the auction\r\n     * The function escrows the tokens to sell\r\n     **/\r\n    function _escrowTokensToSell(\r\n        bool isErc721,\r\n        address nftAddress,\r\n        address seller,\r\n        uint256 tokenId,\r\n        uint256 amount\r\n    ) internal {\r\n        if (!isErc721) {\r\n            require(amount > 0);\r\n            require(\r\n                IERC1155(nftAddress).balanceOf(seller, tokenId) >= amount,\r\n                \"ERC1155 token balance is not sufficient for the seller..\"\r\n            );\r\n            //    IERC1155(nftAddress).safeTransferFrom(seller,address(this),tokenId,amount,\"\");\r\n        } else {\r\n            require(\r\n                IERC721(nftAddress).ownerOf(tokenId) == seller,\r\n                \"ERC721 token does not belong to the author.\"\r\n            );\r\n            //    IERC721(nftAddress).safeTransferFrom(seller, address(this), tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Transfer NFT from the contract to the recipient\r\n     */\r\n    function _transferNFT(\r\n        bool isErc721,\r\n        address nftAddress,\r\n        address sender,\r\n        address recipient,\r\n        uint256 tokenId,\r\n        uint256 amount,\r\n        address erc20Address\r\n    ) internal {\r\n        if (!isErc721) {\r\n            IERC1155(nftAddress).safeTransferFrom(\r\n                sender,\r\n                recipient,\r\n                tokenId,\r\n                amount,\r\n                \"\"\r\n            );\r\n        } else {\r\n            uint256 cashbackSum = 0;\r\n            if (_isTatumNFT(nftAddress, tokenId)) {\r\n                if (Tatum(nftAddress).getCashbackAddress(tokenId) == address(0)) {\r\n                    uint256[] memory cashback = Tatum(nftAddress)\r\n                    .tokenCashbackValues(tokenId, amount);\r\n                    for (uint256 j = 0; j < cashback.length; j++) {\r\n                        cashbackSum += cashback[j];\r\n                    }\r\n                }\r\n            }\r\n            if (erc20Address == address(0)) {\r\n                IERC721(nftAddress).safeTransferFrom{value : cashbackSum}(\r\n                    sender,\r\n                    recipient,\r\n                    tokenId,\r\n                    abi.encodePacked(\r\n                        \"SAFETRANSFERFROM\",\r\n                        \"'''###'''\",\r\n                        _uint2str(amount)\r\n                    )\r\n                );\r\n            } else {\r\n                bytes memory bytesInput = abi.encodePacked(\r\n                    \"CUSTOMTOKEN0x\",\r\n                    _toAsciiString(erc20Address),\r\n                    \"'''###'''\",\r\n                    _uint2str(amount)\r\n                );\r\n                IERC721(nftAddress).safeTransferFrom{value : cashbackSum}(\r\n                    sender,\r\n                    recipient,\r\n                    tokenId,\r\n                    bytesInput\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function _toAsciiString(address x) internal pure returns (bytes memory) {\r\n        bytes memory s = new bytes(40);\r\n        for (uint256 i = 0; i < 20; i++) {\r\n            bytes1 b = bytes1(uint8(uint256(uint160(x)) / (2 ** (8 * (19 - i)))));\r\n            bytes1 hi = bytes1(uint8(b) / 16);\r\n            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\r\n            s[2 * i] = _char(hi);\r\n            s[2 * i + 1] = _char(lo);\r\n        }\r\n        return s;\r\n    }\r\n\r\n    function _char(bytes1 b) internal pure returns (bytes1 c) {\r\n        if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\r\n        else return bytes1(uint8(b) + 0x57);\r\n    }\r\n\r\n    /**\r\n     * Transfer assets locked in the highest bid to the recipient\r\n     * @param erc20Address - if we are working with ERC20 token or native asset\r\n     * @param amount - bid value to be distributed\r\n     * @param recipient - where we will send the bid\r\n     * @param settleOrReturnFee - when true, fee is send to the auction recipient, otherwise returned to the owner\r\n     */\r\n    function _transferAssets(\r\n        address erc20Address,\r\n        uint256 amount,\r\n        address recipient,\r\n        bool settleOrReturnFee\r\n    ) internal {\r\n        uint256 fee = (amount * _auctionFee) / 10000;\r\n        if (erc20Address != address(0)) {\r\n            if (settleOrReturnFee) {\r\n                IERC20(erc20Address).transfer(recipient, amount - fee);\r\n                IERC20(erc20Address).transfer(_auctionFeeRecipient, fee);\r\n            } else {\r\n                IERC20(erc20Address).transfer(recipient, amount);\r\n            }\r\n        } else {\r\n            if (settleOrReturnFee) {\r\n                Address.sendValue(payable(recipient), amount - fee);\r\n                Address.sendValue(payable(_auctionFeeRecipient), fee);\r\n            } else {\r\n                Address.sendValue(payable(recipient), amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Create new auction of the NFT token in the marketplace.\r\n     * @param id - ID of the auction, must be unique\r\n     * @param isErc721 - whether the auction is for ERC721 or ERC1155 token\r\n     * @param nftAddress - address of the NFT token\r\n     * @param tokenId - ID of the NFT token\r\n     * @param amount - ERC1155 only, number of tokens to sold.\r\n     * @param erc20Address - address of the ERC20 token, which will be used for the payment. If native asset is used, this should be 0x0 address\r\n     */\r\n    function createAuction(\r\n        string memory id,\r\n        bool isErc721,\r\n        address nftAddress,\r\n        uint256 tokenId,\r\n        address seller,\r\n        uint256 amount,\r\n        uint256 endedAt,\r\n        address erc20Address\r\n    ) public whenNotPaused {\r\n        require(\r\n            _auctions[id].startedAt == 0,\r\n            \"Auction already existed for current auction Id\"\r\n        );\r\n        require(\r\n            endedAt > block.number + 5,\r\n            \"Auction must last at least 5 blocks from this block\"\r\n        );\r\n        // check if the seller owns the tokens he wants to put on auction\r\n        // transfer the tokens to the auction house\r\n        _escrowTokensToSell(isErc721, nftAddress, seller, tokenId, amount);\r\n\r\n        _auctionCount++;\r\n        Auction memory auction = Auction(\r\n            seller,\r\n            nftAddress,\r\n            tokenId,\r\n            isErc721,\r\n            endedAt,\r\n            block.number,\r\n            erc20Address,\r\n            amount,\r\n            0,\r\n            address(0),\r\n            0\r\n        );\r\n        _auctions[id] = auction;\r\n        _openAuctions.push(id);\r\n        emit AuctionCreated(\r\n            isErc721,\r\n            nftAddress,\r\n            tokenId,\r\n            id,\r\n            amount,\r\n            erc20Address,\r\n            endedAt\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Buyer wants to buy NFT from auction. All the required checks must pass.\r\n     * Buyer must approve spending of ERC20 tokens, which will be deducted from his account to the auction contract.\r\n     * Contract must detect, if the bidder bid higher value thank the actual highest bid. If it's not enough, bid is not valid.\r\n     * If bid is the highest one, previous bidders assets will be released back to him - we are aware of reentrancy attacks, but we will cover that.\r\n     * Bid must be processed only during the validity of the auction, otherwise it's not accepted.\r\n     * @param id - id of the auction to buy\r\n     * @param bidValue - bid value + the auction fee\r\n     * @param bidder - bidder of the auction, from which account the ERC20 assets will be debited\r\n     */\r\n    function bidForExternalBidder(\r\n        string memory id,\r\n        uint256 bidValue,\r\n        address bidder\r\n    ) public whenNotPaused {\r\n        Auction memory auction = _auctions[id];\r\n        require(\r\n            auction.erc20Address != address(0),\r\n            \"Auction must be placed for ERC20 token.\"\r\n        );\r\n        require(\r\n            auction.endedAt > block.number,\r\n            \"Auction has already ended. Unable to process bid. Aborting.\"\r\n        );\r\n        uint256 bidWithoutFee = (bidValue / (10000 + _auctionFee)) * 10000;\r\n        require(\r\n            auction.endingPrice < bidWithoutFee,\r\n            \"Bid fee of the auction fee is lower than actual highest bid price. Aborting.\"\r\n        );\r\n        require(\r\n            IERC20(auction.erc20Address).allowance(bidder, address(this)) >=\r\n            bidValue,\r\n            \"Insufficient approval for ERC20 token for the auction bid. Aborting.\"\r\n        );\r\n\r\n        Auction memory newAuction = Auction(\r\n            auction.seller,\r\n            auction.nftAddress,\r\n            auction.tokenId,\r\n            auction.isErc721,\r\n            auction.endedAt,\r\n            block.number,\r\n            auction.erc20Address,\r\n            auction.amount,\r\n            auction.endingPrice,\r\n            auction.bidder,\r\n            auction.highestBid\r\n        );\r\n        // reentrancy attack - we delete the auction temporarily\r\n        delete _auctions[id];\r\n\r\n        IERC20 token = IERC20(newAuction.erc20Address);\r\n        if (!token.transferFrom(bidder, address(this), bidValue)) {\r\n            revert(\r\n            \"Unable to transfer ERC20 tokens from the bidder to the Auction. Aborting\"\r\n            );\r\n        }\r\n\r\n        // returns the previous bid to the bidder\r\n        if (newAuction.bidder != address(0) && newAuction.highestBid != 0) {\r\n            _transferAssets(\r\n                newAuction.erc20Address,\r\n                newAuction.highestBid,\r\n                newAuction.bidder,\r\n                false\r\n            );\r\n        }\r\n\r\n        // paid amount is on the Auction SC, we just need to update the auction status\r\n        newAuction.endingPrice = bidWithoutFee;\r\n        newAuction.highestBid = bidValue;\r\n        newAuction.bidder = bidder;\r\n\r\n        _auctions[id] = newAuction;\r\n        emit AuctionBid(bidder, bidValue, id);\r\n    }\r\n\r\n    /**\r\n     * @dev Buyer wants to buy NFT from auction. All the required checks must pass.\r\n     * Buyer must either send ETH with this endpoint, or ERC20 tokens will be deducted from his account to the auction contract.\r\n     * Contract must detect, if the bidder bid higher value thank the actual highest bid. If it's not enough, bid is not valid.\r\n     * If bid is the highest one, previous bidders assets will be released back to him - we are aware of reentrancy attacks, but we will cover that.\r\n     * Bid must be processed only during the validity of the auction, otherwise it's not accepted.\r\n     * @param id - id of the auction to buy\r\n     * @param bidValue - bid value + the auction fee\r\n     */\r\n    function bid(string memory id, uint256 bidValue)\r\n    public\r\n    payable\r\n    whenNotPaused\r\n    {\r\n        Auction memory auction = _auctions[id];\r\n        uint256 bidWithoutFee = (bidValue / (10000 + _auctionFee)) * 10000;\r\n        require(\r\n            auction.endedAt > block.number,\r\n            \"Auction has already ended. Unable to process bid. Aborting.\"\r\n        );\r\n        require(\r\n            auction.endingPrice < bidWithoutFee,\r\n            \"Bid fee of the auction fee is lower than actual highest bid price. Aborting.\"\r\n        );\r\n        if (auction.erc20Address == address(0)) {\r\n            require(\r\n                bidValue <= msg.value,\r\n                \"Wrong amount entered for the bid. Aborting.\"\r\n            );\r\n        }\r\n        if (auction.erc20Address != address(0)) {\r\n            require(\r\n                IERC20(auction.erc20Address).allowance(\r\n                    msg.sender,\r\n                    address(this)\r\n                ) >= bidValue,\r\n                \"Insufficient approval for ERC20 token for the auction bid. Aborting.\"\r\n            );\r\n        }\r\n\r\n        Auction memory newAuction = Auction(\r\n            auction.seller,\r\n            auction.nftAddress,\r\n            auction.tokenId,\r\n            auction.isErc721,\r\n            auction.endedAt,\r\n            block.number,\r\n            auction.erc20Address,\r\n            auction.amount,\r\n            auction.endingPrice,\r\n            auction.bidder,\r\n            auction.highestBid\r\n        );\r\n        // reentrancy attack - we delete the auction temporarily\r\n        delete _auctions[id];\r\n\r\n        uint256 cashbackSum = 0;\r\n        if (newAuction.isErc721) {\r\n            if (_isTatumNFT(newAuction.nftAddress, newAuction.tokenId)) {\r\n                if (\r\n                    Tatum(newAuction.nftAddress).getCashbackAddress(\r\n                        newAuction.tokenId\r\n                    ) == address(0)\r\n                ) {\r\n                    uint256[] memory cashback = Tatum(newAuction.nftAddress)\r\n                    .tokenCashbackValues(newAuction.tokenId, bidValue);\r\n                    for (uint256 j = 0; j < cashback.length; j++) {\r\n                        cashbackSum += cashback[j];\r\n                    }\r\n                    if (newAuction.erc20Address == address(0)) {\r\n                        require(msg.value >= cashbackSum + bidValue, \"Balance Insufficient to pay royalties\");\r\n                    } else {\r\n                        require(msg.value >= cashbackSum, \"Balance Insufficient to pay royalties\");\r\n                    }\r\n                    Address.sendValue(payable(address(this)), cashbackSum);\r\n                }\r\n            }\r\n        }\r\n        if (newAuction.erc20Address != address(0)) {\r\n            IERC20 token = IERC20(newAuction.erc20Address);\r\n            if (!token.transferFrom(msg.sender, address(this), bidValue)) {\r\n                revert(\r\n                \"Unable to transfer ERC20 tokens to the Auction. Aborting\"\r\n                );\r\n            }\r\n        } else {\r\n            Address.sendValue(payable(address(this)), bidValue);\r\n        }\r\n        // returns the previous bid to the bidder\r\n        if (newAuction.bidder != address(0) && newAuction.highestBid != 0) {\r\n            _transferAssets(\r\n                newAuction.erc20Address,\r\n                newAuction.highestBid,\r\n                newAuction.bidder,\r\n                false\r\n            );\r\n        }\r\n        if (msg.value > bidValue + cashbackSum) {\r\n            Address.sendValue(\r\n                payable(msg.sender),\r\n                msg.value - cashbackSum - bidValue\r\n            );\r\n        }\r\n        // paid amount is on the Auction SC, we just need to update the auction status\r\n        newAuction.endingPrice = bidWithoutFee;\r\n        newAuction.highestBid = bidValue;\r\n        newAuction.bidder = msg.sender;\r\n\r\n        _auctions[id] = newAuction;\r\n        emit AuctionBid(msg.sender, bidValue, id);\r\n    }\r\n\r\n    /**\r\n     * Settle the already ended auction -\r\n     */\r\n    function settleAuction(string memory id) public payable virtual {\r\n        // fee must be sent to the fee recipient\r\n        // NFT token to the bidder\r\n        // payout to the seller\r\n        Auction memory auction = _auctions[id];\r\n        require(\r\n            auction.endedAt < block.number,\r\n            \"Auction can't be settled before it reaches the end.\"\r\n        );\r\n\r\n        bool isErc721 = auction.isErc721;\r\n        address nftAddress = auction.nftAddress;\r\n        uint256 amount = auction.amount;\r\n        uint256 tokenId = auction.tokenId;\r\n        address erc20Address = auction.erc20Address;\r\n        uint256 highestBid = auction.highestBid;\r\n        address bidder = auction.bidder;\r\n\r\n        // avoid reentrancy attacks\r\n        delete _auctions[id];\r\n\r\n        _transferNFT(\r\n            isErc721,\r\n            nftAddress,\r\n            auction.seller,\r\n            bidder,\r\n            tokenId,\r\n            amount,\r\n            auction.erc20Address\r\n        );\r\n        _transferAssets(erc20Address, highestBid, auction.seller, true);\r\n        _toRemove(id);\r\n        _auctionCount--;\r\n        emit AuctionSettled(id);\r\n    }\r\n\r\n    function _toRemove(string memory id) internal {\r\n        for (uint x = 0; x < _openAuctions.length; x++) {\r\n            if (\r\n                keccak256(abi.encodePacked(_openAuctions[x])) ==\r\n                keccak256(abi.encodePacked(id))\r\n            ) {\r\n                for (uint i = x; i < _openAuctions.length - 1; i++) {\r\n                    _openAuctions[i] = _openAuctions[i + 1];\r\n                }\r\n                _openAuctions.pop();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @dev Cancel auction - returns the NFT asset to the seller.\r\n     * @param id - id of the auction to cancel\r\n     */\r\n    function cancelAuction(string memory id) public payable virtual {\r\n        Auction memory auction = _auctions[id];\r\n        require(\r\n            auction.seller != address(0),\r\n            \"Auction is already settled. Aborting.\"\r\n        );\r\n        require(\r\n            auction.seller == msg.sender || msg.sender == owner(),\r\n            \"Auction can't be cancelled from other thank seller or owner. Aborting.\"\r\n        );\r\n        // bool isErc721 = auction.isErc721;\r\n        // address nftAddress = auction.nftAddress;\r\n        // uint256 amount = auction.amount;\r\n        // uint256 tokenId = auction.tokenId;\r\n        address erc20Address = auction.erc20Address;\r\n        uint256 highestBid = auction.highestBid;\r\n        address bidder = auction.bidder;\r\n\r\n        // prevent reentrancy attack\r\n        delete _auctions[id];\r\n\r\n        // we have assured that the reentrancy attack wont happen because we have deleted the auction from the list of auctions before we are sending the assets back\r\n        // returns the NFT to the seller\r\n\r\n        // returns the highest bid to the bidder\r\n        if (bidder != address(0) && highestBid != 0) {\r\n            _transferAssets(erc20Address, highestBid, bidder, false);\r\n        }\r\n        uint256 cashbackSum = 0;\r\n        if (_isTatumNFT(auction.nftAddress, auction.tokenId)) {\r\n            if (\r\n                Tatum(auction.nftAddress).getCashbackAddress(auction.tokenId) ==\r\n                address(0)\r\n            ) {\r\n                uint256[] memory cashback = Tatum(auction.nftAddress)\r\n                .tokenCashbackValues(auction.tokenId, highestBid);\r\n                for (uint256 j = 0; j < cashback.length; j++) {\r\n                    cashbackSum += cashback[j];\r\n                }\r\n            }\r\n        }\r\n        if (cashbackSum > 0 && bidder != address(0)) {\r\n            Address.sendValue(payable(bidder), cashbackSum);\r\n        }\r\n        _auctionCount--;\r\n        _toRemove(id);\r\n        emit AuctionCancelled(id);\r\n    }\r\n\r\n    function _uint2str(uint256 _i)\r\n    internal\r\n    pure\r\n    returns (string memory _uintAsString)\r\n    {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 j = _i;\r\n        uint256 len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint256 k = len;\r\n        while (_i != 0) {\r\n            k = k - 1;\r\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\r\n            bytes1 b1 = bytes1(temp);\r\n            bstr[k] = b1;\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n\r\n    function _isTatumNFT(address addr, uint256 p1) internal returns (bool){\r\n        bool success;\r\n        bytes memory data = abi.encodeWithSelector(bytes4(keccak256(\"getCashbackAddress(uint256)\")), p1);\r\n\r\n        assembly {\r\n            success := call(\r\n            gas(), // gas remaining\r\n            addr, // destination address\r\n            0, // no ether\r\n            add(data, 32), // input buffer (starts after the first 32 bytes in the `data` array)\r\n            mload(data), // input length (loaded from the first 32 bytes in the `data` array)\r\n            0, // output buffer\r\n            0               // output length\r\n            )\r\n        }\r\n\r\n        return success;\r\n    }\r\n}\r\n"
    },
    "contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/Context.sol\";\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/PausableMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../security/Pausable.sol\";\r\n\r\ncontract PausableMock is Pausable {\r\n    bool public drasticMeasureTaken;\r\n    uint256 public count;\r\n\r\n    constructor () {\r\n        drasticMeasureTaken = false;\r\n        count = 0;\r\n    }\r\n\r\n    function normalProcess() external whenNotPaused {\r\n        count++;\r\n    }\r\n\r\n    function drasticMeasure() external whenPaused {\r\n        drasticMeasureTaken = true;\r\n    }\r\n\r\n    function pause() external {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external {\r\n        _unpause();\r\n    }\r\n}\r\n"
    },
    "contracts/tatum/Tatum721ProvenanceWithRoyaltyUpdate.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"../token/ERC721/extensions/ERC721Enumerable.sol\";\r\nimport \"../token/ERC721/extensions/ERC721URIStorage.sol\";\r\nimport \"../access/AccessControlEnumerable.sol\";\r\nimport \"../token/ERC20/IERC20.sol\";\r\nimport \"../utils/introspection/ERC2981.sol\";\r\n\r\ncontract Tatum721ProvenanceWithRoyaltyUpdate is\r\n    ERC721Enumerable,\r\n    ERC2981,\r\n    ERC721URIStorage,\r\n    AccessControlEnumerable\r\n{\r\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\r\n    bytes32 public constant ROYALTY_UPDATER_ROLE = keccak256(\"ROYALTY_UPDATER_ROLE\");\r\n    mapping(uint256 => string[]) private _tokenData;\r\n    mapping(uint256 => address[]) private _cashbackRecipients;\r\n    mapping(uint256 => uint256[]) private _cashbackValues;\r\n    mapping(uint256 => uint256[]) private _fixedValues;\r\n    mapping(uint256 => address) private _customToken;\r\n    bool _publicMint;\r\n\r\n    event TransferWithProvenance(\r\n        uint256 indexed id,\r\n        address owner,\r\n        string data,\r\n        uint256 value\r\n    );\r\n\r\n        constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        bool publicMint\r\n    ) ERC721(name_, symbol_) {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n        _setupRole(MINTER_ROLE, _msgSender());\r\n        _publicMint = publicMint;\r\n    }\r\n\r\n    function royaltyInfo(uint256 tokenId, uint256 value)\r\n        external\r\n        view\r\n        override\r\n        returns (address, uint256)\r\n    {\r\n        uint256 result;\r\n        uint256 cbvalue = (_cashbackValues[tokenId][0] * value) / 10000;\r\n        result = _cashbackCalculator(cbvalue, _fixedValues[tokenId][0]);\r\n        return (_cashbackRecipients[tokenId][0], result);\r\n    }\r\n\r\n    function _appendTokenData(uint256 tokenId, string calldata tokenData)\r\n        internal\r\n        virtual\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721URIStorage: URI set of nonexistent token\"\r\n        );\r\n        _tokenData[tokenId].push(tokenData);\r\n    }\r\n\r\n    function mintWithTokenURI(\r\n        address to,\r\n        uint256 tokenId,\r\n        string memory uri,\r\n        address[] memory recipientAddresses,\r\n        uint256[] memory cashbackValues,\r\n        uint256[] memory fValues,\r\n        address erc20\r\n    ) public {\r\n        require(\r\n            erc20 != address(0),\r\n            \"Custom cashbacks cannot be set to 0 address\"\r\n        );\r\n        _customToken[tokenId] = erc20;\r\n        return\r\n            mintWithTokenURI(\r\n                to,\r\n                tokenId,\r\n                uri,\r\n                recipientAddresses,\r\n                cashbackValues,\r\n                fValues\r\n            );\r\n    }\r\n\r\n    function mintWithTokenURI(\r\n        address to,\r\n        uint256 tokenId,\r\n        string memory uri,\r\n        address[] memory recipientAddresses,\r\n        uint256[] memory cashbackValues,\r\n        uint256[] memory fValues\r\n    ) public {\r\n        if (!_publicMint) {\r\n            require(\r\n                hasRole(MINTER_ROLE, _msgSender()),\r\n                \"ERC721PresetMinterPauserAutoId: must have minter role to mint\"\r\n            );\r\n        }\r\n        _mint(to, tokenId);\r\n        _setTokenURI(tokenId, uri);\r\n        // saving cashback addresses and values\r\n        if (recipientAddresses.length > 0) {\r\n            _cashbackRecipients[tokenId] = recipientAddresses;\r\n            _cashbackValues[tokenId] = cashbackValues;\r\n            _fixedValues[tokenId] = fValues;\r\n        }\r\n    }\r\n\r\n    function mintMultiple(\r\n        address[] memory to,\r\n        uint256[] memory tokenId,\r\n        string[] memory uri,\r\n        address[][] memory recipientAddresses,\r\n        uint256[][] memory cashbackValues,\r\n        uint256[][] memory fValues,\r\n        address erc20\r\n    ) public {\r\n        require(\r\n            erc20 != address(0),\r\n            \"Custom cashbacks cannot be set to 0 address\"\r\n        );\r\n        for (uint256 i; i < to.length; i++) {\r\n            _customToken[tokenId[i]] = erc20;\r\n        }\r\n        return\r\n            mintMultiple(\r\n                to,\r\n                tokenId,\r\n                uri,\r\n                recipientAddresses,\r\n                cashbackValues,\r\n                fValues\r\n            );\r\n    }\r\n\r\n    function mintMultiple(\r\n        address[] memory to,\r\n        uint256[] memory tokenId,\r\n        string[] memory uri,\r\n        address[][] memory recipientAddresses,\r\n        uint256[][] memory cashbackValues,\r\n        uint256[][] memory fValues\r\n    ) public {\r\n        if (!_publicMint) {\r\n            require(\r\n                hasRole(MINTER_ROLE, _msgSender()),\r\n                \"ERC721PresetMinterPauserAutoId: must have minter role to mint\"\r\n            );\r\n        }\r\n        for (uint256 i; i < to.length; i++) {\r\n            _mint(to[i], tokenId[i]);\r\n            _setTokenURI(tokenId[i], uri[i]);\r\n            if (\r\n                recipientAddresses.length > 0 &&\r\n                recipientAddresses[i].length > 0\r\n            ) {\r\n                _cashbackRecipients[tokenId[i]] = recipientAddresses[i];\r\n                _cashbackValues[tokenId[i]] = cashbackValues[i];\r\n                _fixedValues[tokenId[i]] = fValues[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override(AccessControlEnumerable, ERC721, ERC721Enumerable, ERC2981)\r\n        returns (bool)\r\n    {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override(ERC721, ERC721URIStorage)\r\n        returns (string memory)\r\n    {\r\n        return ERC721URIStorage.tokenURI(tokenId);\r\n    }\r\n\r\n    function getCashbackAddress(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        returns (address)\r\n    {\r\n        return _customToken[tokenId];\r\n    }\r\n\r\n    function getTokenData(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        returns (string[] memory)\r\n    {\r\n        return _tokenData[tokenId];\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override(ERC721, ERC721Enumerable) {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n    }\r\n\r\n    function _burn(uint256 tokenId)\r\n        internal\r\n        virtual\r\n        override(ERC721, ERC721URIStorage)\r\n    {\r\n        return ERC721URIStorage._burn(tokenId);\r\n    }\r\n\r\n    function tokenCashbackValues(uint256 tokenId, uint256 tokenPrice)\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint256[] memory)\r\n    {\r\n        uint256[] memory result = _cashbackValues[tokenId];\r\n        for (uint256 i = 0; i < result.length; i++) {\r\n            uint256 cbvalue = (result[i] * tokenPrice) / 10000;\r\n            result[i] = _cashbackCalculator(cbvalue, _fixedValues[tokenId][i]);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function tokenCashbackRecipients(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        returns (address[] memory)\r\n    {\r\n        return _cashbackRecipients[tokenId];\r\n    }\r\n\r\n    function updateCashbackForAuthor(\r\n        uint256 tokenId,\r\n        address author,\r\n        uint256 cashbackValue\r\n    ) public {\r\n        require(\r\n            hasRole(ROYALTY_UPDATER_ROLE, _msgSender()),\r\n            \"ERC721PresetMinterPauserAutoId: must have ROYALTY_UPDATER_ROLE to update royalties\"\r\n        );\r\n        for (uint256 i; i < _cashbackValues[tokenId].length; i++) {\r\n            if (_cashbackRecipients[tokenId][i] == author) {\r\n                _cashbackValues[tokenId][i] = cashbackValue;\r\n            }\r\n        }\r\n    }\r\n\r\n    function burn(uint256 tokenId) public virtual {\r\n        //solhint-disable-next-line max-line-length\r\n        require(\r\n            _isApprovedOrOwner(_msgSender(), tokenId),\r\n            \"ERC721Burnable: caller is not owner nor approved\"\r\n        );\r\n        _burn(tokenId);\r\n    }\r\n\r\n    function _stringToUint(string memory s)\r\n        internal\r\n        pure\r\n        returns (uint256 result)\r\n    {\r\n        bytes memory b = bytes(s);\r\n        // result = 0;\r\n        for (uint256 i; i < b.length; i++) {\r\n            uint256 c = uint256(uint8(b[i]));\r\n            if (c >= 48 && c <= 57) {\r\n                result = result * 10 + (c - 48);\r\n            }\r\n        }\r\n    }\r\n\r\n    function allowance(address a, uint256 t) public view returns (bool) {\r\n        return _isApprovedOrOwner(a, t);\r\n    }\r\n\r\n    function safeTransfer(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata dataBytes\r\n    ) public payable {\r\n        uint256 index;\r\n        uint256 value;\r\n        uint256 percentSum;\r\n        IERC20 token;\r\n        (index, value) = _bytesCheck(dataBytes);\r\n        if (_customToken[tokenId] != address(0)) {\r\n            token = IERC20(_customToken[tokenId]);\r\n        }\r\n        if (_cashbackRecipients[tokenId].length > 0) {\r\n            for (uint256 i = 0; i < _cashbackValues[tokenId].length; i++) {\r\n                uint256 iPercent = (_cashbackValues[tokenId][i] * value) /\r\n                    10000;\r\n                if (iPercent >= _fixedValues[tokenId][i]) {\r\n                    percentSum += iPercent;\r\n                } else {\r\n                    percentSum += _fixedValues[tokenId][i];\r\n                }\r\n            }\r\n            if (_customToken[tokenId] == address(0)) {\r\n                if (percentSum > msg.value) {\r\n                    payable(msg.sender).transfer(msg.value);\r\n                    revert(\r\n                        \"Value should be greater than or equal to cashback value\"\r\n                    );\r\n                }\r\n            } else {\r\n                if (percentSum > token.allowance(to, address(this))) {\r\n                    revert(\r\n                        \"Insufficient ERC20 allowance balance for paying for the asset.\"\r\n                    );\r\n                }\r\n            }\r\n            for (uint256 i = 0; i < _cashbackRecipients[tokenId].length; i++) {\r\n                // transferring cashback to authors\r\n                uint256 cbvalue = (_cashbackValues[tokenId][i] * value) / 10000;\r\n                if (_customToken[tokenId] == address(0)) {\r\n                    cbvalue = _cashbackCalculator(\r\n                        cbvalue,\r\n                        _fixedValues[tokenId][i]\r\n                    );\r\n                    payable(_cashbackRecipients[tokenId][i]).transfer(cbvalue);\r\n                } else {\r\n                    cbvalue = _cashbackCalculator(\r\n                        cbvalue,\r\n                        _fixedValues[tokenId][i]\r\n                    );\r\n                    token.transferFrom(\r\n                        to,\r\n                        _cashbackRecipients[tokenId][i],\r\n                        cbvalue\r\n                    );\r\n                }\r\n            }\r\n            if (_customToken[tokenId] == address(0) && msg.value > percentSum) {\r\n                payable(msg.sender).transfer(msg.value - percentSum);\r\n            }\r\n            if (_customToken[tokenId] != address(0) && msg.value > 0) {\r\n                payable(msg.sender).transfer(msg.value);\r\n            }\r\n        }\r\n        _safeTransfer(msg.sender, to, tokenId, dataBytes);\r\n        string calldata dataString = string(dataBytes);\r\n        _appendTokenData(tokenId, dataString);\r\n        emit TransferWithProvenance(tokenId, to, dataString[:index], value);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata dataBytes\r\n    ) public payable virtual override {\r\n        uint256 index;\r\n        uint256 value;\r\n        uint256 percentSum;\r\n        IERC20 token;\r\n        (index, value) = _bytesCheck(dataBytes);\r\n\r\n        if (_customToken[tokenId] != address(0)) {\r\n            token = IERC20(_customToken[tokenId]);\r\n        }\r\n        if (_cashbackRecipients[tokenId].length > 0) {\r\n            for (uint256 i = 0; i < _cashbackValues[tokenId].length; i++) {\r\n                uint256 iPercent = (_cashbackValues[tokenId][i] * value) /\r\n                    10000;\r\n                if (iPercent >= _fixedValues[tokenId][i]) {\r\n                    percentSum += iPercent;\r\n                } else {\r\n                    percentSum += _fixedValues[tokenId][i];\r\n                }\r\n            }\r\n            if (_customToken[tokenId] == address(0)) {\r\n                if (percentSum > msg.value) {\r\n                    payable(from).transfer(msg.value);\r\n                    revert(\r\n                        \"Value should be greater than or equal to cashback value\"\r\n                    );\r\n                }\r\n            } else {\r\n                if (percentSum > token.allowance(to, address(this))) {\r\n                    revert(\r\n                        \"Insufficient ERC20 allowance balance for paying for the asset.\"\r\n                    );\r\n                }\r\n            }\r\n            for (uint256 i = 0; i < _cashbackRecipients[tokenId].length; i++) {\r\n                // transferring cashback to authors\r\n                uint256 cbvalue = (_cashbackValues[tokenId][i] * value) / 10000;\r\n                if (_customToken[tokenId] == address(0)) {\r\n                    cbvalue = _cashbackCalculator(\r\n                        cbvalue,\r\n                        _fixedValues[tokenId][i]\r\n                    );\r\n                    payable(_cashbackRecipients[tokenId][i]).transfer(cbvalue);\r\n                } else {\r\n                    cbvalue = _cashbackCalculator(\r\n                        cbvalue,\r\n                        _fixedValues[tokenId][i]\r\n                    );\r\n\r\n                    token.transferFrom(\r\n                        to,\r\n                        _cashbackRecipients[tokenId][i],\r\n                        cbvalue\r\n                    );\r\n                }\r\n            }\r\n            if (_customToken[tokenId] != address(0) && msg.value > 0) {\r\n                payable(from).transfer(msg.value);\r\n            }\r\n            if (_customToken[tokenId] == address(0) && msg.value > percentSum) {\r\n                payable(from).transfer(msg.value - percentSum);\r\n            }\r\n        }\r\n        _safeTransfer(from, to, tokenId, dataBytes);\r\n        string calldata dataString = string(dataBytes);\r\n        _appendTokenData(tokenId, dataString);\r\n        emit TransferWithProvenance(tokenId, to, dataString[:index], value);\r\n    }\r\n\r\n    function _cashbackCalculator(uint256 x, uint256 y)\r\n        private\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if (x >= y) {\r\n            return x;\r\n        }\r\n        return y;\r\n    }\r\n\r\n    function _bytesCheck(bytes calldata dataBytes)\r\n        private\r\n        pure\r\n        returns (uint256 index, uint256 value)\r\n    {\r\n        for (uint256 i = 0; i < dataBytes.length; i++) {\r\n            if (\r\n                dataBytes[i] == 0x27 &&\r\n                dataBytes.length > i + 8 &&\r\n                dataBytes[i + 1] == 0x27 &&\r\n                dataBytes[i + 2] == 0x27 &&\r\n                dataBytes[i + 3] == 0x23 &&\r\n                dataBytes[i + 4] == 0x23 &&\r\n                dataBytes[i + 5] == 0x23 &&\r\n                dataBytes[i + 6] == 0x27 &&\r\n                dataBytes[i + 7] == 0x27 &&\r\n                dataBytes[i + 8] == 0x27\r\n            ) {\r\n                index = i;\r\n                bytes calldata valueBytes = dataBytes[index + 9:];\r\n                value = _stringToUint(string(valueBytes));\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/utils/introspection/ERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./ERC165.sol\";\r\n\r\ninterface IERC2981 {\r\n    /// @notice Called with the sale price to determine how much royalty\r\n    //          is owed and to whom.\r\n    /// @param _tokenId - the NFT asset queried for royalty information\r\n    /// @param _value - the sale price of the NFT asset specified by _tokenId\r\n    /// @return _receiver - address of who should be sent the royalty payment\r\n    /// @return _royaltyAmount - the royalty payment amount for value sale price\r\n    function royaltyInfo(uint256 _tokenId, uint256 _value)\r\n        external\r\n        view\r\n        returns (address _receiver, uint256 _royaltyAmount);\r\n}\r\nabstract contract ERC2981 is ERC165, IERC2981 {\r\n    /// @inheritdoc\tERC165\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return\r\n            interfaceId == type(IERC2981).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n}"
    },
    "contracts/tatum/Tatum721Provenance.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\npragma experimental ABIEncoderV2;\r\nimport \"../token/ERC721/extensions/ERC721Enumerable.sol\";\r\nimport \"../token/ERC721/extensions/ERC721URIStorage.sol\";\r\nimport \"../access/AccessControlEnumerable.sol\";\r\nimport \"../token/ERC20/IERC20.sol\";\r\nimport \"../utils/introspection/ERC2981.sol\";\r\ncontract Tatum721Provenance is\r\n    ERC721Enumerable,\r\n    ERC2981,\r\n    ERC721URIStorage,\r\n    AccessControlEnumerable\r\n{\r\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\r\n    mapping(uint256 => string[]) private _tokenData;\r\n    mapping(uint256 => address[]) private _cashbackRecipients;\r\n    mapping(uint256 => uint256[]) private _cashbackValues;\r\n    mapping(uint256 => uint256[]) private _fixedValues;\r\n    mapping(uint256 => address) private _customToken;\r\n    bool _publicMint;\r\n    event TransferWithProvenance(\r\n        uint256 indexed id,\r\n        address owner,\r\n        string data,\r\n        uint256 value\r\n    );\r\n\r\n    constructor(string memory name_, string memory symbol_, bool publicMint)\r\n        ERC721(name_, symbol_)\r\n    {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n        _setupRole(MINTER_ROLE, _msgSender());\r\n        _publicMint=publicMint;\r\n    }\r\n    function royaltyInfo(uint256 tokenId, uint256 value)\r\n        external\r\n        view\r\n        override\r\n        returns (address, uint256)\r\n    {\r\n        uint256 result;\r\n        uint256 cbvalue = (_cashbackValues[tokenId][0] * value) / 10000;\r\n        result=_cashbackCalculator(cbvalue,_fixedValues[tokenId][0]);\r\n        return (_cashbackRecipients[tokenId][0],result);\r\n    }\r\n    function _appendTokenData(uint256 tokenId, string calldata tokenData)\r\n        internal\r\n        virtual\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721URIStorage: URI set of nonexistent token\"\r\n        );\r\n        _tokenData[tokenId].push(tokenData);\r\n    }\r\n\r\n    function mintWithTokenURI(\r\n        address to,\r\n        uint256 tokenId,\r\n        string memory uri,\r\n        address[] memory recipientAddresses,\r\n        uint256[] memory cashbackValues,\r\n        uint256[] memory fValues,\r\n        address erc20\r\n    ) public {\r\n        require(\r\n            erc20 != address(0),\r\n            \"Custom cashbacks cannot be set to 0 address\"\r\n        );\r\n        _customToken[tokenId] = erc20;\r\n        return\r\n            mintWithTokenURI(\r\n                to,\r\n                tokenId,\r\n                uri,\r\n                recipientAddresses,\r\n                cashbackValues,\r\n                fValues\r\n            );\r\n    }\r\n\r\n    function mintWithTokenURI(\r\n        address to,\r\n        uint256 tokenId,\r\n        string memory uri,\r\n        address[] memory recipientAddresses,\r\n        uint256[] memory cashbackValues,\r\n        uint256[] memory fValues\r\n    ) public {\r\n        if(!_publicMint){\r\n            require(\r\n                hasRole(MINTER_ROLE, _msgSender()),\r\n                \"ERC721PresetMinterPauserAutoId: must have minter role to mint\"\r\n            );\r\n        }\r\n        _mint(to, tokenId);\r\n        _setTokenURI(tokenId, uri);\r\n        // saving cashback addresses and values\r\n        if (recipientAddresses.length > 0) {\r\n            _cashbackRecipients[tokenId] = recipientAddresses;\r\n            _cashbackValues[tokenId] = cashbackValues;\r\n            _fixedValues[tokenId] = fValues;\r\n        }\r\n    }\r\n\r\n    function mintMultiple(\r\n        address[] memory to,\r\n        uint256[] memory tokenId,\r\n        string[] memory uri,\r\n        address[][] memory recipientAddresses,\r\n        uint256[][] memory cashbackValues,\r\n        uint256[][] memory fValues,\r\n        address erc20\r\n    ) public {\r\n        require(\r\n            erc20 != address(0),\r\n            \"Custom cashbacks cannot be set to 0 address\"\r\n        );\r\n        for (uint256 i; i < to.length; i++) {\r\n            _customToken[tokenId[i]] = erc20;\r\n        }\r\n        return\r\n            mintMultiple(\r\n                to,\r\n                tokenId,\r\n                uri,\r\n                recipientAddresses,\r\n                cashbackValues,\r\n                fValues\r\n            );\r\n    }\r\n\r\n    function mintMultiple(\r\n        address[] memory to,\r\n        uint256[] memory tokenId,\r\n        string[] memory uri,\r\n        address[][] memory recipientAddresses,\r\n        uint256[][] memory cashbackValues,\r\n        uint256[][] memory fValues\r\n    ) public {\r\n        if(!_publicMint){\r\n            require(\r\n                hasRole(MINTER_ROLE, _msgSender()),\r\n                \"ERC721PresetMinterPauserAutoId: must have minter role to mint\"\r\n            );\r\n        }\r\n        for (uint256 i; i < to.length; i++) {\r\n            _mint(to[i], tokenId[i]);\r\n            _setTokenURI(tokenId[i], uri[i]);\r\n            if (\r\n                recipientAddresses.length > 0 &&\r\n                recipientAddresses[i].length > 0\r\n            ) {\r\n                _cashbackRecipients[tokenId[i]] = recipientAddresses[i];\r\n                _cashbackValues[tokenId[i]] = cashbackValues[i];\r\n                _fixedValues[tokenId[i]] = fValues[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override(AccessControlEnumerable, ERC721, ERC721Enumerable, ERC2981)\r\n        returns (bool)\r\n    {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override(ERC721, ERC721URIStorage)\r\n        returns (string memory)\r\n    {\r\n        return ERC721URIStorage.tokenURI(tokenId);\r\n    }\r\n\r\n    function getCashbackAddress(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        returns (address)\r\n    {\r\n        return _customToken[tokenId];\r\n    }\r\n\r\n    function getTokenData(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        returns (string[] memory)\r\n    {\r\n        return _tokenData[tokenId];\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override(ERC721, ERC721Enumerable) {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n    }\r\n\r\n    function _burn(uint256 tokenId)\r\n        internal\r\n        virtual\r\n        override(ERC721, ERC721URIStorage)\r\n    {\r\n        return ERC721URIStorage._burn(tokenId);\r\n    }\r\n\r\n    function tokenCashbackValues(uint256 tokenId, uint256 tokenPrice)\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint256[] memory)\r\n    {\r\n        uint256[] memory result=_cashbackValues[tokenId];\r\n        for(uint i=0;i<result.length;i++){\r\n            uint256 cbvalue = (result[i] * tokenPrice) / 10000;\r\n            result[i]=_cashbackCalculator(cbvalue,_fixedValues[tokenId][i]);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function tokenCashbackRecipients(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        returns (address[] memory)\r\n    {\r\n        return _cashbackRecipients[tokenId];\r\n    }\r\n\r\n    function updateCashbackForAuthor(uint256 tokenId, uint256 cashbackValue)\r\n        public\r\n    {\r\n        for (uint256 i; i < _cashbackValues[tokenId].length; i++) {\r\n            if (_cashbackRecipients[tokenId][i] == _msgSender()) {\r\n                _cashbackValues[tokenId][i] = cashbackValue;\r\n            }\r\n        }\r\n    }\r\n\r\n    function burn(uint256 tokenId) public virtual {\r\n        //solhint-disable-next-line max-line-length\r\n        require(\r\n            _isApprovedOrOwner(_msgSender(), tokenId),\r\n            \"ERC721Burnable: caller is not owner nor approved\"\r\n        );\r\n        _burn(tokenId);\r\n    }\r\n\r\n    function _stringToUint(string memory s)\r\n        internal\r\n        pure\r\n        returns (uint256 result)\r\n    {\r\n        bytes memory b = bytes(s);\r\n        // result = 0;\r\n        for (uint256 i; i < b.length; i++) {\r\n            uint256 c = uint256(uint8(b[i]));\r\n            if (c >= 48 && c <= 57) {\r\n                result = result * 10 + (c - 48);\r\n            }\r\n        }\r\n    }\r\n\r\n    function allowance(address a, uint256 t) public view returns (bool) {\r\n        return _isApprovedOrOwner(a, t);\r\n    }\r\n\r\n    function safeTransfer(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata dataBytes\r\n    ) public payable {\r\n        uint256 index;\r\n        uint256 value;\r\n        uint256 percentSum;\r\n        IERC20 token;\r\n        (index, value) = _bytesCheck(dataBytes);\r\n        if (_customToken[tokenId] != address(0)) {\r\n            token = IERC20(_customToken[tokenId]);\r\n        }\r\n        if (_cashbackRecipients[tokenId].length > 0) {\r\n            for (uint256 i = 0; i < _cashbackValues[tokenId].length; i++) {\r\n                uint256 iPercent = (_cashbackValues[tokenId][i] * value) /\r\n                    10000;\r\n                if (iPercent >= _fixedValues[tokenId][i]) {\r\n                    percentSum += iPercent;\r\n                } else {\r\n                    percentSum += _fixedValues[tokenId][i];\r\n                }\r\n            }\r\n            if (_customToken[tokenId] == address(0)) {\r\n                if (percentSum > msg.value) {\r\n                    payable(msg.sender).transfer(msg.value);\r\n                    revert(\r\n                        \"Value should be greater than or equal to cashback value\"\r\n                    );\r\n                }\r\n            } else {\r\n                if (percentSum > token.allowance(to, address(this))) {\r\n                    revert(\r\n                        \"Insufficient ERC20 allowance balance for paying for the asset.\"\r\n                    );\r\n                }\r\n            }\r\n            for (uint256 i = 0; i < _cashbackRecipients[tokenId].length; i++) {\r\n                // transferring cashback to authors\r\n                uint256 cbvalue = (_cashbackValues[tokenId][i] * value) / 10000;\r\n                if (_customToken[tokenId] == address(0)) {\r\n                    cbvalue = _cashbackCalculator(\r\n                        cbvalue,\r\n                        _fixedValues[tokenId][i]\r\n                    );\r\n                    payable(_cashbackRecipients[tokenId][i]).transfer(cbvalue);\r\n                } else {\r\n                    cbvalue = _cashbackCalculator(\r\n                        cbvalue,\r\n                        _fixedValues[tokenId][i]\r\n                    );\r\n                    token.transferFrom(\r\n                        to,\r\n                        _cashbackRecipients[tokenId][i],\r\n                        cbvalue\r\n                    );\r\n                }\r\n            }\r\n            if(_customToken[tokenId] == address(0) && msg.value>percentSum){\r\n                payable(msg.sender).transfer(msg.value - percentSum);\r\n            }\r\n            if(_customToken[tokenId] != address(0) && msg.value>0){\r\n                    payable(msg.sender).transfer(msg.value);\r\n            }\r\n        }\r\n        _safeTransfer(msg.sender, to, tokenId, dataBytes);\r\n        string calldata dataString = string(dataBytes);\r\n        _appendTokenData(tokenId, dataString);\r\n        emit TransferWithProvenance(tokenId, to, dataString[:index], value);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata dataBytes\r\n    ) public payable virtual override {\r\n        uint256 index;\r\n        uint256 value;\r\n        uint256 percentSum;\r\n        IERC20 token;\r\n        (index, value) = _bytesCheck(dataBytes);\r\n\r\n        if (_customToken[tokenId] != address(0)) {\r\n            token = IERC20(_customToken[tokenId]);\r\n        }\r\n        if (_cashbackRecipients[tokenId].length > 0) {\r\n            for (uint256 i = 0; i < _cashbackValues[tokenId].length; i++) {\r\n                uint256 iPercent = (_cashbackValues[tokenId][i] * value) /\r\n                    10000;\r\n                if (iPercent >= _fixedValues[tokenId][i]) {\r\n                    percentSum += iPercent;\r\n                } else {\r\n                    percentSum += _fixedValues[tokenId][i];\r\n                }\r\n            }\r\n            if (_customToken[tokenId] == address(0)) {\r\n                if (percentSum > msg.value) {\r\n                    payable(from).transfer(msg.value);\r\n                    revert(\r\n                        \"Value should be greater than or equal to cashback value\"\r\n                    );\r\n                }\r\n            } else {\r\n                if (percentSum > token.allowance(to, address(this))) {\r\n                    revert(\r\n                        \"Insufficient ERC20 allowance balance for paying for the asset.\"\r\n                    );\r\n                }\r\n            }\r\n            for (uint256 i = 0; i < _cashbackRecipients[tokenId].length; i++) {\r\n                // transferring cashback to authors\r\n                uint256 cbvalue = (_cashbackValues[tokenId][i] * value) / 10000;\r\n                if (_customToken[tokenId] == address(0)) {\r\n                    cbvalue = _cashbackCalculator(\r\n                        cbvalue,\r\n                        _fixedValues[tokenId][i]\r\n                    );\r\n                    payable(_cashbackRecipients[tokenId][i]).transfer(cbvalue);\r\n                } else {\r\n                    cbvalue = _cashbackCalculator(\r\n                        cbvalue,\r\n                        _fixedValues[tokenId][i]\r\n                    );\r\n\r\n                    token.transferFrom(\r\n                        to,\r\n                        _cashbackRecipients[tokenId][i],\r\n                        cbvalue\r\n                    );\r\n                }\r\n            }\r\n            if(_customToken[tokenId] != address(0) && msg.value>0){\r\n                    payable(from).transfer(msg.value);\r\n            }\r\n            if(_customToken[tokenId] == address(0) && msg.value>percentSum){\r\n                payable(from).transfer(msg.value - percentSum);\r\n            }\r\n        }\r\n        _safeTransfer(from, to, tokenId, dataBytes);\r\n        string calldata dataString = string(dataBytes);\r\n        _appendTokenData(tokenId, dataString);\r\n        emit TransferWithProvenance(tokenId, to, dataString[:index], value);\r\n    }\r\n\r\n    function _cashbackCalculator(uint256 x, uint256 y)\r\n        private\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if (x >= y) {\r\n            return x;\r\n        }\r\n        return y;\r\n    }\r\n\r\n    function _bytesCheck(bytes calldata dataBytes)\r\n        private\r\n        pure\r\n        returns (uint256 index, uint256 value)\r\n    {\r\n        for (uint256 i = 0; i < dataBytes.length; i++) {\r\n            if (\r\n                dataBytes[i] == 0x27 &&\r\n                dataBytes.length > i + 8 &&\r\n                dataBytes[i + 1] == 0x27 &&\r\n                dataBytes[i + 2] == 0x27 &&\r\n                dataBytes[i + 3] == 0x23 &&\r\n                dataBytes[i + 4] == 0x23 &&\r\n                dataBytes[i + 5] == 0x23 &&\r\n                dataBytes[i + 6] == 0x27 &&\r\n                dataBytes[i + 7] == 0x27 &&\r\n                dataBytes[i + 8] == 0x27\r\n            ) {\r\n                index = i;\r\n                bytes calldata valueBytes = dataBytes[index + 9:];\r\n                value = _stringToUint(string(valueBytes));\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/tatum/Tatum721Cashback.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"../token/ERC721/extensions/ERC721Enumerable.sol\";\r\nimport \"../token/ERC721/extensions/ERC721URIStorage.sol\";\r\nimport \"../access/AccessControlEnumerable.sol\";\r\nimport \"../token/ERC20/IERC20.sol\";\r\nimport \"../utils/introspection/ERC2981.sol\";\r\n\r\ncontract Tatum721Cashback is\r\nERC721Enumerable,\r\nERC721URIStorage,\r\nERC2981,\r\nAccessControlEnumerable\r\n{\r\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\r\n\r\n    // mapping cashback to addresses and their values\r\n    mapping(uint256 => address[]) private _cashbackRecipients;\r\n    mapping(uint256 => uint256[]) private _cashbackValues;\r\n    mapping(uint256 => address) private _customToken;\r\n    bool _publicMint;\r\n    constructor(string memory name_, string memory symbol_,bool publicMint)\r\n        ERC721(name_, symbol_)\r\n    {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n        _setupRole(MINTER_ROLE, _msgSender());\r\n        _publicMint=publicMint;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens.\r\n     * @param to The address that will receive the minted tokens.\r\n     * @param tokenId The token id to mint.\r\n     * @param uri The token URI of the minted token.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mintWithTokenURI(\r\n        address to,\r\n        uint256 tokenId,\r\n        string memory uri\r\n    ) public returns (bool) {\r\n        if(!_publicMint){\r\n            require(\r\n                hasRole(MINTER_ROLE, _msgSender()),\r\n                \"ERC721PresetMinterPauserAutoId: must have minter role to mint\"\r\n            );\r\n        }\r\n        _mint(to, tokenId);\r\n        _setTokenURI(tokenId, uri);\r\n        return true;\r\n    }\r\n    function royaltyInfo(uint256 tokenId, uint256 value)\r\n            external\r\n            view\r\n            override\r\n            returns (address, uint256)\r\n        {\r\n            require(value >= 1, \"value should be greater than or equal to 1\");\r\n            return (_cashbackRecipients[tokenId][0], _cashbackValues[tokenId][0]);\r\n        }\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override(AccessControlEnumerable, ERC721, ERC721Enumerable, ERC2981)\r\n        returns (bool)\r\n    {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override(ERC721, ERC721URIStorage)\r\n        returns (string memory)\r\n    {\r\n        return ERC721URIStorage.tokenURI(tokenId);\r\n    }\r\n\r\n    function tokenCashbackValues(uint256 tokenId, uint256 tokenPrice)\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint256[] memory)\r\n    {\r\n        return _cashbackValues[tokenId];\r\n    }\r\n\r\n    function tokenCashbackRecipients(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        returns (address[] memory)\r\n    {\r\n        return _cashbackRecipients[tokenId];\r\n    }\r\n\r\n    function allowance(address a, uint256 t) public view returns (bool) {\r\n        return _isApprovedOrOwner(a, t);\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override(ERC721, ERC721Enumerable) {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n    }\r\n\r\n    function _burn(uint256 tokenId)\r\n        internal\r\n        virtual\r\n        override(ERC721, ERC721URIStorage)\r\n    {\r\n        return ERC721URIStorage._burn(tokenId);\r\n    }\r\n\r\n    function mintMultiple(\r\n        address[] memory to,\r\n        uint256[] memory tokenId,\r\n        string[] memory uri\r\n    ) public returns (bool) {\r\n        if(!_publicMint){\r\n            require(\r\n                hasRole(MINTER_ROLE, _msgSender()),\r\n                \"ERC721PresetMinterPauserAutoId: must have minter role to mint\"\r\n            );\r\n        }\r\n        for (uint256 i = 0; i < to.length; i++) {\r\n            _mint(to[i], tokenId[i]);\r\n            _setTokenURI(tokenId[i], uri[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function updateCashbackForAuthor(uint256 tokenId, uint256 cashbackValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        for (uint256 i = 0; i < _cashbackValues[tokenId].length; i++) {\r\n            if (_cashbackRecipients[tokenId][i] == _msgSender()) {\r\n                _cashbackValues[tokenId][i] = cashbackValue;\r\n                return true;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function getCashbackAddress(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        returns (address)\r\n    {\r\n        return _customToken[tokenId];\r\n    }\r\n\r\n    function mintMultipleCashback(\r\n        address[] memory to,\r\n        uint256[] memory tokenId,\r\n        string[] memory uri,\r\n        address[][] memory recipientAddresses,\r\n        uint256[][] memory cashbackValues,\r\n        address erc20\r\n    ) public returns (bool) {\r\n        require(\r\n            erc20 != address(0),\r\n            \"Custom cashbacks cannot be set to 0 address\"\r\n        );\r\n        for (uint256 i = 0; i < tokenId.length; i++) {\r\n            _customToken[tokenId[i]] = erc20;\r\n        }\r\n        return\r\n            mintMultipleCashback(\r\n                to,\r\n                tokenId,\r\n                uri,\r\n                recipientAddresses,\r\n                cashbackValues\r\n            );\r\n    }\r\n\r\n    function mintMultipleCashback(\r\n        address[] memory to,\r\n        uint256[] memory tokenId,\r\n        string[] memory uri,\r\n        address[][] memory recipientAddresses,\r\n        uint256[][] memory cashbackValues\r\n    ) public returns (bool) {\r\n        if(!_publicMint){\r\n            require(\r\n                hasRole(MINTER_ROLE, _msgSender()),\r\n                \"ERC721PresetMinterPauserAutoId: must have minter role to mint\"\r\n            );\r\n        }\r\n        for (uint256 i = 0; i < to.length; i++) {\r\n            _mint(to[i], tokenId[i]);\r\n            _setTokenURI(tokenId[i], uri[i]);\r\n            _cashbackRecipients[tokenId[i]] = recipientAddresses[i];\r\n            _cashbackValues[tokenId[i]] = cashbackValues[i];\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function mintWithCashback(\r\n        address to,\r\n        uint256 tokenId,\r\n        string memory uri,\r\n        address[] memory recipientAddresses,\r\n        uint256[] memory cashbackValues,\r\n        address erc20\r\n    ) public returns (bool) {\r\n        require(\r\n            erc20 != address(0),\r\n            \"Custom cashbacks cannot be set to 0 address\"\r\n        );\r\n        _customToken[tokenId] = erc20;\r\n        return\r\n            mintWithCashback(\r\n                to,\r\n                tokenId,\r\n                uri,\r\n                recipientAddresses,\r\n                cashbackValues\r\n            );\r\n    }\r\n\r\n    function mintWithCashback(\r\n        address to,\r\n        uint256 tokenId,\r\n        string memory uri,\r\n        address[] memory recipientAddresses,\r\n        uint256[] memory cashbackValues\r\n    ) public returns (bool) {\r\n        if(!_publicMint){\r\n            require(\r\n                hasRole(MINTER_ROLE, _msgSender()),\r\n                \"ERC721PresetMinterPauserAutoId: must have minter role to mint\"\r\n            );\r\n        }\r\n        _mint(to, tokenId);\r\n        _setTokenURI(tokenId, uri);\r\n        // saving cashback addresses and values\r\n        _cashbackRecipients[tokenId] = recipientAddresses;\r\n        _cashbackValues[tokenId] = cashbackValues;\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 tokenId) public virtual {\r\n        //solhint-disable-next-line max-line-length\r\n        require(\r\n            _isApprovedOrOwner(_msgSender(), tokenId),\r\n            \"ERC721Burnable: caller is not owner nor approved\"\r\n        );\r\n        _burn(tokenId);\r\n    }\r\n\r\n    function safeTransfer(address to, uint256 tokenId) public payable {\r\n        address erc = _customToken[tokenId];\r\n        IERC20 token;\r\n        if (erc != address(0)) {\r\n            token = IERC20(erc);\r\n        }\r\n        if (_cashbackRecipients[tokenId].length != 0) {\r\n            // checking cashback addresses exists and sum of cashbacks\r\n            require(\r\n                _cashbackRecipients[tokenId].length != 0,\r\n                \"CashbackToken should be of cashback type\"\r\n            );\r\n            uint256 sum = 0;\r\n            for (uint256 i = 0; i < _cashbackValues[tokenId].length; i++) {\r\n                sum += _cashbackValues[tokenId][i];\r\n            }\r\n            if (erc == address(0)) {\r\n                if (sum > msg.value) {\r\n                    payable(msg.sender).transfer(msg.value);\r\n                    revert(\r\n                        \"Value should be greater than or equal to cashback value\"\r\n                    );\r\n                }\r\n                for (\r\n                    uint256 i = 0;\r\n                    i < _cashbackRecipients[tokenId].length;\r\n                    i++\r\n                ) {\r\n                    // transferring cashback to authors\r\n                    if (_cashbackValues[tokenId][i] > 0) {\r\n                        payable(_cashbackRecipients[tokenId][i]).transfer(\r\n                            _cashbackValues[tokenId][i]\r\n                        );\r\n                    }\r\n                }\r\n                if (msg.value > sum) {\r\n                    payable(msg.sender).transfer(msg.value - sum);\r\n                }\r\n            } else {\r\n                if (sum > token.allowance(_msgSender(), address(this))) {\r\n                    revert(\r\n                        \"Insufficient ERC20 allowance balance for paying for the asset.\"\r\n                    );\r\n                }\r\n                for (\r\n                    uint256 i = 0;\r\n                    i < _cashbackRecipients[tokenId].length;\r\n                    i++\r\n                ) {\r\n                    // transferring cashback to authors\r\n                    if (_cashbackValues[tokenId][i] > 0) {\r\n                        token.transferFrom(\r\n                            _msgSender(),\r\n                            to,\r\n                            _cashbackValues[tokenId][i]\r\n                        );\r\n                    }\r\n                }\r\n                if (msg.value > 0) {\r\n                    payable(_msgSender()).transfer(msg.value);\r\n                }\r\n            }\r\n            _safeTransfer(_msgSender(), to, tokenId, \"\");\r\n        } else {\r\n            if (msg.value > 0) {\r\n                payable(msg.sender).transfer(msg.value);\r\n            }\r\n            _safeTransfer(_msgSender(), to, tokenId, \"\");\r\n        }\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory bytesData\r\n    ) public payable virtual override {\r\n        address erc = _customToken[tokenId];\r\n        IERC20 token;\r\n        if (erc != address(0)) {\r\n            token = IERC20(erc);\r\n        }\r\n        if (_cashbackRecipients[tokenId].length != 0) {\r\n            // checking cashback addresses exists and sum of cashbacks\r\n            require(\r\n                _cashbackRecipients[tokenId].length != 0,\r\n                \"CashbackToken should be of cashback type\"\r\n            );\r\n            uint256 sum = 0;\r\n            for (uint256 i = 0; i < _cashbackValues[tokenId].length; i++) {\r\n                sum += _cashbackValues[tokenId][i];\r\n            }\r\n            if (erc == address(0)) {\r\n                if (sum > msg.value) {\r\n                    payable(from).transfer(msg.value);\r\n                    revert(\r\n                        \"Value should be greater than or equal to cashback value\"\r\n                    );\r\n                }\r\n                for (\r\n                    uint256 i = 0;\r\n                    i < _cashbackRecipients[tokenId].length;\r\n                    i++\r\n                ) {\r\n                    // transferring cashback to authors\r\n                    if (_cashbackValues[tokenId][i] > 0) {\r\n                        payable(_cashbackRecipients[tokenId][i]).transfer(\r\n                            _cashbackValues[tokenId][i]\r\n                        );\r\n                    }\r\n                }\r\n                if (msg.value > sum) {\r\n                    payable(from).transfer(msg.value - sum);\r\n                }\r\n            } else {\r\n                if (sum > token.allowance(to, address(this))) {\r\n                    revert(\r\n                        \"Insufficient ERC20 allowance balance for paying for the asset.\"\r\n                    );\r\n                }\r\n                for (\r\n                    uint256 i = 0;\r\n                    i < _cashbackRecipients[tokenId].length;\r\n                    i++\r\n                ) {\r\n                    // transferring cashback to authors\r\n                    if (_cashbackValues[tokenId][i] > 0) {\r\n                        token.transferFrom(\r\n                            to,\r\n                            _cashbackRecipients[tokenId][i],\r\n                            _cashbackValues[tokenId][i]\r\n                        );\r\n                    }\r\n                }\r\n                if (msg.value > 0) {\r\n                    payable(msg.sender).transfer(msg.value);\r\n                }\r\n            }\r\n            _safeTransfer(from, to, tokenId, bytesData);\r\n        } else {\r\n            if (msg.value > 0) {\r\n                payable(from).transfer(msg.value);\r\n            }\r\n            _safeTransfer(from, to, tokenId, bytesData);\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/token/ERC1155/presets/ERC1155PresetMinterPauser.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../ERC1155.sol\";\r\nimport \"../extensions/ERC1155Burnable.sol\";\r\nimport \"../extensions/ERC1155Pausable.sol\";\r\nimport \"../../../access/AccessControlEnumerable.sol\";\r\nimport \"../../../utils/Context.sol\";\r\n\r\n/**\r\n * @dev {ERC1155} token, including:\r\n *\r\n *  - ability for holders to burn (destroy) their tokens\r\n *  - a minter role that allows for token minting (creation)\r\n *  - a pauser role that allows to stop all token transfers\r\n *\r\n * This contract uses {AccessControl} to lock permissioned functions using the\r\n * different roles - head to its documentation for details.\r\n *\r\n * The account that deploys the contract will be granted the minter and pauser\r\n * roles, as well as the default admin role, which will let it grant both minter\r\n * and pauser roles to other accounts.\r\n */\r\ncontract ERC1155PresetMinterPauser is Context, AccessControlEnumerable, ERC1155Burnable, ERC1155Pausable {\r\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\r\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\r\n\r\n    /**\r\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE`, and `PAUSER_ROLE` to the account that\r\n     * deploys the contract.\r\n     */\r\n    constructor(string memory uri) ERC1155(uri) {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n\r\n        _setupRole(MINTER_ROLE, _msgSender());\r\n        _setupRole(PAUSER_ROLE, _msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` new tokens for `to`, of token type `id`.\r\n     *\r\n     * See {ERC1155-_mint}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the `MINTER_ROLE`.\r\n     */\r\n    function mint(address to, uint256 id, uint256 amount, bytes memory data) public virtual {\r\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC1155PresetMinterPauser: must have minter role to mint\");\r\n\r\n        _mint(to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] variant of {mint}.\r\n     */\r\n    function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) public virtual {\r\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC1155PresetMinterPauser: must have minter role to mint\");\r\n\r\n        _mintBatch(to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Pauses all token transfers.\r\n     *\r\n     * See {ERC1155Pausable} and {Pausable-_pause}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the `PAUSER_ROLE`.\r\n     */\r\n    function pause() public virtual {\r\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC1155PresetMinterPauser: must have pauser role to pause\");\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n     * @dev Unpauses all token transfers.\r\n     *\r\n     * See {ERC1155Pausable} and {Pausable-_unpause}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the `PAUSER_ROLE`.\r\n     */\r\n    function unpause() public virtual {\r\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC1155PresetMinterPauser: must have pauser role to unpause\");\r\n        _unpause();\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(AccessControlEnumerable, ERC1155) returns (bool) {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    )\r\n        internal virtual override(ERC1155, ERC1155Pausable)\r\n    {\r\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n    }\r\n}\r\n"
    },
    "contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC1155.sol\";\r\nimport \"./IERC1155Receiver.sol\";\r\nimport \"./extensions/IERC1155MetadataURI.sol\";\r\nimport \"../../utils/Address.sol\";\r\nimport \"../../utils/Ownable.sol\";\r\nimport \"../../utils/introspection/ERC165.sol\";\r\n\r\n/**\r\n *\r\n * @dev Implementation of the basic standard multi-token.\r\n * See https://eips.ethereum.org/EIPS/eip-1155\r\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\r\n *\r\n * _Available since v3.1._\r\n */\r\ncontract ERC1155 is Ownable, ERC165, IERC1155, IERC1155MetadataURI {\r\n    using Address for address;\r\n\r\n    // Mapping from token ID to account balances\r\n    mapping (uint256 => mapping(address => uint256)) private _balances;\r\n\r\n    // Mapping from account to operator approvals\r\n    mapping (address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\r\n    string private _uri;\r\n\r\n    /**\r\n     * @dev See {_setURI}.\r\n     */\r\n    constructor (string memory uri_) {\r\n        _setURI(uri_);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IERC1155).interfaceId\r\n            || interfaceId == type(IERC1155MetadataURI).interfaceId\r\n            || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155MetadataURI-uri}.\r\n     *\r\n     * This implementation returns the same URI for *all* token types. It relies\r\n     * on the token type ID substitution mechanism\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n     *\r\n     * Clients calling this function must replace the `\\{id\\}` substring with the\r\n     * actual token type ID.\r\n     */\r\n    function uri(uint256) external view virtual override returns (string memory) {\r\n        return _uri;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\r\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\r\n        return _balances[id][account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOfBatch}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(\r\n        address[] memory accounts,\r\n        uint256[] memory ids\r\n    )\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256[] memory)\r\n    {\r\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\r\n\r\n        uint256[] memory batchBalances = new uint256[](accounts.length);\r\n\r\n        for (uint256 i = 0; i < accounts.length; ++i) {\r\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\r\n        }\r\n\r\n        return batchBalances;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(_msgSender() != operator, \"ERC1155: setting approval status for self\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[account][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    )\r\n        public\r\n        virtual\r\n        override\r\n    {\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: caller is not owner nor approved\"\r\n        );\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\r\n\r\n        uint256 fromBalance = _balances[id][from];\r\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\r\n        _balances[id][from] = fromBalance - amount;\r\n        _balances[id][to] += amount;\r\n\r\n        emit TransferSingle(operator, from, to, id, amount);\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeBatchTransferFrom}.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    )\r\n        public\r\n        virtual\r\n        override\r\n    {\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: transfer caller is not owner nor approved\"\r\n        );\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n        for (uint256 i = 0; i < ids.length; ++i) {\r\n            uint256 id = ids[i];\r\n            uint256 amount = amounts[i];\r\n\r\n            uint256 fromBalance = _balances[id][from];\r\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\r\n            _balances[id][from] = fromBalance - amount;\r\n            _balances[id][to] += amount;\r\n        }\r\n\r\n        emit TransferBatch(operator, from, to, ids, amounts);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a new URI for all token types, by relying on the token type ID\r\n     * substitution mechanism\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n     *\r\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\r\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\r\n     * clients with the token type ID.\r\n     *\r\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\r\n     * interpreted by clients as\r\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\r\n     * for token type ID 0x4cce0.\r\n     *\r\n     * See {uri}.\r\n     *\r\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\r\n     * this function emits no events.\r\n     */\r\n    function _setURI(string memory newuri) internal virtual {\r\n        _uri = newuri;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\r\n        require(account != address(0), \"ERC1155: mint to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\r\n\r\n        _balances[id][account] += amount;\r\n        emit TransferSingle(operator, address(0), account, id, amount);\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\r\n        require(to != address(0), \"ERC1155: mint to the zero address\");\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n        for (uint i = 0; i < ids.length; i++) {\r\n            _balances[ids[i]][to] += amounts[i];\r\n        }\r\n\r\n        emit TransferBatch(operator, address(0), to, ids, amounts);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens of token type `id` from `account`\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens of token type `id`.\r\n     */\r\n    function _burn(address account, uint256 id, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC1155: burn from the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\r\n\r\n        uint256 accountBalance = _balances[id][account];\r\n        require(accountBalance >= amount, \"ERC1155: burn amount exceeds balance\");\r\n        _balances[id][account] = accountBalance - amount;\r\n\r\n        emit TransferSingle(operator, account, address(0), id, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     */\r\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\r\n        require(account != address(0), \"ERC1155: burn from the zero address\");\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \"\");\r\n\r\n        for (uint i = 0; i < ids.length; i++) {\r\n            uint256 id = ids[i];\r\n            uint256 amount = amounts[i];\r\n\r\n            uint256 accountBalance = _balances[id][account];\r\n            require(accountBalance >= amount, \"ERC1155: burn amount exceeds balance\");\r\n            _balances[id][account] = accountBalance - amount;\r\n        }\r\n\r\n        emit TransferBatch(operator, account, address(0), ids, amounts);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning, as well as batched variants.\r\n     *\r\n     * The same hook is called on both single and batched variants. For single\r\n     * transfers, the length of the `id` and `amount` arrays will be 1.\r\n     *\r\n     * Calling conditions (for each `id` and `amount` pair):\r\n     *\r\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * of token type `id` will be  transferred to `to`.\r\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\r\n     * for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\r\n     * will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     * - `ids` and `amounts` have the same, non-zero length.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    )\r\n        internal\r\n        virtual\r\n    { }\r\n\r\n    function _doSafeTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    )\r\n        private\r\n    {\r\n        if (to.isContract()) {\r\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\r\n                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _doSafeBatchTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    )\r\n        private\r\n    {\r\n        if (to.isContract()) {\r\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\r\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\r\n        uint256[] memory array = new uint256[](1);\r\n        array[0] = element;\r\n\r\n        return array;\r\n    }\r\n}\r\n"
    },
    "contracts/token/ERC1155/extensions/ERC1155Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../ERC1155.sol\";\r\n\r\n/**\r\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\r\n * own tokens and those that they have been approved to use.\r\n *\r\n * _Available since v3.1._\r\n */\r\nabstract contract ERC1155Burnable is ERC1155 {\r\n    function burn(address account, uint256 id, uint256 value) public virtual {\r\n        require(\r\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\r\n            \"ERC1155: caller is not owner nor approved\"\r\n        );\r\n\r\n        _burn(account, id, value);\r\n    }\r\n\r\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory values) public virtual {\r\n        require(\r\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\r\n            \"ERC1155: caller is not owner nor approved\"\r\n        );\r\n\r\n        _burnBatch(account, ids, values);\r\n    }\r\n}\r\n"
    },
    "contracts/token/ERC1155/extensions/ERC1155Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../ERC1155.sol\";\r\nimport \"../../../security/Pausable.sol\";\r\n\r\n/**\r\n * @dev ERC1155 token with pausable token transfers, minting and burning.\r\n *\r\n * Useful for scenarios such as preventing trades until the end of an evaluation\r\n * period, or having an emergency switch for freezing all token transfers in the\r\n * event of a large bug.\r\n *\r\n * _Available since v3.1._\r\n */\r\nabstract contract ERC1155Pausable is ERC1155, Pausable {\r\n    /**\r\n     * @dev See {ERC1155-_beforeTokenTransfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the contract must not be paused.\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    )\r\n        internal\r\n        virtual\r\n        override\r\n    {\r\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n        require(!paused(), \"ERC1155Pausable: token transfer while paused\");\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/ERC1155Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../token/ERC1155/ERC1155.sol\";\r\n\r\n/**\r\n * @title ERC1155Mock\r\n * This mock just publicizes internal functions for testing purposes\r\n */\r\ncontract ERC1155Mock is ERC1155 {\r\n    constructor (string memory uri) ERC1155(uri) {\r\n        // solhint-disable-previous-line no-empty-blocks\r\n    }\r\n\r\n    function setURI(string memory newuri) public {\r\n        _setURI(newuri);\r\n    }\r\n\r\n    function mint(address to, uint256 id, uint256 value, bytes memory data) public {\r\n        _mint(to, id, value, data);\r\n    }\r\n\r\n    function mintBatch(address to, uint256[] memory ids, uint256[] memory values, bytes memory data) public {\r\n        _mintBatch(to, ids, values, data);\r\n    }\r\n\r\n    function burn(address owner, uint256 id, uint256 value) public {\r\n        _burn(owner, id, value);\r\n    }\r\n\r\n    function burnBatch(address owner, uint256[] memory ids, uint256[] memory values) public {\r\n        _burnBatch(owner, ids, values);\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/ERC1155PausableMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./ERC1155Mock.sol\";\r\nimport \"../token/ERC1155/extensions/ERC1155Pausable.sol\";\r\n\r\ncontract ERC1155PausableMock is ERC1155Mock, ERC1155Pausable {\r\n    constructor(string memory uri) ERC1155Mock(uri) { }\r\n\r\n    function pause() external {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external {\r\n        _unpause();\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    )\r\n        internal virtual override(ERC1155, ERC1155Pausable)\r\n    {\r\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n    }\r\n}\r\n"
    },
    "contracts/tatum/nft/MarketplaceListing.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"../../token/ERC20/IERC20.sol\";\r\nimport \"../../token/ERC721/IERC721.sol\";\r\nimport \"../../token/ERC1155/IERC1155.sol\";\r\nimport \"../../access/Ownable.sol\";\r\nimport \"../../utils/Address.sol\";\r\n\r\ncontract Tatum {\r\n    function tokenCashbackValues(uint256 tokenId, uint256 tokenPrice)\r\n    public\r\n    view\r\n    virtual\r\n    returns (uint256[] memory)\r\n    {}\r\n\r\n    function getCashbackAddress(uint256 tokenId)\r\n    public\r\n    view\r\n    virtual\r\n    returns (address)\r\n    {}\r\n}\r\n\r\ncontract MarketplaceListing is Ownable {\r\n    using Address for address;\r\n\r\n    enum State {\r\n        INITIATED,\r\n        SOLD,\r\n        CANCELLED\r\n    }\r\n\r\n    struct Listing {\r\n        string listingId;\r\n        bool isErc721;\r\n        State state;\r\n        address nftAddress;\r\n        address seller;\r\n        address erc20Address;\r\n        uint256 tokenId;\r\n        uint256 amount;\r\n        uint256 price;\r\n        address buyer;\r\n    }\r\n\r\n    // List of all listings in the marketplace. All historical ones are here as well.\r\n    mapping(string => Listing) private _listings;\r\n    string[] private _openListings;\r\n    uint256 private _marketplaceFee;\r\n    address private _marketplaceFeeRecipient;\r\n    /**\r\n     * @dev Emitted when new listing is created by the owner of the contract. Amount is valid only for ERC-1155 tokens\r\n     */\r\n    event ListingCreated(\r\n        bool indexed isErc721,\r\n        address indexed nftAddress,\r\n        uint256 indexed tokenId,\r\n        string listingId,\r\n        uint256 amount,\r\n        uint256 price,\r\n        address erc20Address\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when listing assets were sold.\r\n     */\r\n    event ListingSold(address indexed buyer, string listingId);\r\n\r\n    /**\r\n     * @dev Emitted when listing was cancelled and assets were returned to the seller.\r\n     */\r\n    event ListingCancelled(string listingId);\r\n\r\n    receive() external payable {}\r\n\r\n    function onERC1155Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual returns (bytes4) {\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(\r\n        address,\r\n        address,\r\n        uint256[] memory,\r\n        uint256[] memory,\r\n        bytes memory\r\n    ) public virtual returns (bytes4) {\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n\r\n    constructor(uint256 fee, address feeRecipient) {\r\n        _marketplaceFee = fee;\r\n        _marketplaceFeeRecipient = feeRecipient;\r\n    }\r\n\r\n    function getMarketplaceFee() public view virtual returns (uint256) {\r\n        return _marketplaceFee;\r\n    }\r\n\r\n    function getMarketplaceFeeRecipient()\r\n    public\r\n    view\r\n    virtual\r\n    returns (address)\r\n    {\r\n        return _marketplaceFeeRecipient;\r\n    }\r\n\r\n    function getListing(string memory listingId)\r\n    public\r\n    view\r\n    virtual\r\n    returns (Listing memory)\r\n    {\r\n        return _listings[listingId];\r\n    }\r\n\r\n    function getOpenListings()\r\n    public\r\n    view\r\n    virtual\r\n    returns (string[] memory)\r\n    {\r\n        return _openListings;\r\n    }\r\n\r\n    function setMarketplaceFee(uint256 fee) public virtual onlyOwner {\r\n        _marketplaceFee = fee;\r\n    }\r\n\r\n    function setMarketplaceFeeRecipient(address recipient)\r\n    public\r\n    virtual\r\n    onlyOwner\r\n    {\r\n        _marketplaceFeeRecipient = recipient;\r\n    }\r\n\r\n    /**\r\n     * @dev Create new listing of the NFT token in the marketplace.\r\n     * @param listingId - ID of the listing, must be unique\r\n     * @param isErc721 - whether the listing is for ERC721 or ERC1155 token\r\n     * @param nftAddress - address of the NFT token\r\n     * @param tokenId - ID of the NFT token\r\n     * @param price - Price for the token. It could be in wei or smallest ERC20 value, if @param erc20Address is not 0x0 address\r\n     * @param amount - ERC1155 only, number of tokens to sold.\r\n     * @param erc20Address - address of the ERC20 token, which will be used for the payment. If native asset is used, this should be 0x0 address\r\n     */\r\n    function createListing(\r\n        string memory listingId,\r\n        bool isErc721,\r\n        address nftAddress,\r\n        uint256 tokenId,\r\n        uint256 price,\r\n        address seller,\r\n        uint256 amount,\r\n        address erc20Address\r\n    ) public payable {\r\n        if (\r\n            keccak256(abi.encodePacked(_listings[listingId].listingId)) ==\r\n            keccak256(abi.encodePacked(listingId))\r\n        ) {\r\n            revert(\"Listing already existed for current listing Id\");\r\n        }\r\n        if (!isErc721) {\r\n            require(amount > 0);\r\n            require(\r\n                IERC1155(nftAddress).balanceOf(seller, tokenId) >= amount,\r\n                \"ERC1155 token balance is not sufficient for the seller..\"\r\n            );\r\n        } else {\r\n            require(\r\n                IERC721(nftAddress).ownerOf(tokenId) == seller,\r\n                \"ERC721 token does not belong to the author.\"\r\n            );\r\n            if (_isTatumNFT(nftAddress, tokenId)) {\r\n                if (Tatum(nftAddress).getCashbackAddress(tokenId) == address(0)) {\r\n                    uint256 cashbackSum = 0;\r\n                    uint256[] memory cashback = Tatum(nftAddress)\r\n                    .tokenCashbackValues(tokenId, price);\r\n                    for (uint256 j = 0; j < cashback.length; j++) {\r\n                        cashbackSum += cashback[j];\r\n                    }\r\n                    require(\r\n                        msg.value >= cashbackSum,\r\n                        \"Balance Insufficient to pay royalties\"\r\n                    );\r\n                    Address.sendValue(payable(address(this)), cashbackSum);\r\n                    if (msg.value > cashbackSum) {\r\n                        Address.sendValue(\r\n                            payable(msg.sender),\r\n                            msg.value - cashbackSum\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Listing memory listing = Listing(\r\n            listingId,\r\n            isErc721,\r\n            State.INITIATED,\r\n            nftAddress,\r\n            seller,\r\n            erc20Address,\r\n            tokenId,\r\n            amount,\r\n            price,\r\n            address(0)\r\n        );\r\n        _listings[listingId] = listing;\r\n        _openListings.push(listingId);\r\n        emit ListingCreated(\r\n            isErc721,\r\n            nftAddress,\r\n            tokenId,\r\n            listingId,\r\n            amount,\r\n            price,\r\n            erc20Address\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Buyer wants to buy NFT from listing. All the required checks must pass.\r\n     * Buyer must either send ETH with this endpoint, or ERC20 tokens will be deducted from his account to the marketplace contract.\r\n     * @param listingId - id of the listing to buy\r\n     * @param erc20Address - optional address of the ERC20 token to pay for the assets, if listing is listed in ERC20\r\n     */\r\n    function buyAssetFromListing(string memory listingId, address erc20Address)\r\n    public\r\n    payable\r\n    {\r\n        Listing memory listing = _listings[listingId];\r\n        if (listing.state != State.INITIATED) {\r\n            if (msg.value > 0) {\r\n                Address.sendValue(payable(msg.sender), msg.value);\r\n            }\r\n            revert(\"Listing is in wrong state. Aborting.\");\r\n        }\r\n        if (listing.isErc721) {\r\n            if (\r\n                IERC721(listing.nftAddress).getApproved(listing.tokenId) !=\r\n                address(this)\r\n            ) {\r\n                if (msg.value > 0) {\r\n                    Address.sendValue(payable(msg.sender), msg.value);\r\n                }\r\n                revert(\r\n                \"Asset is not owned by this listing. Probably was not sent to the smart contract, or was already sold.\"\r\n                );\r\n            }\r\n        } else {\r\n            if (\r\n                IERC1155(listing.nftAddress).balanceOf(\r\n                    listing.seller,\r\n                    listing.tokenId\r\n                ) < listing.amount\r\n            ) {\r\n                if (msg.value > 0) {\r\n                    Address.sendValue(payable(msg.sender), msg.value);\r\n                }\r\n                revert(\r\n                \"Insufficient balance of the asset in this listing. Probably was not sent to the smart contract, or was already sold.\"\r\n                );\r\n            }\r\n        }\r\n        if (listing.erc20Address != erc20Address) {\r\n            if (msg.value > 0) {\r\n                Address.sendValue(payable(msg.sender), msg.value);\r\n            }\r\n            revert(\r\n            \"ERC20 token address as a payer method should be the same as in the listing. Either listing, or method call has wrong ERC20 address.\"\r\n            );\r\n        }\r\n        uint256 fee = (listing.price * _marketplaceFee) / 10000;\r\n        listing.state = State.SOLD;\r\n        listing.buyer = msg.sender;\r\n        _listings[listingId] = listing;\r\n        uint256 cashbackSum = 0;\r\n        if (listing.isErc721) {\r\n            if (_isTatumNFT(listing.nftAddress, listing.tokenId)) {\r\n                if (\r\n                    Tatum(listing.nftAddress).getCashbackAddress(listing.tokenId) ==\r\n                    address(0)\r\n                ) {\r\n                    uint256[] memory cashback = Tatum(listing.nftAddress)\r\n                    .tokenCashbackValues(listing.tokenId, listing.price);\r\n                    for (uint256 j = 0; j < cashback.length; j++) {\r\n                        cashbackSum += cashback[j];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (listing.erc20Address == address(0)) {\r\n            if (listing.price + fee > msg.value) {\r\n                if (msg.value > 0) {\r\n                    Address.sendValue(payable(msg.sender), msg.value);\r\n                }\r\n                revert(\"Insufficient price paid for the asset.\");\r\n            }\r\n            Address.sendValue(payable(_marketplaceFeeRecipient), fee);\r\n            Address.sendValue(payable(listing.seller), listing.price);\r\n            // Overpaid price is returned back to the sender\r\n            if (msg.value - listing.price - fee > 0) {\r\n                Address.sendValue(\r\n                    payable(msg.sender),\r\n                    msg.value - listing.price - fee\r\n                );\r\n            }\r\n            if (listing.isErc721) {\r\n                IERC721(listing.nftAddress).safeTransferFrom{\r\n                value : cashbackSum\r\n                }(\r\n                    listing.seller,\r\n                    msg.sender,\r\n                    listing.tokenId,\r\n                    abi.encodePacked(\r\n                        \"SafeTransferFrom\",\r\n                        \"'''###'''\",\r\n                        _uint2str(listing.price)\r\n                    )\r\n                );\r\n            } else {\r\n                IERC1155(listing.nftAddress).safeTransferFrom(\r\n                    listing.seller,\r\n                    msg.sender,\r\n                    listing.tokenId,\r\n                    listing.amount,\r\n                    \"\"\r\n                );\r\n            }\r\n        } else {\r\n            IERC20 token = IERC20(listing.erc20Address);\r\n            if (\r\n                listing.price + fee > token.allowance(msg.sender, address(this))\r\n            ) {\r\n                if (msg.value > 0) {\r\n                    Address.sendValue(payable(msg.sender), msg.value);\r\n                }\r\n                revert(\r\n                \"Insufficient ERC20 allowance balance for paying for the asset.\"\r\n                );\r\n            }\r\n            token.transferFrom(msg.sender, _marketplaceFeeRecipient, fee);\r\n            token.transferFrom(msg.sender, listing.seller, listing.price);\r\n            if (msg.value > 0) {\r\n                Address.sendValue(payable(msg.sender), msg.value);\r\n            }\r\n            if (listing.isErc721) {\r\n                bytes memory bytesInput = abi.encodePacked(\r\n                    \"CUSTOMTOKEN0x\",\r\n                    _toAsciiString(listing.erc20Address),\r\n                    \"'''###'''\",\r\n                    _uint2str(listing.price)\r\n                );\r\n                IERC721(listing.nftAddress).safeTransferFrom{\r\n                value : cashbackSum\r\n                }(listing.seller, msg.sender, listing.tokenId, bytesInput);\r\n            } else {\r\n                IERC1155(listing.nftAddress).safeTransferFrom(\r\n                    listing.seller,\r\n                    msg.sender,\r\n                    listing.tokenId,\r\n                    listing.amount,\r\n                    \"\"\r\n                );\r\n            }\r\n        }\r\n        _toRemove(listingId);\r\n        emit ListingSold(msg.sender, listingId);\r\n    }\r\n\r\n    function _toRemove(string memory listingId) internal {\r\n        for (uint x = 0; x < _openListings.length; x++) {\r\n            if (\r\n                keccak256(abi.encodePacked(_openListings[x])) ==\r\n                keccak256(abi.encodePacked(listingId))\r\n            ) {\r\n                for (uint i = x; i < _openListings.length - 1; i++) {\r\n                    _openListings[i] = _openListings[i + 1];\r\n                }\r\n                _openListings.pop();\r\n            }\r\n        }\r\n    }\r\n\r\n    function _toAsciiString(address x) internal pure returns (bytes memory) {\r\n        bytes memory s = new bytes(40);\r\n        for (uint256 i = 0; i < 20; i++) {\r\n            bytes1 b = bytes1(uint8(uint256(uint160(x)) / (2 ** (8 * (19 - i)))));\r\n            bytes1 hi = bytes1(uint8(b) / 16);\r\n            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\r\n            s[2 * i] = _char(hi);\r\n            s[2 * i + 1] = _char(lo);\r\n        }\r\n        return s;\r\n    }\r\n\r\n    function _char(bytes1 b) internal pure returns (bytes1 c) {\r\n        if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\r\n        else return bytes1(uint8(b) + 0x57);\r\n    }\r\n\r\n    function _uint2str(uint256 _i)\r\n    internal\r\n    pure\r\n    returns (string memory _uintAsString)\r\n    {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 j = _i;\r\n        uint256 len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint256 k = len;\r\n        while (_i != 0) {\r\n            k = k - 1;\r\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\r\n            bytes1 b1 = bytes1(temp);\r\n            bstr[k] = b1;\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n\r\n    /**\r\n     * @dev Buyer wants to buy NFT from listing. All the required checks must pass.\r\n     * Buyer must approve spending of the ERC20 tokens will be deducted from his account to the marketplace contract.\r\n     * @param listingId - id of the listing to buy\r\n     * @param erc20Address - optional address of the ERC20 token to pay for the assets\r\n     * @param buyer - buyer of the item, from which account the ERC20 assets will be debited\r\n     */\r\n    function buyAssetFromListingForExternalBuyer(\r\n        string memory listingId,\r\n        address erc20Address,\r\n        address buyer\r\n    ) public payable {\r\n        Listing memory listing = _listings[listingId];\r\n        if (listing.state != State.INITIATED) {\r\n            revert(\"Listing is in wrong state. Aborting.\");\r\n        }\r\n        if (listing.isErc721) {\r\n            if (\r\n                IERC721(listing.nftAddress).getApproved(listing.tokenId) !=\r\n                address(this)\r\n            ) {\r\n                revert(\r\n                \"Asset is not owned by this listing. Probably was not sent to the smart contract, or was already sold.\"\r\n                );\r\n            }\r\n        } else {\r\n            if (\r\n                IERC1155(listing.nftAddress).balanceOf(\r\n                    listing.seller,\r\n                    listing.tokenId\r\n                ) < listing.amount\r\n            ) {\r\n                revert(\r\n                \"Insufficient balance of the asset in this listing. Probably was not sent to the smart contract, or was already sold.\"\r\n                );\r\n            }\r\n        }\r\n        if (listing.erc20Address != erc20Address) {\r\n            revert(\r\n            \"ERC20 token address as a payer method should be the same as in the listing. Either listing, or method call has wrong ERC20 address.\"\r\n            );\r\n        }\r\n        uint256 fee = (listing.price * _marketplaceFee) / 10000;\r\n        listing.state = State.SOLD;\r\n        listing.buyer = buyer;\r\n        _listings[listingId] = listing;\r\n        IERC20 token = IERC20(listing.erc20Address);\r\n        if (listing.price + fee > token.allowance(buyer, address(this))) {\r\n            if (msg.value > 0) {\r\n                Address.sendValue(payable(msg.sender), msg.value);\r\n            }\r\n            revert(\r\n            \"Insufficient ERC20 allowance balance for paying for the asset.\"\r\n            );\r\n        }\r\n        token.transferFrom(buyer, _marketplaceFeeRecipient, fee);\r\n        token.transferFrom(buyer, listing.seller, listing.price);\r\n        if (listing.isErc721) {\r\n            IERC721(listing.nftAddress).safeTransferFrom(\r\n                listing.seller,\r\n                buyer,\r\n                listing.tokenId,\r\n                abi.encodePacked(\r\n                    \"CUSTOMTOKEN0x\",\r\n                    _toAsciiString(listing.erc20Address),\r\n                    \"'''###'''\",\r\n                    _uint2str(listing.price)\r\n                )\r\n            );\r\n        } else {\r\n            IERC1155(listing.nftAddress).safeTransferFrom(\r\n                listing.seller,\r\n                buyer,\r\n                listing.tokenId,\r\n                listing.amount,\r\n                \"\"\r\n            );\r\n        }\r\n        _toRemove(listingId);\r\n        emit ListingSold(buyer, listingId);\r\n    }\r\n\r\n    /**\r\n     * @dev Cancel listing - returns the NFT asset to the seller.\r\n     * @param listingId - id of the listing to cancel\r\n     */\r\n    function cancelListing(string memory listingId) public virtual {\r\n        Listing memory listing = _listings[listingId];\r\n        require(\r\n            listing.state == State.INITIATED,\r\n            \"Listing is not in INITIATED state. Aborting.\"\r\n        );\r\n        require(\r\n            listing.seller == msg.sender || msg.sender == owner(),\r\n            \"Listing can't be cancelled from other then seller or owner. Aborting.\"\r\n        );\r\n        listing.state = State.CANCELLED;\r\n        _listings[listingId] = listing;\r\n        if(listing.isErc721 && listing.erc20Address == address(0)){\r\n            uint256 cashbackSum = 0;\r\n            if (_isTatumNFT(listing.nftAddress, listing.tokenId, listing.price)) {\r\n                uint256[] memory cashback = Tatum(listing.nftAddress)\r\n                .tokenCashbackValues(listing.tokenId, listing.price);\r\n                for (uint256 j = 0; j < cashback.length; j++) {\r\n                    cashbackSum += cashback[j];\r\n                }\r\n            }\r\n            if (cashbackSum > 0) {\r\n                Address.sendValue(payable(listing.seller), cashbackSum);\r\n            }\r\n        }\r\n        _toRemove(listingId);\r\n        emit ListingCancelled(listingId);\r\n    }\r\n\r\n    function _isTatumNFT(address addr, uint256 p1, uint256 p2) internal returns (bool){\r\n        bool success;\r\n        bytes memory data = abi.encodeWithSelector(bytes4(keccak256(\"tokenCashbackValues(uint256,uint256)\")), p1, p2);\r\n\r\n        assembly {\r\n            success := call(\r\n            gas(), // gas remaining\r\n            addr, // destination address\r\n            0, // no ether\r\n            add(data, 32), // input buffer (starts after the first 32 bytes in the `data` array)\r\n            mload(data), // input length (loaded from the first 32 bytes in the `data` array)\r\n            0, // output buffer\r\n            0               // output length\r\n            )\r\n        }\r\n\r\n        return success;\r\n    }\r\n\r\n    function _isTatumNFT(address addr, uint256 p1) internal returns (bool){\r\n        bool success;\r\n        bytes memory data = abi.encodeWithSelector(bytes4(keccak256(\"getCashbackAddress(uint256)\")), p1);\r\n\r\n        assembly {\r\n            success := call(\r\n            gas(), // gas remaining\r\n            addr, // destination address\r\n            0, // no ether\r\n            add(data, 32), // input buffer (starts after the first 32 bytes in the `data` array)\r\n            mload(data), // input length (loaded from the first 32 bytes in the `data` array)\r\n            0, // output buffer\r\n            0               // output length\r\n            )\r\n        }\r\n\r\n        return success;\r\n    }\r\n}\r\n"
    },
    "contracts/tatum/custodial/CustodialWalletFactoryV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport \"../../access/Ownable.sol\";\r\nimport \"./CustodialWallet.sol\";\r\nimport \"../../proxy/Clones.sol\";\r\n\r\ncontract CustodialWalletFactoryV2 {\r\n\r\n    using Clones for CustodialWalletFactoryV2;\r\n\r\n    CustodialWallet private rawWallet;\r\n\r\n    mapping(bytes32 => address) public wallets;\r\n\r\n    event WalletDetails(address addr, address owner, uint256 index);\r\n    event Created(address addr);\r\n\r\n    constructor () {\r\n        rawWallet = new CustodialWallet();\r\n    }\r\n\r\n    function getWallet(address owner, uint256 index) public view returns (address addr, bool exists, bytes32 salt) {\r\n        salt = keccak256(abi.encodePacked(owner, index));\r\n        addr = Clones.predictDeterministicAddress(address(rawWallet), salt);\r\n        exists = wallets[salt] != address(0);\r\n    }\r\n\r\n    function getWallets(address owner, uint256[] memory index) public view returns (address[] memory addr, bool[] memory exists, bytes32[] memory salt) {\r\n        for (uint256 i = 0; i < index.length; i++) {\r\n            salt[i] = keccak256(abi.encodePacked(owner, index[i]));\r\n            addr[i] = Clones.predictDeterministicAddress(address(rawWallet), salt[i]);\r\n            exists[i] = wallets[salt[i]] != address(0);\r\n        }\r\n        return (addr, exists, salt);\r\n    }\r\n\r\n    function create(address owner, uint256[] memory index) public {\r\n        for (uint256 i = 0; i < index.length; i++) {\r\n            (address calculatedAddress, bool exists, bytes32 salt) = getWallet(owner, index[i]);\r\n            require(!exists, \"Wallet already exists\");\r\n            address addr = Clones.cloneDeterministic(address(rawWallet), salt);\r\n            require(addr == calculatedAddress, \"Address doesnt match with predicted address.\");\r\n\r\n            wallets[salt] = addr;\r\n            CustodialWallet(payable(addr)).init(owner);\r\n            emit Created(addr);\r\n            emit WalletDetails(addr, owner, index[i]);\r\n        }\r\n    }\r\n\r\n    function create(address owner, uint256 index) public {\r\n        (address calculatedAddress, bool exists, bytes32 salt) = getWallet(owner, index);\r\n        require(!exists, \"Wallet already exists\");\r\n        address addr = Clones.cloneDeterministic(address(rawWallet), salt);\r\n        require(addr == calculatedAddress, \"Address doesnt match with predicted address.\");\r\n\r\n        wallets[salt] = addr;\r\n        CustodialWallet(payable(addr)).init(owner);\r\n        emit Created(addr);\r\n        emit WalletDetails(addr, owner, index);\r\n    }\r\n}\r\n"
    },
    "contracts/tatum/custodial/CustodialWallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../../token/ERC20/IERC20.sol\";\r\nimport \"../../token/ERC1155/IERC1155.sol\";\r\nimport \"../../token/ERC721/IERC721.sol\";\r\nimport \"./CustodialOwnable.sol\";\r\nimport \"../../token/ERC20/utils/SafeERC20.sol\";\r\n\r\ncontract CustodialWallet is CustodialOwnable {\r\n\r\n    using SafeERC20 for IERC20;\r\n\r\n    event TransferNativeAsset(address indexed recipient, uint256 indexed amount);\r\n\r\n    function onERC721Received(address, address, uint256, bytes memory) public virtual returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n\r\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual returns (bytes4) {\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual returns (bytes4) {\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n    function init(address owner) public override {\r\n        CustodialOwnable.init(owner);\r\n    }\r\n\r\n    /**\r\n        Function transfer assets owned by this wallet to the recipient. Transfer only 1 type of asset.\r\n        @param tokenAddress - address of the asset to own, if transferring native asset, use 0x0000000 address\r\n        @param contractType - type of asset\r\n                                - 0 - ERC20\r\n                                - 1 - ERC721\r\n                                - 2 - ERC1155\r\n                                - 3 - native asset\r\n        @param recipient - recipient of the transaction\r\n        @param amount - amount to be transferred in the asset based of the contractType, for ERC721 not important\r\n        @param tokenId - tokenId to transfer, valid only for ERC721 and ERC1155\r\n    **/\r\n    function transfer(address tokenAddress, uint256 contractType, address recipient, uint256 amount, uint256 tokenId) public payable onlyOwner {\r\n        if (contractType == 0) {\r\n            IERC20(tokenAddress).safeTransfer(recipient, amount);\r\n        } else if (contractType == 1) {\r\n            IERC721(tokenAddress).safeTransferFrom(address(this), recipient, tokenId, \"\");\r\n        } else if (contractType == 2) {\r\n            IERC1155(tokenAddress).safeTransferFrom(address(this), recipient, tokenId, amount, \"\");\r\n        } else if (contractType == 3) {\r\n            payable(recipient).transfer(amount);\r\n            emit TransferNativeAsset(recipient, amount);\r\n        } else {\r\n            revert(\"Unsupported contract type\");\r\n        }\r\n    }\r\n\r\n    /**\r\n        Function transfer assets owned by this wallet to the recipient. Transfer any number of assets.\r\n        @param tokenAddress - address of the asset to own, if transferring native asset, use 0x0000000 address\r\n        @param contractType - type of asset\r\n                                - 0 - ERC20\r\n                                - 1 - ERC721\r\n                                - 2 - ERC1155\r\n                                - 3 - native asset\r\n        @param recipient - recipient of the transaction\r\n        @param amount - amount to be transferred in the asset based of the contractType, for ERC721 not important\r\n        @param tokenId - tokenId to transfer, valid only for ERC721 and ERC1155\r\n    **/\r\n    function transferBatch(address[] memory tokenAddress, uint256[] memory contractType, address[] memory recipient, uint256[] memory amount, uint256[] memory tokenId) public payable onlyOwner {\r\n        require(tokenAddress.length == contractType.length);\r\n        require(recipient.length == contractType.length);\r\n        require(recipient.length == amount.length);\r\n        require(amount.length == tokenId.length);\r\n        for (uint256 i = 0; i < tokenAddress.length; i++) {\r\n            if (contractType[i] == 0) {\r\n                IERC20(tokenAddress[i]).safeTransfer(recipient[i], amount[i]);\r\n            } else if (contractType[i] == 1) {\r\n                IERC721(tokenAddress[i]).safeTransferFrom(address(this), recipient[i], tokenId[i], \"\");\r\n            } else if (contractType[i] == 2) {\r\n                IERC1155(tokenAddress[i]).safeTransferFrom(address(this), recipient[i], tokenId[i], amount[i], \"\");\r\n            } else if (contractType[i] == 3) {\r\n                payable(recipient[i]).transfer(amount[i]);\r\n                emit TransferNativeAsset(recipient[i], amount[i]);\r\n            } else {\r\n                revert(\"Unsupported contract type\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n        Function approves the transfer of assets owned by this wallet to the spender. Approve only 1 type of asset.\r\n        @param tokenAddress - address of the asset to approve\r\n        @param contractType - type of asset\r\n                                - 0 - ERC20\r\n                                - 1 - ERC721\r\n                                - 2 - ERC1155\r\n        @param spender - who will be able to spend the assets on behalf of the user\r\n        @param amount - amount to be approved to spend in the asset based of the contractType\r\n        @param tokenId - tokenId to transfer, valid only for ERC721 and ERC1155\r\n    **/\r\n    function approve(address tokenAddress, uint256 contractType, address spender, uint256 amount, uint256 tokenId) public virtual onlyOwner {\r\n        if (contractType == 0) {\r\n            IERC20(tokenAddress).approve(spender, amount);\r\n        } else if (contractType == 1) {\r\n            IERC721(tokenAddress).approve(spender, tokenId);\r\n        } else if (contractType == 2) {\r\n            IERC1155(tokenAddress).setApprovalForAll(spender, true);\r\n        } else {\r\n            revert(\"Unsupported contract type\");\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\r\n * deploying minimal proxy contracts, also known as \"clones\".\r\n *\r\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\r\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\r\n *\r\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\r\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\r\n * deterministic method.\r\n *\r\n * _Available since v3.4._\r\n */\r\nlibrary Clones {\r\n    /**\r\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\r\n     *\r\n     * This function uses the create opcode, which should never revert.\r\n     */\r\n    function clone(address implementation) internal returns (address instance) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            instance := create(0, ptr, 0x37)\r\n        }\r\n        require(instance != address(0), \"ERC1167: create failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\r\n     *\r\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\r\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\r\n     * the clones cannot be deployed twice at the same address.\r\n     */\r\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            instance := create2(0, ptr, 0x37, salt)\r\n        }\r\n        require(instance != address(0), \"ERC1167: create2 failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\r\n     */\r\n    function predictDeterministicAddress(address implementation, bytes32 salt, address deployer) internal pure returns (address predicted) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\r\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\r\n            mstore(add(ptr, 0x4c), salt)\r\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\r\n            predicted := keccak256(add(ptr, 0x37), 0x55)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\r\n     */\r\n    function predictDeterministicAddress(address implementation, bytes32 salt) internal view returns (address predicted) {\r\n        return predictDeterministicAddress(implementation, salt, address(this));\r\n    }\r\n}\r\n"
    },
    "contracts/tatum/custodial/CustodialOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../../utils/Context.sol\";\r\nimport \"../../utils/Initializable.sol\";\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract CustodialOwnable is Context, Initializable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function init(address addr) public virtual initializer  {\r\n        _owner = addr;\r\n        emit OwnershipTransferred(address(0), addr);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n"
    },
    "contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../IERC20.sol\";\r\nimport \"../../../utils/Address.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\n// solhint-disable-next-line compiler-version\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Address.sol\";\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/ClonesMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../proxy/Clones.sol\";\r\nimport \"../utils/Address.sol\";\r\n\r\ncontract ClonesMock {\r\n    using Address for address;\r\n    using Clones for address;\r\n\r\n    event NewInstance(address instance);\r\n\r\n    function clone(address implementation, bytes calldata initdata) public payable {\r\n        _initAndEmit(implementation.clone(), initdata);\r\n    }\r\n\r\n    function cloneDeterministic(address implementation, bytes32 salt, bytes calldata initdata) public payable {\r\n        _initAndEmit(implementation.cloneDeterministic(salt), initdata);\r\n    }\r\n\r\n    function predictDeterministicAddress(address implementation, bytes32 salt) public view returns (address predicted) {\r\n        return implementation.predictDeterministicAddress(salt);\r\n    }\r\n\r\n    function _initAndEmit(address instance, bytes memory initdata) private {\r\n        if (initdata.length > 0) {\r\n            instance.functionCallWithValue(initdata, msg.value);\r\n        }\r\n        emit NewInstance(instance);\r\n    }\r\n}\r\n"
    },
    "contracts/tatum/custodial/CustodialWalletFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./CustodialWallet.sol\";\r\n\r\ncontract CustodialWalletFactory {\r\n\r\n    CustodialWallet private initialWallet;\r\n\r\n    event Created(address addr);\r\n\r\n    constructor () {\r\n        initialWallet = new CustodialWallet();\r\n    }\r\n\r\n    function cloneNewWallet(address owner, uint256 count) public {\r\n        for (uint256 i = 0; i < count; i++) {\r\n            address payable clone = createClone(address(initialWallet));\r\n            CustodialWallet(clone).init(owner);\r\n            emit Created(clone);\r\n        }\r\n    }\r\n\r\n    function createClone(address target) internal returns (address payable result) {\r\n        bytes20 targetBytes = bytes20(target);\r\n        assembly {\r\n            let clone := mload(0x40)\r\n            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(clone, 0x14), targetBytes)\r\n            mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            result := create(0, clone, 0x37)\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/token/ERC20/utils/TokenTimelock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./SafeERC20.sol\";\r\n\r\n/**\r\n * @dev A token holder contract that will allow a beneficiary to extract the\r\n * tokens after a given release time.\r\n *\r\n * Useful for simple vesting schedules like \"advisors get all of their tokens\r\n * after 1 year\".\r\n */\r\ncontract TokenTimelock {\r\n    using SafeERC20 for IERC20;\r\n\r\n    // ERC20 basic token contract being held\r\n    IERC20 immutable private _token;\r\n\r\n    // beneficiary of tokens after they are released\r\n    address immutable private _beneficiary;\r\n\r\n    // timestamp when token release is enabled\r\n    uint256 immutable private _releaseTime;\r\n\r\n    constructor (IERC20 token_, address beneficiary_, uint256 releaseTime_) {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(releaseTime_ > block.timestamp, \"TokenTimelock: release time is before current time\");\r\n        _token = token_;\r\n        _beneficiary = beneficiary_;\r\n        _releaseTime = releaseTime_;\r\n    }\r\n\r\n    /**\r\n     * @return the token being held.\r\n     */\r\n    function token() public view virtual returns (IERC20) {\r\n        return _token;\r\n    }\r\n\r\n    /**\r\n     * @return the beneficiary of the tokens.\r\n     */\r\n    function beneficiary() public view virtual returns (address) {\r\n        return _beneficiary;\r\n    }\r\n\r\n    /**\r\n     * @return the time when the tokens are released.\r\n     */\r\n    function releaseTime() public view virtual returns (uint256) {\r\n        return _releaseTime;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers tokens held by timelock to beneficiary.\r\n     */\r\n    function release() public virtual {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(block.timestamp >= releaseTime(), \"TokenTimelock: current time is before release time\");\r\n\r\n        uint256 amount = token().balanceOf(address(this));\r\n        require(amount > 0, \"TokenTimelock: no tokens to release\");\r\n\r\n        token().safeTransfer(beneficiary(), amount);\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/SafeERC20Helper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/Context.sol\";\r\nimport \"../token/ERC20/IERC20.sol\";\r\nimport \"../token/ERC20/utils/SafeERC20.sol\";\r\n\r\ncontract ERC20ReturnFalseMock is Context {\r\n    uint256 private _allowance;\r\n\r\n    // IERC20's functions are not pure, but these mock implementations are: to prevent Solidity from issuing warnings,\r\n    // we write to a dummy state variable.\r\n    uint256 private _dummy;\r\n\r\n    function transfer(address, uint256) public returns (bool) {\r\n        _dummy = 0;\r\n        return false;\r\n    }\r\n\r\n    function transferFrom(address, address, uint256) public returns (bool) {\r\n        _dummy = 0;\r\n        return false;\r\n    }\r\n\r\n    function approve(address, uint256) public returns (bool) {\r\n        _dummy = 0;\r\n        return false;\r\n    }\r\n\r\n    function allowance(address, address) public view returns (uint256) {\r\n        require(_dummy == 0); // Duummy read from a state variable so that the function is view\r\n        return 0;\r\n    }\r\n}\r\n\r\ncontract ERC20ReturnTrueMock is Context {\r\n    mapping (address => uint256) private _allowances;\r\n\r\n    // IERC20's functions are not pure, but these mock implementations are: to prevent Solidity from issuing warnings,\r\n    // we write to a dummy state variable.\r\n    uint256 private _dummy;\r\n\r\n    function transfer(address, uint256) public returns (bool) {\r\n        _dummy = 0;\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address, address, uint256) public returns (bool) {\r\n        _dummy = 0;\r\n        return true;\r\n    }\r\n\r\n    function approve(address, uint256) public returns (bool) {\r\n        _dummy = 0;\r\n        return true;\r\n    }\r\n\r\n    function setAllowance(uint256 allowance_) public {\r\n        _allowances[_msgSender()] = allowance_;\r\n    }\r\n\r\n    function allowance(address owner, address) public view returns (uint256) {\r\n        return _allowances[owner];\r\n    }\r\n}\r\n\r\ncontract ERC20NoReturnMock is Context {\r\n    mapping (address => uint256) private _allowances;\r\n\r\n    // IERC20's functions are not pure, but these mock implementations are: to prevent Solidity from issuing warnings,\r\n    // we write to a dummy state variable.\r\n    uint256 private _dummy;\r\n\r\n    function transfer(address, uint256) public {\r\n        _dummy = 0;\r\n    }\r\n\r\n    function transferFrom(address, address, uint256) public {\r\n        _dummy = 0;\r\n    }\r\n\r\n    function approve(address, uint256) public {\r\n        _dummy = 0;\r\n    }\r\n\r\n    function setAllowance(uint256 allowance_) public {\r\n        _allowances[_msgSender()] = allowance_;\r\n    }\r\n\r\n    function allowance(address owner, address) public view returns (uint256) {\r\n        return _allowances[owner];\r\n    }\r\n}\r\n\r\ncontract SafeERC20Wrapper is Context {\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 private _token;\r\n\r\n    constructor (IERC20 token) {\r\n        _token = token;\r\n    }\r\n\r\n    function transfer() public {\r\n        _token.safeTransfer(address(0), 0);\r\n    }\r\n\r\n    function transferFrom() public {\r\n        _token.safeTransferFrom(address(0), address(0), 0);\r\n    }\r\n\r\n    function approve(uint256 amount) public {\r\n        _token.safeApprove(address(0), amount);\r\n    }\r\n\r\n    function increaseAllowance(uint256 amount) public {\r\n        _token.safeIncreaseAllowance(address(0), amount);\r\n    }\r\n\r\n    function decreaseAllowance(uint256 amount) public {\r\n        _token.safeDecreaseAllowance(address(0), amount);\r\n    }\r\n\r\n    function setAllowance(uint256 allowance_) public {\r\n        ERC20ReturnTrueMock(address(_token)).setAllowance(allowance_);\r\n    }\r\n\r\n    function allowance() public view returns (uint256) {\r\n        return _token.allowance(address(0), address(0));\r\n    }\r\n}\r\n"
    },
    "contracts/tatum/custodial/TronCustodialWallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../../token/ERC20/IERC20.sol\";\r\nimport \"./CustodialOwnable.sol\";\r\n\r\ninterface TRC721 {\r\n    // Returns the number of NFTs owned by the given account\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n\r\n    //Returns the owner of the given NFT\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n\r\n    //Transfer ownership of NFT\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes memory data) external payable;\r\n\r\n    //Transfer ownership of NFT\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n\r\n    //Transfer ownership of NFT\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n\r\n    //Grants address ‘_approved’ the authorization of the NFT ‘_tokenId’\r\n    function approve(address _approved, uint256 _tokenId) external payable;\r\n\r\n    //Grant/recover all NFTs’ authorization of the ‘_operator’\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n\r\n    //Query the authorized address of NFT\r\n    function getApproved(uint256 _tokenId) external view returns (address);\r\n\r\n    //Query whether the ‘_operator’ is the authorized address of the ‘_owner’\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n\r\n    //The successful ‘transferFrom’ and ‘safeTransferFrom’ will trigger the ‘Transfer’ Event\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n\r\n    //The successful ‘Approval’ will trigger the ‘Approval’ event\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n\r\n    //The successful ‘setApprovalForAll’ will trigger the ‘ApprovalForAll’ event\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n}\r\n\r\ncontract TronCustodialWallet is CustodialOwnable {\r\n\r\n    event TransferNativeAsset(address indexed recipient, uint256 indexed amount);\r\n    \r\n    function onTRC721Received(address, address, uint256, bytes memory) public virtual returns (bytes4) {\r\n        return this.onTRC721Received.selector;\r\n    }\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n    function init(address owner) public override {\r\n        CustodialOwnable.init(owner);\r\n    }\r\n\r\n    /**\r\n        Function transfer assets owned by this wallet to the recipient. Transfer only 1 type of asset.\r\n        @param tokenAddress - address of the asset to own, if transferring native asset, use 0x0000000 address\r\n        @param contractType - type of asset\r\n                                - 0 - ERC20\r\n                                - 1 - ERC721\r\n                                - 3 - native asset\r\n        @param recipient - recipient of the transaction\r\n        @param amount - amount to be transferred in the asset based of the contractType, for ERC721 not important\r\n        @param tokenId - tokenId to transfer, valid only for ERC721 and ERC1155\r\n    **/\r\n    function transfer(address tokenAddress, uint256 contractType, address recipient, uint256 amount, uint256 tokenId) public payable onlyOwner {\r\n        if (contractType == 0) {\r\n            IERC20(tokenAddress).transfer(recipient, amount);\r\n        } else if (contractType == 1) {\r\n            TRC721(tokenAddress).safeTransferFrom(address(this), recipient, tokenId, \"\");\r\n        } else if (contractType == 3) {\r\n            emit TransferNativeAsset(recipient, amount);\r\n            payable(recipient).transfer(amount);\r\n        } else {\r\n            revert(\"Unsupported contract type\");\r\n        }\r\n    }\r\n\r\n    /**\r\n        Function transfer assets owned by this wallet to the recipient. Transfer any number of assets.\r\n        @param tokenAddress - address of the asset to own, if transferring native asset, use 0x0000000 address\r\n        @param contractType - type of asset\r\n                                - 0 - ERC20\r\n                                - 1 - ERC721\r\n                                - 3 - native asset\r\n        @param recipient - recipient of the transaction\r\n        @param amount - amount to be transferred in the asset based of the contractType, for ERC721 not important\r\n        @param tokenId - tokenId to transfer, valid only for ERC721 and ERC1155\r\n    **/\r\n    function transferBatch(address[] memory tokenAddress, uint256[] memory contractType, address[] memory recipient, uint256[] memory amount, uint256[] memory tokenId) public payable onlyOwner {\r\n        require(tokenAddress.length == contractType.length);\r\n        require(recipient.length == contractType.length);\r\n        require(recipient.length == amount.length);\r\n        require(amount.length == tokenId.length);\r\n        for (uint256 i = 0; i < tokenAddress.length; i++) {\r\n            if (contractType[i] == 0) {\r\n                IERC20(tokenAddress[i]).transfer(recipient[i], amount[i]);\r\n            } else if (contractType[i] == 1) {\r\n                TRC721(tokenAddress[i]).safeTransferFrom(address(this), recipient[i], tokenId[i], \"\");\r\n            } else if (contractType[i] == 3) {\r\n                payable(recipient[i]).transfer(amount[i]);\r\n                emit TransferNativeAsset(recipient[i], amount[i]);\r\n            } else {\r\n                revert(\"Unsupported contract type\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n       Function approves the transfer of assets owned by this wallet to the spender. Approve only 1 type of asset.\r\n        @param tokenAddress - address of the asset to approve\r\n        @param contractType - type of asset\r\n                                - 0 - ERC20\r\n                                - 1 - ERC721\r\n        @param spender - who will be able to spend the assets on behalf of the user\r\n        @param amount - amount to be approved to spend in the asset based of the contractType\r\n        @param tokenId - tokenId to transfer, valid only for ERC721 \r\n    **/\r\n    function approve(address tokenAddress, uint256 contractType, address spender, uint256 amount, uint256 tokenId) public virtual onlyOwner {\r\n        if (contractType == 0) {\r\n            IERC20(tokenAddress).approve(spender, amount);\r\n        } else if (contractType == 1) {\r\n            TRC721(tokenAddress).approve(spender, tokenId);\r\n        } else {\r\n            revert(\"Unsupported contract type\");\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/tatum/custodial/TronCustodialWalletFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./TronCustodialWallet.sol\";\r\n\r\ncontract TronTronCustodialWalletFactory {\r\n\r\n    TronCustodialWallet private initialWallet;\r\n\r\n    event Created(address addr);\r\n\r\n    constructor () {\r\n        initialWallet = new TronCustodialWallet();\r\n    }\r\n\r\n    function cloneNewWallet(address owner, uint256 count) public {\r\n        for (uint256 i = 0; i < count; i++) {\r\n            address payable clone = createClone(address(initialWallet));\r\n            TronCustodialWallet(clone).init(owner);\r\n            emit Created(clone);\r\n        }\r\n    }\r\n\r\n    function createClone(address target) internal returns (address payable result) {\r\n        bytes20 targetBytes = bytes20(target);\r\n        assembly {\r\n            let clone := mload(0x40)\r\n            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(clone, 0x14), targetBytes)\r\n            mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            result := create(0, clone, 0x37)\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/SingleInheritanceInitializableMocks.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/Initializable.sol\";\r\n\r\n/**\r\n * @title MigratableMockV1\r\n * @dev This contract is a mock to test initializable functionality through migrations\r\n */\r\ncontract MigratableMockV1 is Initializable {\r\n  uint256 public x;\r\n\r\n  function initialize(uint256 value) public payable initializer {\r\n    x = value;\r\n  }\r\n}\r\n\r\n/**\r\n * @title MigratableMockV2\r\n * @dev This contract is a mock to test migratable functionality with params\r\n */\r\ncontract MigratableMockV2 is MigratableMockV1 {\r\n  bool internal _migratedV2;\r\n  uint256 public y;\r\n\r\n  function migrate(uint256 value, uint256 anotherValue) public payable {\r\n    require(!_migratedV2);\r\n    x = value;\r\n    y = anotherValue;\r\n    _migratedV2 = true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title MigratableMockV3\r\n * @dev This contract is a mock to test migratable functionality without params\r\n */\r\ncontract MigratableMockV3 is MigratableMockV2 {\r\n  bool internal _migratedV3;\r\n\r\n  function migrate() public payable {\r\n    require(!_migratedV3);\r\n    uint256 oldX = x;\r\n    x = y;\r\n    y = oldX;\r\n    _migratedV3 = true;\r\n  }\r\n}\r\n"
    },
    "contracts/mocks/RegressionImplementation.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/Initializable.sol\";\r\n\r\ncontract Implementation1 is Initializable {\r\n  uint internal _value;\r\n\r\n  function initialize() public initializer {\r\n  }\r\n\r\n  function setValue(uint _number) public {\r\n    _value = _number;\r\n  }\r\n}\r\n\r\ncontract Implementation2 is Initializable {\r\n  uint internal _value;\r\n\r\n  function initialize() public initializer {\r\n  }\r\n\r\n  function setValue(uint _number) public {\r\n    _value = _number;\r\n  }\r\n\r\n  function getValue() public view returns (uint) {\r\n    return _value;\r\n  }\r\n}\r\n\r\ncontract Implementation3 is Initializable {\r\n  uint internal _value;\r\n\r\n  function initialize() public initializer {\r\n  }\r\n\r\n  function setValue(uint _number) public {\r\n    _value = _number;\r\n  }\r\n\r\n  function getValue(uint _number) public view returns (uint) {\r\n    return _value + _number;\r\n  }\r\n}\r\n\r\ncontract Implementation4 is Initializable {\r\n  uint internal _value;\r\n\r\n  function initialize() public initializer {\r\n  }\r\n\r\n  function setValue(uint _number) public {\r\n    _value = _number;\r\n  }\r\n\r\n  function getValue() public view returns (uint) {\r\n    return _value;\r\n  }\r\n\r\n  // solhint-disable-next-line payable-fallback\r\n  fallback() external {\r\n    _value = 1;\r\n  }\r\n}\r\n"
    },
    "contracts/mocks/MultipleInheritanceInitializableMocks.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/Initializable.sol\";\r\n\r\n// Sample contracts showing upgradeability with multiple inheritance.\r\n// Child contract inherits from Father and Mother contracts, and Father extends from Gramps.\r\n//\r\n//         Human\r\n//       /       \\\r\n//      |       Gramps\r\n//      |         |\r\n//    Mother    Father\r\n//      |         |\r\n//      -- Child --\r\n\r\n/**\r\n * Sample base intializable contract that is a human\r\n */\r\ncontract SampleHuman is Initializable {\r\n  bool public isHuman;\r\n\r\n  function initialize() public initializer {\r\n    isHuman = true;\r\n  }\r\n}\r\n\r\n/**\r\n * Sample base intializable contract that defines a field mother\r\n */\r\ncontract SampleMother is Initializable, SampleHuman {\r\n  uint256 public mother;\r\n\r\n  function initialize(uint256 value) public initializer virtual {\r\n    SampleHuman.initialize();\r\n    mother = value;\r\n  }\r\n}\r\n\r\n/**\r\n * Sample base intializable contract that defines a field gramps\r\n */\r\ncontract SampleGramps is Initializable, SampleHuman {\r\n  string public gramps;\r\n\r\n  function initialize(string memory value) public initializer virtual {\r\n    SampleHuman.initialize();\r\n    gramps = value;\r\n  }\r\n}\r\n\r\n/**\r\n * Sample base intializable contract that defines a field father and extends from gramps\r\n */\r\ncontract SampleFather is Initializable, SampleGramps {\r\n  uint256 public father;\r\n\r\n  function initialize(string memory _gramps, uint256 _father) public initializer {\r\n    SampleGramps.initialize(_gramps);\r\n    father = _father;\r\n  }\r\n}\r\n\r\n/**\r\n * Child extends from mother, father (gramps)\r\n */\r\ncontract SampleChild is Initializable, SampleMother, SampleFather {\r\n  uint256 public child;\r\n\r\n  function initialize(uint256 _mother, string memory _gramps, uint256 _father, uint256 _child) public initializer {\r\n    SampleMother.initialize(_mother);\r\n    SampleFather.initialize(_gramps, _father);\r\n    child = _child;\r\n  }\r\n}\r\n"
    },
    "contracts/mocks/InitializableMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/Initializable.sol\";\r\n\r\n/**\r\n * @title InitializableMock\r\n * @dev This contract is a mock to test initializable functionality\r\n */\r\ncontract InitializableMock is Initializable {\r\n\r\n  bool public initializerRan;\r\n  uint256 public x;\r\n\r\n  function initialize() public initializer {\r\n    initializerRan = true;\r\n  }\r\n\r\n  function initializeNested() public initializer {\r\n    initialize();\r\n  }\r\n\r\n  function initializeWithX(uint256 _x) public payable initializer {\r\n    x = _x;\r\n  }\r\n\r\n  function nonInitializable(uint256 _x) public payable {\r\n    x = _x;\r\n  }\r\n\r\n  function fail() public pure {\r\n    require(false, \"InitializableMock forced failure\");\r\n  }\r\n\r\n}\r\n"
    },
    "contracts/tatum/custodial/CustodialFullTokenWalletWithBatch.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../../access/Ownable.sol\";\r\nimport \"../../token/ERC20/IERC20.sol\";\r\nimport \"../../token/ERC1155/IERC1155.sol\";\r\nimport \"../../token/ERC721/IERC721.sol\";\r\n\r\ncontract CustodialFullTokenWalletWithBatch is Ownable {\r\n\r\n    function onERC721Received(address, address, uint256, bytes memory) public virtual returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n\r\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual returns (bytes4) {\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual returns (bytes4) {\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n    /**\r\n        Function transfer assets owned by this wallet to the recipient. Transfer only 1 type of asset.\r\n        @param tokenAddress - address of the asset to own, if transferring native asset, use 0x0000000 address\r\n        @param contractType - type of asset\r\n                                - 0 - ERC20\r\n                                - 1 - ERC721\r\n                                - 2 - ERC1155\r\n                                - 3 - native asset\r\n        @param recipient - recipient of the transaction\r\n        @param amount - amount to be transferred in the asset based of the contractType, for ERC721 not important\r\n        @param tokenId - tokenId to transfer, valid only for ERC721 and ERC1155\r\n    **/\r\n    function transfer(address tokenAddress, uint256 contractType, address recipient, uint256 amount, uint256 tokenId) public payable {\r\n        if (contractType == 0) {\r\n            IERC20(tokenAddress).transfer(recipient, amount);\r\n        } else if (contractType == 1) {\r\n            IERC721(tokenAddress).safeTransferFrom(address(this), recipient, tokenId, \"\");\r\n        } else if (contractType == 2) {\r\n            IERC1155(tokenAddress).safeTransferFrom(address(this), recipient, tokenId, amount, \"\");\r\n        } else if (contractType == 3) {\r\n            payable(recipient).transfer(amount);\r\n        } else {\r\n            revert(\"Unsupported contract type\");\r\n        }\r\n    }\r\n\r\n    /**\r\n        Function transfer assets owned by this wallet to the recipient. Transfer any number of assets.\r\n        @param tokenAddress - address of the asset to own, if transferring native asset, use 0x0000000 address\r\n        @param contractType - type of asset\r\n                                - 0 - ERC20\r\n                                - 1 - ERC721\r\n                                - 2 - ERC1155\r\n                                - 3 - native asset\r\n        @param recipient - recipient of the transaction\r\n        @param amount - amount to be transferred in the asset based of the contractType, for ERC721 not important\r\n        @param tokenId - tokenId to transfer, valid only for ERC721 and ERC1155\r\n    **/\r\n    function transferBatch(address[] memory tokenAddress, uint256[] memory contractType, address[] memory recipient, uint256[] memory amount, uint256[] memory tokenId) public payable {\r\n        require(tokenAddress.length == contractType.length);\r\n        require(recipient.length == contractType.length);\r\n        require(recipient.length == amount.length);\r\n        require(amount.length == tokenId.length);\r\n        for (uint256 i = 0; i < tokenAddress.length; i++) {\r\n            if (contractType[i] == 0) {\r\n                IERC20(tokenAddress[i]).transfer(recipient[i], amount[i]);\r\n            } else if (contractType[i] == 1) {\r\n                IERC721(tokenAddress[i]).safeTransferFrom(address(this), recipient[i], tokenId[i], \"\");\r\n            } else if (contractType[i] == 2) {\r\n                IERC1155(tokenAddress[i]).safeTransferFrom(address(this), recipient[i], tokenId[i], amount[i], \"\");\r\n            } else if (contractType[i] == 3) {\r\n                payable(recipient[i]).transfer(amount[i]);\r\n            } else {\r\n                revert(\"Unsupported contract type\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n        Function approves the transfer of assets owned by this wallet to the spender. Approve only 1 type of asset.\r\n        @param tokenAddress - address of the asset to approve\r\n        @param contractType - type of asset\r\n                                - 0 - ERC20\r\n                                - 1 - ERC721\r\n                                - 2 - ERC1155\r\n        @param spender - who will be able to spend the assets on behalf of the user\r\n        @param amount - amount to be approved to spend in the asset based of the contractType\r\n        @param tokenId - tokenId to transfer, valid only for ERC721 and ERC1155\r\n    **/\r\n    function approve(address tokenAddress, uint256 contractType, address spender, uint256 amount, uint256 tokenId) public virtual {\r\n        if (contractType == 0) {\r\n            IERC20(tokenAddress).approve(spender, amount);\r\n        } else if (contractType == 1) {\r\n            IERC721(tokenAddress).approve(spender, tokenId);\r\n        } else if (contractType == 2) {\r\n            IERC1155(tokenAddress).setApprovalForAll(spender, true);\r\n        } else {\r\n            revert(\"Unsupported contract type\");\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/tatum/custodial/CustodialFullTokenWallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../../access/Ownable.sol\";\r\nimport \"../../token/ERC20/IERC20.sol\";\r\nimport \"../../token/ERC1155/IERC1155.sol\";\r\nimport \"../../token/ERC721/IERC721.sol\";\r\n\r\ncontract CustodialFullTokenWallet is Ownable {\r\n\r\n    function onERC721Received(address, address, uint256, bytes memory) public virtual returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n\r\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual returns (bytes4) {\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual returns (bytes4) {\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n    /**\r\n        Function transfer assets owned by this wallet to the recipient. Transfer only 1 type of asset.\r\n        @param tokenAddress - address of the asset to own, if transferring native asset, use 0x0000000 address\r\n        @param contractType - type of asset\r\n                                - 0 - ERC20\r\n                                - 1 - ERC721\r\n                                - 2 - ERC1155\r\n                                - 3 - native asset\r\n        @param recipient - recipient of the transaction\r\n        @param amount - amount to be transferred in the asset based of the contractType, for ERC721 not important\r\n        @param tokenId - tokenId to transfer, valid only for ERC721 and ERC1155\r\n    **/\r\n    function transfer(address tokenAddress, uint256 contractType, address recipient, uint256 amount, uint256 tokenId) public payable {\r\n        if (contractType == 0) {\r\n            IERC20(tokenAddress).transfer(recipient, amount);\r\n        } else if (contractType == 1) {\r\n            IERC721(tokenAddress).safeTransferFrom(address(this), recipient, tokenId, \"\");\r\n        } else if (contractType == 2) {\r\n            IERC1155(tokenAddress).safeTransferFrom(address(this), recipient, tokenId, amount, \"\");\r\n        } else if (contractType == 3) {\r\n            payable(recipient).transfer(amount);\r\n        } else {\r\n            revert(\"Unsupported contract type\");\r\n        }\r\n    }\r\n\r\n    /**\r\n        Function approves the transfer of assets owned by this wallet to the spender. Approve only 1 type of asset.\r\n        @param tokenAddress - address of the asset to approve\r\n        @param contractType - type of asset\r\n                                - 0 - ERC20\r\n                                - 1 - ERC721\r\n                                - 2 - ERC1155\r\n        @param spender - who will be able to spend the assets on behalf of the user\r\n        @param amount - amount to be approved to spend in the asset based of the contractType\r\n        @param tokenId - tokenId to transfer, valid only for ERC721 and ERC1155\r\n    **/\r\n    function approve(address tokenAddress, uint256 contractType, address spender, uint256 amount, uint256 tokenId) public virtual {\r\n        if (contractType == 0) {\r\n            IERC20(tokenAddress).approve(spender, amount);\r\n        } else if (contractType == 1) {\r\n            IERC721(tokenAddress).approve(spender, tokenId);\r\n        } else if (contractType == 2) {\r\n            IERC1155(tokenAddress).setApprovalForAll(spender, true);\r\n        } else {\r\n            revert(\"Unsupported contract type\");\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/tatum/custodial/Custodial_721_TokenWalletWithBatch.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../../access/Ownable.sol\";\r\nimport \"../../token/ERC721/IERC721.sol\";\r\n\r\ncontract Custodial_721_TokenWalletWithBatch is Ownable {\r\n\r\n    function onERC721Received(address, address, uint256, bytes memory) public virtual returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n    /**\r\n        Function transfer assets owned by this wallet to the recipient. Transfer only 1 type of asset.\r\n        @param tokenAddress - address of the asset to own, if transferring native asset, use 0x0000000 address\r\n        @param contractType - type of asset\r\n                                - 1 - ERC721\r\n                                - 3 - native asset\r\n        @param recipient - recipient of the transaction\r\n        @param amount - amount to be transferred in the asset based of the contractType, for ERC721 not important\r\n        @param tokenId - tokenId to transfer, valid only for ERC721\r\n    **/\r\n    function transfer(address tokenAddress, uint256 contractType, address recipient, uint256 amount, uint256 tokenId) public payable {\r\n        if (contractType == 1) {\r\n            IERC721(tokenAddress).safeTransferFrom(address(this), recipient, tokenId, \"\");\r\n        } else if (contractType == 3) {\r\n            payable(recipient).transfer(amount);\r\n        } else {\r\n            revert(\"Unsupported contract type\");\r\n        }\r\n    }\r\n\r\n    /**\r\n        Function transfer assets owned by this wallet to the recipient. Transfer any number of assets.\r\n        @param tokenAddress - address of the asset to own, if transferring native asset, use 0x0000000 address\r\n        @param contractType - type of asset\r\n                                - 1 - ERC721\r\n                                - 23- native asset\r\n        @param recipient - recipient of the transaction\r\n        @param amount - amount to be transferred in the asset based of the contractType, for ERC721 not important\r\n        @param tokenId - tokenId to transfer, valid only for ERC721\r\n    **/\r\n    function transferBatch(address[] memory tokenAddress, uint256[] memory contractType, address[] memory recipient, uint256[] memory amount, uint256[] memory tokenId) public payable {\r\n        require(tokenAddress.length == contractType.length);\r\n        require(recipient.length == contractType.length);\r\n        require(recipient.length == amount.length);\r\n        require(tokenId.length == amount.length);\r\n        for (uint256 i = 0; i < tokenAddress.length; i++) {\r\n            if (contractType[i] == 1) {\r\n                IERC721(tokenAddress[i]).safeTransferFrom(address(this), recipient[i], tokenId[i], \"\");\r\n            } else if (contractType[i] == 3) {\r\n                payable(recipient[i]).transfer(amount[i]);\r\n            } else {\r\n                revert(\"Unsupported contract type\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n        Function approves the transfer of assets owned by this wallet to the spender. Approve only 1 type of asset.\r\n        @param tokenAddress - address of the asset to approve\r\n        @param contractType - type of asset\r\n                                - 1 - ERC721\r\n        @param spender - who will be able to spend the assets on behalf of the user\r\n        @param tokenId - tokenId to transfer, valid only for ERC721\r\n    **/\r\n    function approve(address tokenAddress, uint256 contractType, address spender, uint256, uint256 tokenId) public virtual {\r\n        if (contractType == 1) {\r\n            IERC721(tokenAddress).approve(spender, tokenId);\r\n        } else {\r\n            revert(\"Unsupported contract type\");\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/tatum/custodial/Custodial_721_TokenWallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../../access/Ownable.sol\";\r\nimport \"../../token/ERC20/IERC20.sol\";\r\nimport \"../../token/ERC721/IERC721.sol\";\r\n\r\ncontract Custodial_721_TokenWallet is Ownable {\r\n\r\n    function onERC721Received(address, address, uint256, bytes memory) public virtual returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n    /**\r\n        Function transfer assets owned by this wallet to the recipient. Transfer only 1 type of asset.\r\n        @param tokenAddress - address of the asset to own, if transferring native asset, use 0x0000000 address\r\n        @param contractType - type of asset\r\n                                - 1 - ERC721\r\n                                - 3 - native asset\r\n        @param recipient - recipient of the transaction\r\n        @param amount - amount to be transferred in the asset based of the contractType, for ERC721 not important\r\n        @param tokenId - tokenId to transfer, valid only for ERC721\r\n    **/\r\n    function transfer(address tokenAddress, uint256 contractType, address recipient, uint256 amount, uint256 tokenId) public payable {\r\n        if (contractType == 1) {\r\n            IERC721(tokenAddress).safeTransferFrom(address(this), recipient, tokenId, \"\");\r\n        } else if (contractType == 3) {\r\n            payable(recipient).transfer(amount);\r\n        } else {\r\n            revert(\"Unsupported contract type\");\r\n        }\r\n    }\r\n\r\n    /**\r\n        Function approves the transfer of assets owned by this wallet to the spender. Approve only 1 type of asset.\r\n        @param tokenAddress - address of the asset to approve\r\n        @param contractType - type of asset\r\n                                - 1 - ERC721\r\n        @param spender - who will be able to spend the assets on behalf of the user\r\n        @param tokenId - tokenId to transfer, valid only for ERC721\r\n    **/\r\n    function approve(address tokenAddress, uint256 contractType, address spender, uint256, uint256 tokenId) public virtual {\r\n        if (contractType == 1) {\r\n            IERC721(tokenAddress).approve(spender, tokenId);\r\n        } else {\r\n            revert(\"Unsupported contract type\");\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/tatum/custodial/Custodial_721_1155_TokenWalletWithBatch.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../../access/Ownable.sol\";\r\nimport \"../../token/ERC1155/IERC1155.sol\";\r\nimport \"../../token/ERC721/IERC721.sol\";\r\n\r\ncontract Custodial_721_1155_TokenWalletWithBatch is Ownable {\r\n\r\n    function onERC721Received(address, address, uint256, bytes memory) public virtual returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n\r\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual returns (bytes4) {\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual returns (bytes4) {\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n    /**\r\n        Function transfer assets owned by this wallet to the recipient. Transfer only 1 type of asset.\r\n        @param tokenAddress - address of the asset to own, if transferring native asset, use 0x0000000 address\r\n        @param contractType - type of asset\r\n                                - 1 - ERC721\r\n                                - 2 - ERC1155\r\n                                - 3 - native asset\r\n        @param recipient - recipient of the transaction\r\n        @param amount - amount to be transferred in the asset based of the contractType, for ERC721 not important\r\n        @param tokenId - tokenId to transfer, valid only for ERC721 and ERC1155\r\n    **/\r\n    function transfer(address tokenAddress, uint256 contractType, address recipient, uint256 amount, uint256 tokenId) public payable {\r\n        if (contractType == 1) {\r\n            IERC721(tokenAddress).safeTransferFrom(address(this), recipient, tokenId, \"\");\r\n        } else if (contractType == 2) {\r\n            IERC1155(tokenAddress).safeTransferFrom(address(this), recipient, tokenId, amount, \"\");\r\n        } else if (contractType == 3) {\r\n            payable(recipient).transfer(amount);\r\n        } else {\r\n            revert(\"Unsupported contract type\");\r\n        }\r\n    }\r\n\r\n    /**\r\n        Function transfer assets owned by this wallet to the recipient. Transfer any number of assets.\r\n        @param tokenAddress - address of the asset to own, if transferring native asset, use 0x0000000 address\r\n        @param contractType - type of asset\r\n                                - 1 - ERC721\r\n                                - 2 - ERC1155\r\n                                - 3 - native asset\r\n        @param recipient - recipient of the transaction\r\n        @param amount - amount to be transferred in the asset based of the contractType, for ERC721 not important\r\n        @param tokenId - tokenId to transfer, valid only for ERC721 and ERC1155\r\n    **/\r\n    function transferBatch(address[] memory tokenAddress, uint256[] memory contractType, address[] memory recipient, uint256[] memory amount, uint256[] memory tokenId) public payable {\r\n        require(tokenAddress.length == contractType.length);\r\n        require(recipient.length == contractType.length);\r\n        require(recipient.length == amount.length);\r\n        require(amount.length == tokenId.length);\r\n        for (uint256 i = 0; i < tokenAddress.length; i++) {\r\n            if (contractType[i] == 1) {\r\n                IERC721(tokenAddress[i]).safeTransferFrom(address(this), recipient[i], tokenId[i], \"\");\r\n            } else if (contractType[i] == 2) {\r\n                IERC1155(tokenAddress[i]).safeTransferFrom(address(this), recipient[i], tokenId[i], amount[i], \"\");\r\n            } else if (contractType[i] == 3) {\r\n                payable(recipient[i]).transfer(amount[i]);\r\n            } else {\r\n                revert(\"Unsupported contract type\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n        Function approves the transfer of assets owned by this wallet to the spender. Approve only 1 type of asset.\r\n        @param tokenAddress - address of the asset to approve\r\n        @param contractType - type of asset\r\n                                - 1 - ERC721\r\n                                - 2 - ERC1155\r\n        @param spender - who will be able to spend the assets on behalf of the user\r\n        @param tokenId - tokenId to transfer, valid only for ERC721 and ERC1155\r\n    **/\r\n    function approve(address tokenAddress, uint256 contractType, address spender, uint256, uint256 tokenId) public virtual {\r\n        if (contractType == 1) {\r\n            IERC721(tokenAddress).approve(spender, tokenId);\r\n        } else if (contractType == 2) {\r\n            IERC1155(tokenAddress).setApprovalForAll(spender, true);\r\n        } else {\r\n            revert(\"Unsupported contract type\");\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/tatum/custodial/Custodial_721_1155_TokenWallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../../access/Ownable.sol\";\r\nimport \"../../token/ERC1155/IERC1155.sol\";\r\nimport \"../../token/ERC721/IERC721.sol\";\r\n\r\ncontract Custodial_721_1155_TokenWallet is Ownable {\r\n\r\n    function onERC721Received(address, address, uint256, bytes memory) public virtual returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n\r\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual returns (bytes4) {\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual returns (bytes4) {\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n    /**\r\n        Function transfer assets owned by this wallet to the recipient. Transfer only 1 type of asset.\r\n        @param tokenAddress - address of the asset to own, if transferring native asset, use 0x0000000 address\r\n        @param contractType - type of asset\r\n                                - 1 - ERC721\r\n                                - 2 - ERC1155\r\n                                - 3 - native asset\r\n        @param recipient - recipient of the transaction\r\n        @param amount - amount to be transferred in the asset based of the contractType, for ERC721 not important\r\n        @param tokenId - tokenId to transfer, valid only for ERC721 and ERC1155\r\n    **/\r\n    function transfer(address tokenAddress, uint256 contractType, address recipient, uint256 amount, uint256 tokenId) public payable {\r\n        if (contractType == 1) {\r\n            IERC721(tokenAddress).safeTransferFrom(address(this), recipient, tokenId, \"\");\r\n        } else if (contractType == 2) {\r\n            IERC1155(tokenAddress).safeTransferFrom(address(this), recipient, tokenId, amount, \"\");\r\n        } else if (contractType == 3) {\r\n            payable(recipient).transfer(amount);\r\n        } else {\r\n            revert(\"Unsupported contract type\");\r\n        }\r\n    }\r\n\r\n    /**\r\n        Function approves the transfer of assets owned by this wallet to the spender. Approve only 1 type of asset.\r\n        @param tokenAddress - address of the asset to approve\r\n        @param contractType - type of asset\r\n                                - 1 - ERC721\r\n                                - 2 - ERC1155\r\n        @param spender - who will be able to spend the assets on behalf of the user\r\n        @param tokenId - tokenId to transfer, valid only for ERC721 and ERC1155\r\n    **/\r\n    function approve(address tokenAddress, uint256 contractType, address spender, uint256, uint256 tokenId) public virtual {\r\n        if (contractType == 1) {\r\n            IERC721(tokenAddress).approve(spender, tokenId);\r\n        } else if (contractType == 2) {\r\n            IERC1155(tokenAddress).setApprovalForAll(spender, true);\r\n        } else {\r\n            revert(\"Unsupported contract type\");\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/tatum/custodial/Custodial_20_TokenWalletWithBatch.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../../access/Ownable.sol\";\r\nimport \"../../token/ERC20/IERC20.sol\";\r\n\r\ncontract Custodial_20_TokenWalletWithBatch is Ownable {\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n    /**\r\n        Function transfer assets owned by this wallet to the recipient. Transfer only 1 type of asset.\r\n        @param tokenAddress - address of the asset to own, if transferring native asset, use 0x0000000 address\r\n        @param contractType - type of asset\r\n                                - 0 - ERC20\r\n                                - 3 - native asset\r\n        @param recipient - recipient of the transaction\r\n        @param amount - amount to be transferred in the asset based of the contractType\r\n    **/\r\n    function transfer(address tokenAddress, uint256 contractType, address recipient, uint256 amount, uint256) public payable {\r\n        if (contractType == 0) {\r\n            IERC20(tokenAddress).transfer(recipient, amount);\r\n        } else if (contractType == 3) {\r\n            payable(recipient).transfer(amount);\r\n        } else {\r\n            revert(\"Unsupported contract type\");\r\n        }\r\n    }\r\n\r\n    /**\r\n        Function transfer assets owned by this wallet to the recipient. Transfer any number of assets.\r\n        @param tokenAddress - address of the asset to own, if transferring native asset, use 0x0000000 address\r\n        @param contractType - type of asset\r\n                                - 0 - ERC20\r\n                                - 3 - native asset\r\n        @param recipient - recipient of the transaction\r\n        @param amount - amount to be transferred in the asset based of the contractType\r\n    **/\r\n    function transferBatch(address[] memory tokenAddress, uint256[] memory contractType, address[] memory recipient, uint256[] memory amount, uint256[] memory) public payable {\r\n        require(tokenAddress.length == contractType.length);\r\n        require(recipient.length == contractType.length);\r\n        require(recipient.length == amount.length);\r\n        for (uint256 i = 0; i < tokenAddress.length; i++) {\r\n            if (contractType[i] == 0) {\r\n                IERC20(tokenAddress[i]).transfer(recipient[i], amount[i]);\r\n            } else if (contractType[i] == 3) {\r\n                payable(recipient[i]).transfer(amount[i]);\r\n            } else {\r\n                revert(\"Unsupported contract type\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n        Function approves the transfer of assets owned by this wallet to the spender. Approve only 1 type of asset.\r\n        @param tokenAddress - address of the asset to approve\r\n        @param contractType - type of asset\r\n                                - 0 - ERC20\r\n        @param spender - who will be able to spend the assets on behalf of the user\r\n        @param amount - amount to be approved to spend in the asset based of the contractType\r\n    **/\r\n    function approve(address tokenAddress, uint256 contractType, address spender, uint256 amount, uint256) public virtual {\r\n        if (contractType == 0) {\r\n            IERC20(tokenAddress).approve(spender, amount);\r\n        } else {\r\n            revert(\"Unsupported contract type\");\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/tatum/custodial/Custodial_20_TokenWallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../../access/Ownable.sol\";\r\nimport \"../../token/ERC20/IERC20.sol\";\r\n\r\ncontract Custodial_20_TokenWallet is Ownable {\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n    /**\r\n        Function transfer assets owned by this wallet to the recipient. Transfer only 1 type of asset.\r\n        @param tokenAddress - address of the asset to own, if transferring native asset, use 0x0000000 address\r\n        @param contractType - type of asset\r\n                                - 0 - ERC20\r\n                                - 3 - native asset\r\n        @param recipient - recipient of the transaction\r\n        @param amount - amount to be transferred in the asset based of the contractType\r\n    **/\r\n    function transfer(address tokenAddress, uint256 contractType, address recipient, uint256 amount, uint256) public payable {\r\n        if (contractType == 0) {\r\n            IERC20(tokenAddress).transfer(recipient, amount);\r\n        } else if (contractType == 3) {\r\n            payable(recipient).transfer(amount);\r\n        } else {\r\n            revert(\"Unsupported contract type\");\r\n        }\r\n    }\r\n\r\n    /**\r\n        Function approves the transfer of assets owned by this wallet to the spender. Approve only 1 type of asset.\r\n        @param tokenAddress - address of the asset to approve\r\n        @param contractType - type of asset\r\n                                - 0 - ERC20\r\n        @param spender - who will be able to spend the assets on behalf of the user\r\n        @param amount - amount to be approved to spend in the asset based of the contractType\r\n    **/\r\n    function approve(address tokenAddress, uint256 contractType, address spender, uint256 amount, uint256) public virtual {\r\n        if (contractType == 0) {\r\n            IERC20(tokenAddress).approve(spender, amount);\r\n        } else {\r\n            revert(\"Unsupported contract type\");\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/tatum/custodial/Custodial_20_721_TokenWalletWithBatch.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../../access/Ownable.sol\";\r\nimport \"../../token/ERC20/IERC20.sol\";\r\nimport \"../../token/ERC721/IERC721.sol\";\r\n\r\ncontract Custodial_20_721_TokenWalletWithBatch is Ownable {\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n    function onERC721Received(address, address, uint256, bytes memory) public virtual returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n    /**\r\n        Function transfer assets owned by this wallet to the recipient. Transfer only 1 type of asset.\r\n        @param tokenAddress - address of the asset to own, if transferring native asset, use 0x0000000 address\r\n        @param contractType - type of asset\r\n                                - 0 - ERC20\r\n                                - 1 - ERC721\r\n                                - 3 - native asset\r\n        @param recipient - recipient of the transaction\r\n        @param amount - amount to be transferred in the asset based of the contractType, for ERC721 not important\r\n        @param tokenId - tokenId to transfer, valid only for ERC721\r\n    **/\r\n    function transfer(address tokenAddress, uint256 contractType, address recipient, uint256 amount, uint256 tokenId) public payable {\r\n        if (contractType == 0) {\r\n            IERC20(tokenAddress).transfer(recipient, amount);\r\n        } else if (contractType == 1) {\r\n            IERC721(tokenAddress).safeTransferFrom(address(this), recipient, tokenId, \"\");\r\n        } else if (contractType == 3) {\r\n            payable(recipient).transfer(amount);\r\n        } else {\r\n            revert(\"Unsupported contract type\");\r\n        }\r\n    }\r\n\r\n    /**\r\n        Function transfer assets owned by this wallet to the recipient. Transfer any number of assets.\r\n        @param tokenAddress - address of the asset to own, if transferring native asset, use 0x0000000 address\r\n        @param contractType - type of asset\r\n                                - 0 - ERC20\r\n                                - 1 - ERC721\r\n                                - 3 - native asset\r\n        @param recipient - recipient of the transaction\r\n        @param amount - amount to be transferred in the asset based of the contractType, for ERC721 not important\r\n        @param tokenId - tokenId to transfer, valid only for ERC721\r\n    **/\r\n    function transferBatch(address[] memory tokenAddress, uint256[] memory contractType, address[] memory recipient, uint256[] memory amount, uint256[] memory tokenId) public payable {\r\n        require(tokenAddress.length == contractType.length);\r\n        require(recipient.length == contractType.length);\r\n        require(recipient.length == amount.length);\r\n        require(recipient.length == tokenId.length);\r\n        for (uint256 i = 0; i < tokenAddress.length; i++) {\r\n            if (contractType[i] == 0) {\r\n                IERC20(tokenAddress[i]).transfer(recipient[i], amount[i]);\r\n            } else if (contractType[i] == 1) {\r\n                IERC721(tokenAddress[i]).safeTransferFrom(address(this), recipient[i], tokenId[i], \"\");\r\n            } else if (contractType[i] == 3) {\r\n                payable(recipient[i]).transfer(amount[i]);\r\n            } else {\r\n                revert(\"Unsupported contract type\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n        Function approves the transfer of assets owned by this wallet to the spender. Approve only 1 type of asset.\r\n        @param tokenAddress - address of the asset to approve\r\n        @param contractType - type of asset\r\n                                - 0 - ERC20\r\n                                - 1 - ERC721\r\n        @param spender - who will be able to spend the assets on behalf of the user\r\n        @param amount - amount to be approved to spend in the asset based of the contractType\r\n        @param tokenId - tokenId to transfer, valid only for ERC721\r\n    **/\r\n    function approve(address tokenAddress, uint256 contractType, address spender, uint256 amount, uint256 tokenId) public virtual {\r\n        if (contractType == 0) {\r\n            IERC20(tokenAddress).approve(spender, amount);\r\n        } else if (contractType == 1) {\r\n            IERC721(tokenAddress).approve(spender, tokenId);\r\n        } else {\r\n            revert(\"Unsupported contract type\");\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/tatum/custodial/Custodial_20_721_TokenWallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../../access/Ownable.sol\";\r\nimport \"../../token/ERC20/IERC20.sol\";\r\nimport \"../../token/ERC721/IERC721.sol\";\r\n\r\ncontract Custodial_20_721_TokenWallet is Ownable {\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n    function onERC721Received(address, address, uint256, bytes memory) public virtual returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n    /**\r\n        Function transfer assets owned by this wallet to the recipient. Transfer only 1 type of asset.\r\n        @param tokenAddress - address of the asset to own, if transferring native asset, use 0x0000000 address\r\n        @param contractType - type of asset\r\n                                - 0 - ERC20\r\n                                - 1 - ERC721\r\n                                - 3 - native asset\r\n        @param recipient - recipient of the transaction\r\n        @param amount - amount to be transferred in the asset based of the contractType, for ERC721 not important\r\n        @param tokenId - tokenId to transfer, valid only for ERC721\r\n    **/\r\n    function transfer(address tokenAddress, uint256 contractType, address recipient, uint256 amount, uint256 tokenId) public payable {\r\n        if (contractType == 0) {\r\n            IERC20(tokenAddress).transfer(recipient, amount);\r\n        } else if (contractType == 1) {\r\n            IERC721(tokenAddress).safeTransferFrom(address(this), recipient, tokenId, \"\");\r\n        } else if (contractType == 3) {\r\n            payable(recipient).transfer(amount);\r\n        } else {\r\n            revert(\"Unsupported contract type\");\r\n        }\r\n    }\r\n\r\n    /**\r\n        Function approves the transfer of assets owned by this wallet to the spender. Approve only 1 type of asset.\r\n        @param tokenAddress - address of the asset to approve\r\n        @param contractType - type of asset\r\n                                - 0 - ERC20\r\n                                - 1 - ERC721\r\n        @param spender - who will be able to spend the assets on behalf of the user\r\n        @param amount - amount to be approved to spend in the asset based of the contractType\r\n        @param tokenId - tokenId to transfer, valid only for ERC721\r\n    **/\r\n    function approve(address tokenAddress, uint256 contractType, address spender, uint256 amount, uint256 tokenId) public virtual {\r\n        if (contractType == 0) {\r\n            IERC20(tokenAddress).approve(spender, amount);\r\n        } else if (contractType == 1) {\r\n            IERC721(tokenAddress).approve(spender, tokenId);\r\n        } else {\r\n            revert(\"Unsupported contract type\");\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/tatum/custodial/Custodial_20_1155_TokenWalletWithBatch.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../../access/Ownable.sol\";\r\nimport \"../../token/ERC20/IERC20.sol\";\r\nimport \"../../token/ERC1155/IERC1155.sol\";\r\n\r\ncontract Custodial_20_1155_TokenWalletWithBatch is Ownable {\r\n\r\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual returns (bytes4) {\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual returns (bytes4) {\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n    /**\r\n        Function transfer assets owned by this wallet to the recipient. Transfer only 1 type of asset.\r\n        @param tokenAddress - address of the asset to own, if transferring native asset, use 0x0000000 address\r\n        @param contractType - type of asset\r\n                                - 0 - ERC20\r\n                                - 2 - ERC1155\r\n                                - 3 - native asset\r\n        @param recipient - recipient of the transaction\r\n        @param amount - amount to be transferred in the asset based of the contractType\r\n        @param tokenId - tokenId to transfer, valid only for ERC721 and ERC1155\r\n    **/\r\n    function transfer(address tokenAddress, uint256 contractType, address recipient, uint256 amount, uint256 tokenId) public payable {\r\n        if (contractType == 0) {\r\n            IERC20(tokenAddress).transfer(recipient, amount);\r\n        } else if (contractType == 2) {\r\n            IERC1155(tokenAddress).safeTransferFrom(address(this), recipient, tokenId, amount, \"\");\r\n        } else if (contractType == 3) {\r\n            payable(recipient).transfer(amount);\r\n        } else {\r\n            revert(\"Unsupported contract type\");\r\n        }\r\n    }\r\n\r\n    /**\r\n        Function transfer assets owned by this wallet to the recipient. Transfer any number of assets.\r\n        @param tokenAddress - address of the asset to own, if transferring native asset, use 0x0000000 address\r\n        @param contractType - type of asset\r\n                                - 0 - ERC20\r\n                                - 2 - ERC1155\r\n                                - 3 - native asset\r\n        @param recipient - recipient of the transaction\r\n        @param amount - amount to be transferred in the asset based of the contractType\r\n        @param tokenId - tokenId to transfer, valid only for ERC721 and ERC1155\r\n    **/\r\n    function transferBatch(address[] memory tokenAddress, uint256[] memory contractType, address[] memory recipient, uint256[] memory amount, uint256[] memory tokenId) public payable {\r\n        require(tokenAddress.length == contractType.length);\r\n        require(recipient.length == contractType.length);\r\n        require(recipient.length == amount.length);\r\n        require(amount.length == tokenId.length);\r\n        for (uint256 i = 0; i < tokenAddress.length; i++) {\r\n            if (contractType[i] == 0) {\r\n                IERC20(tokenAddress[i]).transfer(recipient[i], amount[i]);\r\n            } else if (contractType[i] == 2) {\r\n                IERC1155(tokenAddress[i]).safeTransferFrom(address(this), recipient[i], tokenId[i], amount[i], \"\");\r\n            } else if (contractType[i] == 3) {\r\n                payable(recipient[i]).transfer(amount[i]);\r\n            } else {\r\n                revert(\"Unsupported contract type\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n        Function approves the transfer of assets owned by this wallet to the spender. Approve only 1 type of asset.\r\n        @param tokenAddress - address of the asset to approve\r\n        @param contractType - type of asset\r\n                                - 0 - ERC20\r\n                                - 2 - ERC1155\r\n        @param spender - who will be able to spend the assets on behalf of the user\r\n        @param amount - amount to be approved to spend in the asset based of the contractType\r\n    **/\r\n    function approve(address tokenAddress, uint256 contractType, address spender, uint256 amount, uint256) public virtual {\r\n        if (contractType == 0) {\r\n            IERC20(tokenAddress).approve(spender, amount);\r\n        } else if (contractType == 2) {\r\n            IERC1155(tokenAddress).setApprovalForAll(spender, true);\r\n        } else {\r\n            revert(\"Unsupported contract type\");\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/tatum/custodial/Custodial_20_1155_TokenWallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../../access/Ownable.sol\";\r\nimport \"../../token/ERC20/IERC20.sol\";\r\nimport \"../../token/ERC1155/IERC1155.sol\";\r\n\r\ncontract Custodial_20_1155_TokenWallet is Ownable {\r\n\r\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual returns (bytes4) {\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual returns (bytes4) {\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n    /**\r\n        Function transfer assets owned by this wallet to the recipient. Transfer only 1 type of asset.\r\n        @param tokenAddress - address of the asset to own, if transferring native asset, use 0x0000000 address\r\n        @param contractType - type of asset\r\n                                - 0 - ERC20\r\n                                - 2 - ERC1155\r\n                                - 3 - native asset\r\n        @param recipient - recipient of the transaction\r\n        @param amount - amount to be transferred in the asset based of the contractType\r\n        @param tokenId - tokenId to transfer, valid only for ERC721 and ERC1155\r\n    **/\r\n    function transfer(address tokenAddress, uint256 contractType, address recipient, uint256 amount, uint256 tokenId) public payable {\r\n        if (contractType == 0) {\r\n            IERC20(tokenAddress).transfer(recipient, amount);\r\n        } else if (contractType == 2) {\r\n            IERC1155(tokenAddress).safeTransferFrom(address(this), recipient, tokenId, amount, \"\");\r\n        } else if (contractType == 3) {\r\n            payable(recipient).transfer(amount);\r\n        } else {\r\n            revert(\"Unsupported contract type\");\r\n        }\r\n    }\r\n\r\n    /**\r\n        Function approves the transfer of assets owned by this wallet to the spender. Approve only 1 type of asset.\r\n        @param tokenAddress - address of the asset to approve\r\n        @param contractType - type of asset\r\n                                - 0 - ERC20\r\n                                - 2 - ERC1155\r\n        @param spender - who will be able to spend the assets on behalf of the user\r\n        @param amount - amount to be approved to spend in the asset based of the contractType\r\n    **/\r\n    function approve(address tokenAddress, uint256 contractType, address spender, uint256 amount, uint256) public virtual {\r\n        if (contractType == 0) {\r\n            IERC20(tokenAddress).approve(spender, amount);\r\n        } else if (contractType == 2) {\r\n            IERC1155(tokenAddress).setApprovalForAll(spender, true);\r\n        } else {\r\n            revert(\"Unsupported contract type\");\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/tatum/custodial/Custodial_1155_TokenWalletWithBatch.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../../access/Ownable.sol\";\r\nimport \"../../token/ERC1155/IERC1155.sol\";\r\n\r\ncontract Custodial_1155_TokenWalletWithBatch is Ownable {\r\n\r\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual returns (bytes4) {\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual returns (bytes4) {\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n    /**\r\n        Function transfer assets owned by this wallet to the recipient. Transfer only 1 type of asset.\r\n        @param tokenAddress - address of the asset to own, if transferring native asset, use 0x0000000 address\r\n        @param contractType - type of asset\r\n                                - 2 - ERC1155\r\n                                - 3 - native asset\r\n        @param recipient - recipient of the transaction\r\n        @param amount - amount to be transferred in the asset based of the contractType\r\n        @param tokenId - tokenId to transfer, valid only for ERC721 and ERC1155\r\n    **/\r\n    function transfer(address tokenAddress, uint256 contractType, address recipient, uint256 amount, uint256 tokenId) public payable {\r\n        if (contractType == 2) {\r\n            IERC1155(tokenAddress).safeTransferFrom(address(this), recipient, tokenId, amount, \"\");\r\n        } else if (contractType == 3) {\r\n            payable(recipient).transfer(amount);\r\n        } else {\r\n            revert(\"Unsupported contract type\");\r\n        }\r\n    }\r\n\r\n    /**\r\n        Function transfer assets owned by this wallet to the recipient. Transfer any number of assets.\r\n        @param tokenAddress - address of the asset to own, if transferring native asset, use 0x0000000 address\r\n        @param contractType - type of asset\r\n                                - 2 - ERC1155\r\n                                - 3 - native asset\r\n        @param recipient - recipient of the transaction\r\n        @param amount - amount to be transferred in the asset based of the contractType\r\n        @param tokenId - tokenId to transfer, valid only for ERC721 and ERC1155\r\n    **/\r\n    function transferBatch(address[] memory tokenAddress, uint256[] memory contractType, address[] memory recipient, uint256[] memory amount, uint256[] memory tokenId) public payable {\r\n        require(tokenAddress.length == contractType.length);\r\n        require(recipient.length == contractType.length);\r\n        require(recipient.length == amount.length);\r\n        require(amount.length == tokenId.length);\r\n        for (uint256 i = 0; i < tokenAddress.length; i++) {\r\n            if (contractType[i] == 2) {\r\n                IERC1155(tokenAddress[i]).safeTransferFrom(address(this), recipient[i], tokenId[i], amount[i], \"\");\r\n            } else if (contractType[i] == 3) {\r\n                payable(recipient[i]).transfer(amount[i]);\r\n            } else {\r\n                revert(\"Unsupported contract type\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n        Function approves the transfer of assets owned by this wallet to the spender. Approve only 1 type of asset.\r\n        @param tokenAddress - address of the asset to approve\r\n        @param contractType - type of asset\r\n                                - 2 - ERC1155\r\n        @param spender - who will be able to spend the assets on behalf of the user\r\n    **/\r\n    function approve(address tokenAddress, uint256 contractType, address spender, uint256, uint256) public virtual {\r\n        if (contractType == 2) {\r\n            IERC1155(tokenAddress).setApprovalForAll(spender, true);\r\n        } else {\r\n            revert(\"Unsupported contract type\");\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/tatum/custodial/Custodial_1155_TokenWallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../../access/Ownable.sol\";\r\nimport \"../../token/ERC1155/IERC1155.sol\";\r\n\r\ncontract Custodial_1155_TokenWallet is Ownable {\r\n\r\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual returns (bytes4) {\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual returns (bytes4) {\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n    /**\r\n        Function transfer assets owned by this wallet to the recipient. Transfer only 1 type of asset.\r\n        @param tokenAddress - address of the asset to own, if transferring native asset, use 0x0000000 address\r\n        @param contractType - type of asset\r\n                                - 2 - ERC1155\r\n                                - 3 - native asset\r\n        @param recipient - recipient of the transaction\r\n        @param amount - amount to be transferred in the asset based of the contractType\r\n        @param tokenId - tokenId to transfer, valid only for ERC721 and ERC1155\r\n    **/\r\n    function transfer(address tokenAddress, uint256 contractType, address recipient, uint256 amount, uint256 tokenId) public payable {\r\n        if (contractType == 2) {\r\n            IERC1155(tokenAddress).safeTransferFrom(address(this), recipient, tokenId, amount, \"\");\r\n        } else if (contractType == 3) {\r\n            payable(recipient).transfer(amount);\r\n        } else {\r\n            revert(\"Unsupported contract type\");\r\n        }\r\n    }\r\n\r\n    /**\r\n        Function approves the transfer of assets owned by this wallet to the spender. Approve only 1 type of asset.\r\n        @param tokenAddress - address of the asset to approve\r\n        @param contractType - type of asset\r\n                                - 2 - ERC1155\r\n        @param spender - who will be able to spend the assets on behalf of the user\r\n    **/\r\n    function approve(address tokenAddress, uint256 contractType, address spender, uint256, uint256) public virtual {\r\n        if (contractType == 2) {\r\n            IERC1155(tokenAddress).setApprovalForAll(spender, true);\r\n        } else {\r\n            revert(\"Unsupported contract type\");\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/proxy/transparent/ProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./TransparentUpgradeableProxy.sol\";\r\nimport \"../../access/Ownable.sol\";\r\n\r\n/**\r\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\r\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\r\n */\r\ncontract ProxyAdmin is Ownable {\r\n\r\n    /**\r\n     * @dev Returns the current implementation of `proxy`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - This contract must be the admin of `proxy`.\r\n     */\r\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\r\n        // We need to manually run the static call since the getter cannot be flagged as view\r\n        // bytes4(keccak256(\"implementation()\")) == 0x5c60da1b\r\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"5c60da1b\");\r\n        require(success);\r\n        return abi.decode(returndata, (address));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current admin of `proxy`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - This contract must be the admin of `proxy`.\r\n     */\r\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\r\n        // We need to manually run the static call since the getter cannot be flagged as view\r\n        // bytes4(keccak256(\"admin()\")) == 0xf851a440\r\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"f851a440\");\r\n        require(success);\r\n        return abi.decode(returndata, (address));\r\n    }\r\n\r\n    /**\r\n     * @dev Changes the admin of `proxy` to `newAdmin`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - This contract must be the current admin of `proxy`.\r\n     */\r\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\r\n        proxy.changeAdmin(newAdmin);\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - This contract must be the admin of `proxy`.\r\n     */\r\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\r\n        proxy.upgradeTo(implementation);\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\r\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - This contract must be the admin of `proxy`.\r\n     */\r\n    function upgradeAndCall(TransparentUpgradeableProxy proxy, address implementation, bytes memory data) public payable virtual onlyOwner {\r\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\r\n    }\r\n}\r\n"
    },
    "contracts/proxy/transparent/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../ERC1967/ERC1967Proxy.sol\";\r\n\r\n/**\r\n * @dev This contract implements a proxy that is upgradeable by an admin.\r\n *\r\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\r\n * clashing], which can potentially be used in an attack, this contract uses the\r\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\r\n * things that go hand in hand:\r\n *\r\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\r\n * that call matches one of the admin functions exposed by the proxy itself.\r\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\r\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\r\n * \"admin cannot fallback to proxy target\".\r\n *\r\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\r\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\r\n * to sudden errors when trying to call a function from the proxy implementation.\r\n *\r\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\r\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\r\n */\r\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\r\n    /**\r\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\r\n     * optionally initialized with `_data` as explained in {UpgradeableProxy-constructor}.\r\n     */\r\n    constructor(address _logic, address admin_, bytes memory _data) payable ERC1967Proxy(_logic, _data) {\r\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1));\r\n        _setAdmin(admin_);\r\n    }\r\n\r\n    /**\r\n     * @dev Emitted when the admin account has changed.\r\n     */\r\n    event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n    /**\r\n     * @dev Storage slot with the admin of the contract.\r\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\r\n\r\n    /**\r\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\r\n     */\r\n    modifier ifAdmin() {\r\n        if (msg.sender == _admin()) {\r\n            _;\r\n        } else {\r\n            _fallback();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current admin.\r\n     *\r\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\r\n     *\r\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\r\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\r\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\r\n     */\r\n    function admin() external ifAdmin returns (address admin_) {\r\n        admin_ = _admin();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current implementation.\r\n     *\r\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\r\n     *\r\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\r\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\r\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\r\n     */\r\n    function implementation() external ifAdmin returns (address implementation_) {\r\n        implementation_ = _implementation();\r\n    }\r\n\r\n    /**\r\n     * @dev Changes the admin of the proxy.\r\n     *\r\n     * Emits an {AdminChanged} event.\r\n     *\r\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\r\n     */\r\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\r\n        require(newAdmin != address(0), \"TransparentUpgradeableProxy: new admin is the zero address\");\r\n        emit AdminChanged(_admin(), newAdmin);\r\n        _setAdmin(newAdmin);\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade the implementation of the proxy.\r\n     *\r\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\r\n     */\r\n    function upgradeTo(address newImplementation) external virtual ifAdmin {\r\n        _upgradeTo(newImplementation);\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\r\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\r\n     * proxied contract.\r\n     *\r\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\r\n     */\r\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable virtual ifAdmin {\r\n        _upgradeTo(newImplementation);\r\n        Address.functionDelegateCall(newImplementation, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current admin.\r\n     */\r\n    function _admin() internal view virtual returns (address adm) {\r\n        bytes32 slot = _ADMIN_SLOT;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            adm := sload(slot)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new address in the EIP1967 admin slot.\r\n     */\r\n    function _setAdmin(address newAdmin) private {\r\n        bytes32 slot = _ADMIN_SLOT;\r\n\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            sstore(slot, newAdmin)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\r\n     */\r\n    function _beforeFallback() internal virtual override {\r\n        require(msg.sender != _admin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\r\n        super._beforeFallback();\r\n    }\r\n}\r\n"
    },
    "contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../Proxy.sol\";\r\nimport \"../../utils/Address.sol\";\r\n\r\n/**\r\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\r\n * implementation address that can be changed. This address is stored in storage in the location specified by\r\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\r\n * implementation behind the proxy.\r\n *\r\n * Upgradeability is only provided internally through {_upgradeTo}. For an externally upgradeable proxy see\r\n * {TransparentUpgradeableProxy}.\r\n */\r\ncontract ERC1967Proxy is Proxy {\r\n    /**\r\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\r\n     *\r\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\r\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\r\n     */\r\n    constructor(address _logic, bytes memory _data) payable {\r\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\r\n        _setImplementation(_logic);\r\n        if(_data.length > 0) {\r\n            Address.functionDelegateCall(_logic, _data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Emitted when the implementation is upgraded.\r\n     */\r\n    event Upgraded(address indexed implementation);\r\n\r\n    /**\r\n     * @dev Storage slot with the address of the current implementation.\r\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n    /**\r\n     * @dev Returns the current implementation address.\r\n     */\r\n    function _implementation() internal view virtual override returns (address impl) {\r\n        bytes32 slot = _IMPLEMENTATION_SLOT;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            impl := sload(slot)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrades the proxy to a new implementation.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeTo(address newImplementation) internal virtual {\r\n        _setImplementation(newImplementation);\r\n        emit Upgraded(newImplementation);\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new address in the EIP1967 implementation slot.\r\n     */\r\n    function _setImplementation(address newImplementation) private {\r\n        require(Address.isContract(newImplementation), \"ERC1967Proxy: new implementation is not a contract\");\r\n\r\n        bytes32 slot = _IMPLEMENTATION_SLOT;\r\n\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            sstore(slot, newImplementation)\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\r\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\r\n * be specified by overriding the virtual {_implementation} function.\r\n *\r\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\r\n * different contract through the {_delegate} function.\r\n *\r\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\r\n */\r\nabstract contract Proxy {\r\n    /**\r\n     * @dev Delegates the current call to `implementation`.\r\n     *\r\n     * This function does not return to its internall call site, it will return directly to the external caller.\r\n     */\r\n    function _delegate(address implementation) internal virtual {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            // Copy msg.data. We take full control of memory in this inline assembly\r\n            // block because it will not return to Solidity code. We overwrite the\r\n            // Solidity scratch pad at memory position 0.\r\n            calldatacopy(0, 0, calldatasize())\r\n\r\n            // Call the implementation.\r\n            // out and outsize are 0 because we don't know the size yet.\r\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\r\n\r\n            // Copy the returned data.\r\n            returndatacopy(0, 0, returndatasize())\r\n\r\n            switch result\r\n            // delegatecall returns 0 on error.\r\n            case 0 { revert(0, returndatasize()) }\r\n            default { return(0, returndatasize()) }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\r\n     * and {_fallback} should delegate.\r\n     */\r\n    function _implementation() internal view virtual returns (address);\r\n\r\n    /**\r\n     * @dev Delegates the current call to the address returned by `_implementation()`.\r\n     *\r\n     * This function does not return to its internall call site, it will return directly to the external caller.\r\n     */\r\n    function _fallback() internal virtual {\r\n        _beforeFallback();\r\n        _delegate(_implementation());\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\r\n     * function in the contract matches the call data.\r\n     */\r\n    fallback () external payable virtual {\r\n        _fallback();\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\r\n     * is empty.\r\n     */\r\n    receive () external payable virtual {\r\n        _fallback();\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\r\n     * call, or as part of the Solidity `fallback` or `receive` functions.\r\n     *\r\n     * If overriden should call `super._beforeFallback()`.\r\n     */\r\n    function _beforeFallback() internal virtual {\r\n    }\r\n}\r\n"
    },
    "contracts/proxy/beacon/BeaconProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IBeacon.sol\";\r\nimport \"../Proxy.sol\";\r\nimport \"../../utils/Address.sol\";\r\n\r\n/**\r\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\r\n *\r\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\r\n * conflict with the storage layout of the implementation behind the proxy.\r\n *\r\n * _Available since v3.4._\r\n */\r\ncontract BeaconProxy is Proxy {\r\n    /**\r\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\r\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\r\n     */\r\n    bytes32 private constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\r\n\r\n    /**\r\n     * @dev Initializes the proxy with `beacon`.\r\n     *\r\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\r\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\r\n     * constructor.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `beacon` must be a contract with the interface {IBeacon}.\r\n     */\r\n    constructor(address beacon, bytes memory data) payable {\r\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.beacon\")) - 1));\r\n        _setBeacon(beacon, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current beacon address.\r\n     */\r\n    function _beacon() internal view virtual returns (address beacon) {\r\n        bytes32 slot = _BEACON_SLOT;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            beacon := sload(slot)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current implementation address of the associated beacon.\r\n     */\r\n    function _implementation() internal view virtual override returns (address) {\r\n        return IBeacon(_beacon()).implementation();\r\n    }\r\n\r\n    /**\r\n     * @dev Changes the proxy to use a new beacon.\r\n     *\r\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `beacon` must be a contract.\r\n     * - The implementation returned by `beacon` must be a contract.\r\n     */\r\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\r\n        require(\r\n            Address.isContract(beacon),\r\n            \"BeaconProxy: beacon is not a contract\"\r\n        );\r\n        require(\r\n            Address.isContract(IBeacon(beacon).implementation()),\r\n            \"BeaconProxy: beacon implementation is not a contract\"\r\n        );\r\n        bytes32 slot = _BEACON_SLOT;\r\n\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            sstore(slot, beacon)\r\n        }\r\n\r\n        if (data.length > 0) {\r\n            Address.functionDelegateCall(_implementation(), data, \"BeaconProxy: function call failed\");\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\r\n */\r\ninterface IBeacon {\r\n    /**\r\n     * @dev Must return an address that can be used as a delegate call target.\r\n     *\r\n     * {BeaconProxy} will check that this address is a contract.\r\n     */\r\n    function implementation() external view returns (address);\r\n}\r\n"
    },
    "contracts/proxy/beacon/UpgradeableBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IBeacon.sol\";\r\nimport \"../../access/Ownable.sol\";\r\nimport \"../../utils/Address.sol\";\r\n\r\n/**\r\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\r\n * implementation contract, which is where they will delegate all function calls.\r\n *\r\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\r\n */\r\ncontract UpgradeableBeacon is IBeacon, Ownable {\r\n    address private _implementation;\r\n\r\n    /**\r\n     * @dev Emitted when the implementation returned by the beacon is changed.\r\n     */\r\n    event Upgraded(address indexed implementation);\r\n\r\n    /**\r\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\r\n     * beacon.\r\n     */\r\n    constructor(address implementation_) {\r\n        _setImplementation(implementation_);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current implementation address.\r\n     */\r\n    function implementation() public view virtual override returns (address) {\r\n        return _implementation;\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrades the beacon to a new implementation.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - msg.sender must be the owner of the contract.\r\n     * - `newImplementation` must be a contract.\r\n     */\r\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\r\n        _setImplementation(newImplementation);\r\n        emit Upgraded(newImplementation);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the implementation contract address for this beacon\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `newImplementation` must be a contract.\r\n     */\r\n    function _setImplementation(address newImplementation) private {\r\n        require(Address.isContract(newImplementation), \"UpgradeableBeacon: implementation is not a contract\");\r\n        _implementation = newImplementation;\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/OwnableMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../access/Ownable.sol\";\r\n\r\ncontract OwnableMock is Ownable { }\r\n"
    },
    "contracts/utils/escrow/Escrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../../access/Ownable.sol\";\r\nimport \"../Address.sol\";\r\n\r\n /**\r\n  * @title Escrow\r\n  * @dev Base escrow contract, holds funds designated for a payee until they\r\n  * withdraw them.\r\n  *\r\n  * Intended usage: This contract (and derived escrow contracts) should be a\r\n  * standalone contract, that only interacts with the contract that instantiated\r\n  * it. That way, it is guaranteed that all Ether will be handled according to\r\n  * the `Escrow` rules, and there is no need to check for payable functions or\r\n  * transfers in the inheritance tree. The contract that uses the escrow as its\r\n  * payment method should be its owner, and provide public methods redirecting\r\n  * to the escrow's deposit and withdraw.\r\n  */\r\ncontract Escrow is Ownable {\r\n    using Address for address payable;\r\n\r\n    event Deposited(address indexed payee, uint256 weiAmount);\r\n    event Withdrawn(address indexed payee, uint256 weiAmount);\r\n\r\n    mapping(address => uint256) private _deposits;\r\n\r\n    function depositsOf(address payee) public view returns (uint256) {\r\n        return _deposits[payee];\r\n    }\r\n\r\n    /**\r\n     * @dev Stores the sent amount as credit to be withdrawn.\r\n     * @param payee The destination address of the funds.\r\n     */\r\n    function deposit(address payee) public payable virtual onlyOwner {\r\n        uint256 amount = msg.value;\r\n        _deposits[payee] = _deposits[payee] + amount;\r\n\r\n        emit Deposited(payee, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw accumulated balance for a payee, forwarding all gas to the\r\n     * recipient.\r\n     *\r\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\r\n     * Make sure you trust the recipient, or are either following the\r\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\r\n     *\r\n     * @param payee The address whose funds will be withdrawn and transferred to.\r\n     */\r\n    function withdraw(address payable payee) public virtual onlyOwner {\r\n        uint256 payment = _deposits[payee];\r\n\r\n        _deposits[payee] = 0;\r\n\r\n        payee.sendValue(payment);\r\n\r\n        emit Withdrawn(payee, payment);\r\n    }\r\n}\r\n"
    },
    "contracts/security/PullPayment.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/escrow/Escrow.sol\";\r\n\r\n/**\r\n * @dev Simple implementation of a\r\n * https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment]\r\n * strategy, where the paying contract doesn't interact directly with the\r\n * receiver account, which must withdraw its payments itself.\r\n *\r\n * Pull-payments are often considered the best practice when it comes to sending\r\n * Ether, security-wise. It prevents recipients from blocking execution, and\r\n * eliminates reentrancy concerns.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n *\r\n * To use, derive from the `PullPayment` contract, and use {_asyncTransfer}\r\n * instead of Solidity's `transfer` function. Payees can query their due\r\n * payments with {payments}, and retrieve them with {withdrawPayments}.\r\n */\r\nabstract contract PullPayment {\r\n    Escrow immutable private _escrow;\r\n\r\n    constructor () {\r\n        _escrow = new Escrow();\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw accumulated payments, forwarding all gas to the recipient.\r\n     *\r\n     * Note that _any_ account can call this function, not just the `payee`.\r\n     * This means that contracts unaware of the `PullPayment` protocol can still\r\n     * receive funds this way, by having a separate account call\r\n     * {withdrawPayments}.\r\n     *\r\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\r\n     * Make sure you trust the recipient, or are either following the\r\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\r\n     *\r\n     * @param payee Whose payments will be withdrawn.\r\n     */\r\n    function withdrawPayments(address payable payee) public virtual {\r\n        _escrow.withdraw(payee);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the payments owed to an address.\r\n     * @param dest The creditor's address.\r\n     */\r\n    function payments(address dest) public view returns (uint256) {\r\n        return _escrow.depositsOf(dest);\r\n    }\r\n\r\n    /**\r\n     * @dev Called by the payer to store the sent amount as credit to be pulled.\r\n     * Funds sent in this way are stored in an intermediate {Escrow} contract, so\r\n     * there is no danger of them being spent before withdrawal.\r\n     *\r\n     * @param dest The destination address of the funds.\r\n     * @param amount The amount to transfer.\r\n     */\r\n    function _asyncTransfer(address dest, uint256 amount) internal virtual {\r\n        _escrow.deposit{ value: amount }(dest);\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/PullPaymentMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../security/PullPayment.sol\";\r\n\r\n// mock class using PullPayment\r\ncontract PullPaymentMock is PullPayment {\r\n    constructor () payable { }\r\n\r\n    // test helper function to call asyncTransfer\r\n    function callTransfer(address dest, uint256 amount) public {\r\n        _asyncTransfer(dest, amount);\r\n    }\r\n}\r\n"
    },
    "contracts/utils/escrow/ConditionalEscrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Escrow.sol\";\r\n\r\n/**\r\n * @title ConditionalEscrow\r\n * @dev Base abstract escrow to only allow withdrawal if a condition is met.\r\n * @dev Intended usage: See {Escrow}. Same usage guidelines apply here.\r\n */\r\nabstract contract ConditionalEscrow is Escrow {\r\n    /**\r\n     * @dev Returns whether an address is allowed to withdraw their funds. To be\r\n     * implemented by derived contracts.\r\n     * @param payee The destination address of the funds.\r\n     */\r\n    function withdrawalAllowed(address payee) public view virtual returns (bool);\r\n\r\n    function withdraw(address payable payee) public virtual override {\r\n        require(withdrawalAllowed(payee), \"ConditionalEscrow: payee is not allowed to withdraw\");\r\n        super.withdraw(payee);\r\n    }\r\n}\r\n"
    },
    "contracts/utils/escrow/RefundEscrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./ConditionalEscrow.sol\";\r\n\r\n/**\r\n * @title RefundEscrow\r\n * @dev Escrow that holds funds for a beneficiary, deposited from multiple\r\n * parties.\r\n * @dev Intended usage: See {Escrow}. Same usage guidelines apply here.\r\n * @dev The owner account (that is, the contract that instantiates this\r\n * contract) may deposit, close the deposit period, and allow for either\r\n * withdrawal by the beneficiary, or refunds to the depositors. All interactions\r\n * with `RefundEscrow` will be made through the owner contract.\r\n */\r\ncontract RefundEscrow is ConditionalEscrow {\r\n    using Address for address payable;\r\n\r\n    enum State { Active, Refunding, Closed }\r\n\r\n    event RefundsClosed();\r\n    event RefundsEnabled();\r\n\r\n    State private _state;\r\n    address payable immutable private _beneficiary;\r\n\r\n    /**\r\n     * @dev Constructor.\r\n     * @param beneficiary_ The beneficiary of the deposits.\r\n     */\r\n    constructor (address payable beneficiary_) {\r\n        require(beneficiary_ != address(0), \"RefundEscrow: beneficiary is the zero address\");\r\n        _beneficiary = beneficiary_;\r\n        _state = State.Active;\r\n    }\r\n\r\n    /**\r\n     * @return The current state of the escrow.\r\n     */\r\n    function state() public view virtual returns (State) {\r\n        return _state;\r\n    }\r\n\r\n    /**\r\n     * @return The beneficiary of the escrow.\r\n     */\r\n    function beneficiary() public view virtual returns (address payable) {\r\n        return _beneficiary;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores funds that may later be refunded.\r\n     * @param refundee The address funds will be sent to if a refund occurs.\r\n     */\r\n    function deposit(address refundee) public payable virtual override {\r\n        require(state() == State.Active, \"RefundEscrow: can only deposit while active\");\r\n        super.deposit(refundee);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows for the beneficiary to withdraw their funds, rejecting\r\n     * further deposits.\r\n     */\r\n    function close() public virtual onlyOwner {\r\n        require(state() == State.Active, \"RefundEscrow: can only close while active\");\r\n        _state = State.Closed;\r\n        emit RefundsClosed();\r\n    }\r\n\r\n    /**\r\n     * @dev Allows for refunds to take place, rejecting further deposits.\r\n     */\r\n    function enableRefunds() public onlyOwner virtual {\r\n        require(state() == State.Active, \"RefundEscrow: can only enable refunds while active\");\r\n        _state = State.Refunding;\r\n        emit RefundsEnabled();\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws the beneficiary's funds.\r\n     */\r\n    function beneficiaryWithdraw() public virtual {\r\n        require(state() == State.Closed, \"RefundEscrow: beneficiary can only withdraw while closed\");\r\n        beneficiary().sendValue(address(this).balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether refundees can withdraw their deposits (be refunded). The overridden function receives a\r\n     * 'payee' argument, but we ignore it here since the condition is global, not per-payee.\r\n     */\r\n    function withdrawalAllowed(address) public view override returns (bool) {\r\n        return state() == State.Refunding;\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/ConditionalEscrowMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/escrow/ConditionalEscrow.sol\";\r\n\r\n// mock class using ConditionalEscrow\r\ncontract ConditionalEscrowMock is ConditionalEscrow {\r\n    mapping(address => bool) private _allowed;\r\n\r\n    function setAllowed(address payee, bool allowed) public {\r\n        _allowed[payee] = allowed;\r\n    }\r\n\r\n    function withdrawalAllowed(address payee) public view override returns (bool) {\r\n        return _allowed[payee];\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/ERC1155BurnableMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../token/ERC1155/extensions/ERC1155Burnable.sol\";\r\n\r\ncontract ERC1155BurnableMock is ERC1155Burnable {\r\n    constructor(string memory uri) ERC1155(uri) { }\r\n\r\n    function mint(address to, uint256 id, uint256 value, bytes memory data) public {\r\n        _mint(to, id, value, data);\r\n    }\r\n}\r\n"
    },
    "contracts/tatum/Tatum1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../token/ERC1155/presets/ERC1155PresetMinterPauser.sol\";\r\n\r\ncontract Tatum1155 is ERC1155PresetMinterPauser {\r\n    bool _publicMint;\r\n    constructor(string memory uri, bool publicMint) ERC1155PresetMinterPauser(uri) {\r\n        _publicMint=publicMint;\r\n    }\r\n\r\n    function safeTransfer(\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    )\r\n    public\r\n    virtual\r\n    {\r\n        return safeTransferFrom(_msgSender(), to, id, amount, data);\r\n    }\r\n\r\n    function safeBatchTransfer(\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    )\r\n    public\r\n    virtual\r\n    {\r\n        return safeBatchTransferFrom(_msgSender(), to, ids, amounts, data);\r\n    }\r\n\r\n    function mintBatch(address[] memory to, uint256[][] memory ids, uint256[][] memory amounts, bytes memory data) public virtual {\r\n        if(!_publicMint){\r\n            require(hasRole(MINTER_ROLE, _msgSender()), \"ERC1155PresetMinterPauser: must have minter role to mint\");\r\n        }\r\n        for (uint i = 0; i < to.length; i++) {\r\n            _mintBatch(to[i], ids[i], amounts[i], data);\r\n        }\r\n    }\r\n    function mint(address to, uint256 id, uint256 amount, bytes memory data) public virtual override{\r\n        if(!_publicMint){\r\n            require(hasRole(MINTER_ROLE, _msgSender()), \"ERC1155PresetMinterPauser: must have minter role to mint\");\r\n        }\r\n        _mint(to, id, amount, data);\r\n    }\r\n    function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) public virtual override {\r\n        if(!_publicMint){\r\n            require(hasRole(MINTER_ROLE, _msgSender()), \"ERC1155PresetMinterPauser: must have minter role to mint\");\r\n        }\r\n        _mintBatch(to, ids, amounts, data);\r\n    }\r\n\r\n}\r\n"
    },
    "contracts/mocks/AccessControlEnumerableMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../access/AccessControlEnumerable.sol\";\r\n\r\ncontract AccessControlEnumerableMock is AccessControlEnumerable {\r\n    constructor() {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n    }\r\n\r\n    function setRoleAdmin(bytes32 roleId, bytes32 adminRoleId) public {\r\n        _setRoleAdmin(roleId, adminRoleId);\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/EnumerableSetMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/structs/EnumerableSet.sol\";\r\n\r\n// Bytes32Set\r\ncontract EnumerableBytes32SetMock {\r\n    using EnumerableSet for EnumerableSet.Bytes32Set;\r\n\r\n    event OperationResult(bool result);\r\n\r\n    EnumerableSet.Bytes32Set private _set;\r\n\r\n    function contains(bytes32 value) public view returns (bool) {\r\n        return _set.contains(value);\r\n    }\r\n\r\n    function add(bytes32 value) public {\r\n        bool result = _set.add(value);\r\n        emit OperationResult(result);\r\n    }\r\n\r\n    function remove(bytes32 value) public {\r\n        bool result = _set.remove(value);\r\n        emit OperationResult(result);\r\n    }\r\n\r\n    function length() public view returns (uint256) {\r\n        return _set.length();\r\n    }\r\n\r\n    function at(uint256 index) public view returns (bytes32) {\r\n        return _set.at(index);\r\n    }\r\n}\r\n\r\n// AddressSet\r\ncontract EnumerableAddressSetMock {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    event OperationResult(bool result);\r\n\r\n    EnumerableSet.AddressSet private _set;\r\n\r\n    function contains(address value) public view returns (bool) {\r\n        return _set.contains(value);\r\n    }\r\n\r\n    function add(address value) public {\r\n        bool result = _set.add(value);\r\n        emit OperationResult(result);\r\n    }\r\n\r\n    function remove(address value) public {\r\n        bool result = _set.remove(value);\r\n        emit OperationResult(result);\r\n    }\r\n\r\n    function length() public view returns (uint256) {\r\n        return _set.length();\r\n    }\r\n\r\n    function at(uint256 index) public view returns (address) {\r\n        return _set.at(index);\r\n    }\r\n}\r\n\r\n// UintSet\r\ncontract EnumerableUintSetMock {\r\n    using EnumerableSet for EnumerableSet.UintSet;\r\n\r\n    event OperationResult(bool result);\r\n\r\n    EnumerableSet.UintSet private _set;\r\n\r\n    function contains(uint256 value) public view returns (bool) {\r\n        return _set.contains(value);\r\n    }\r\n\r\n    function add(uint256 value) public {\r\n        bool result = _set.add(value);\r\n        emit OperationResult(result);\r\n    }\r\n\r\n    function remove(uint256 value) public {\r\n        bool result = _set.remove(value);\r\n        emit OperationResult(result);\r\n    }\r\n\r\n    function length() public view returns (uint256) {\r\n        return _set.length();\r\n    }\r\n\r\n    function at(uint256 index) public view returns (uint256) {\r\n        return _set.at(index);\r\n    }\r\n}\r\n"
    },
    "contracts/utils/structs/EnumerableMap.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./EnumerableSet.sol\";\r\n\r\n/**\r\n * @dev Library for managing an enumerable variant of Solidity's\r\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\r\n * type.\r\n *\r\n * Maps have the following properties:\r\n *\r\n * - Entries are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableMap.UintToAddressMap private myMap;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\r\n * supported.\r\n */\r\nlibrary EnumerableMap {\r\n    using EnumerableSet for EnumerableSet.Bytes32Set;\r\n\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Map type with\r\n    // bytes32 keys and values.\r\n    // The Map implementation uses private functions, and user-facing\r\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\r\n    // the underlying Map.\r\n    // This means that we can only create new EnumerableMaps for types that fit\r\n    // in bytes32.\r\n\r\n    struct Map {\r\n        // Storage of keys\r\n        EnumerableSet.Bytes32Set _keys;\r\n\r\n        mapping (bytes32 => bytes32) _values;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\r\n     * key. O(1).\r\n     *\r\n     * Returns true if the key was added to the map, that is if it was not\r\n     * already present.\r\n     */\r\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\r\n        map._values[key] = value;\r\n        return map._keys.add(key);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a key-value pair from a map. O(1).\r\n     *\r\n     * Returns true if the key was removed from the map, that is if it was present.\r\n     */\r\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\r\n        delete map._values[key];\r\n        return map._keys.remove(key);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the key is in the map. O(1).\r\n     */\r\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\r\n        return map._keys.contains(key);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of key-value pairs in the map. O(1).\r\n     */\r\n    function _length(Map storage map) private view returns (uint256) {\r\n        return map._keys.length();\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of entries inside the\r\n    * array, and it may change when more entries are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\r\n        bytes32 key = map._keys.at(index);\r\n        return (key, map._values[key]);\r\n    }\r\n\r\n    /**\r\n     * @dev Tries to returns the value associated with `key`.  O(1).\r\n     * Does not revert if `key` is not in the map.\r\n     */\r\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\r\n        bytes32 value = map._values[key];\r\n        if (value == bytes32(0)) {\r\n            return (_contains(map, key), bytes32(0));\r\n        } else {\r\n            return (true, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value associated with `key`.  O(1).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `key` must be in the map.\r\n     */\r\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\r\n        bytes32 value = map._values[key];\r\n        require(value != 0 || _contains(map, key), \"EnumerableMap: nonexistent key\");\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\r\n     */\r\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\r\n        bytes32 value = map._values[key];\r\n        require(value != 0 || _contains(map, key), errorMessage);\r\n        return value;\r\n    }\r\n\r\n    // UintToAddressMap\r\n\r\n    struct UintToAddressMap {\r\n        Map _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\r\n     * key. O(1).\r\n     *\r\n     * Returns true if the key was added to the map, that is if it was not\r\n     * already present.\r\n     */\r\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\r\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the key was removed from the map, that is if it was present.\r\n     */\r\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\r\n        return _remove(map._inner, bytes32(key));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the key is in the map. O(1).\r\n     */\r\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\r\n        return _contains(map._inner, bytes32(key));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of elements in the map. O(1).\r\n     */\r\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\r\n        return _length(map._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the element stored at position `index` in the set. O(1).\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\r\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\r\n        return (uint256(key), address(uint160(uint256(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Tries to returns the value associated with `key`.  O(1).\r\n     * Does not revert if `key` is not in the map.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\r\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\r\n        return (success, address(uint160(uint256(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value associated with `key`.  O(1).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `key` must be in the map.\r\n     */\r\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\r\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryGet}.\r\n     */\r\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\r\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/EnumerableMapMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/structs/EnumerableMap.sol\";\r\n\r\ncontract EnumerableMapMock {\r\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\r\n\r\n    event OperationResult(bool result);\r\n\r\n    EnumerableMap.UintToAddressMap private _map;\r\n\r\n    function contains(uint256 key) public view returns (bool) {\r\n        return _map.contains(key);\r\n    }\r\n\r\n    function set(uint256 key, address value) public {\r\n        bool result = _map.set(key, value);\r\n        emit OperationResult(result);\r\n    }\r\n\r\n    function remove(uint256 key) public {\r\n        bool result = _map.remove(key);\r\n        emit OperationResult(result);\r\n    }\r\n\r\n    function length() public view returns (uint256) {\r\n        return _map.length();\r\n    }\r\n\r\n    function at(uint256 index) public view returns (uint256 key, address value) {\r\n        return _map.at(index);\r\n    }\r\n\r\n\r\n    function tryGet(uint256 key) public view returns (bool, address) {\r\n        return _map.tryGet(key);\r\n    }\r\n\r\n    function get(uint256 key) public view returns (address) {\r\n        return _map.get(key);\r\n    }\r\n\r\n    function getWithMessage(uint256 key, string calldata errorMessage) public view returns (address) {\r\n        return _map.get(key, errorMessage);\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/ERC721EnumerableMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../token/ERC721/extensions/ERC721Enumerable.sol\";\r\n\r\n/**\r\n * @title ERC721Mock\r\n * This mock just provides a public safeMint, mint, and burn functions for testing purposes\r\n */\r\ncontract ERC721EnumerableMock is ERC721Enumerable {\r\n    string private _baseTokenURI;\r\n\r\n    constructor (string memory name, string memory symbol) ERC721(name, symbol) { }\r\n\r\n    function _baseURI() internal view virtual override returns (string memory) {\r\n        return _baseTokenURI;\r\n    }\r\n\r\n    function setBaseURI(string calldata newBaseTokenURI) public {\r\n        _baseTokenURI = newBaseTokenURI;\r\n    }\r\n\r\n    function baseURI() public view returns (string memory) {\r\n        return _baseURI();\r\n    }\r\n\r\n    function exists(uint256 tokenId) public view returns (bool) {\r\n        return _exists(tokenId);\r\n    }\r\n\r\n    function mint(address to, uint256 tokenId) public {\r\n        _mint(to, tokenId);\r\n    }\r\n\r\n    function safeMint(address to, uint256 tokenId) public {\r\n        _safeMint(to, tokenId);\r\n    }\r\n\r\n    function safeMint(address to, uint256 tokenId, bytes memory _data) public {\r\n        _safeMint(to, tokenId, _data);\r\n    }\r\n\r\n    function burn(uint256 tokenId) public {\r\n        _burn(tokenId);\r\n    }\r\n}\r\n"
    },
    "contracts/token/ERC777/ERC777.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC777.sol\";\r\nimport \"./IERC777Recipient.sol\";\r\nimport \"./IERC777Sender.sol\";\r\nimport \"../ERC20/IERC20.sol\";\r\nimport \"../../utils/Address.sol\";\r\nimport \"../../utils/Context.sol\";\r\nimport \"../../utils/introspection/IERC1820Registry.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC777} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n *\r\n * Support for ERC20 is included in this contract, as specified by the EIP: both\r\n * the ERC777 and ERC20 interfaces can be safely used when interacting with it.\r\n * Both {IERC777-Sent} and {IERC20-Transfer} events are emitted on token\r\n * movements.\r\n *\r\n * Additionally, the {IERC777-granularity} value is hard-coded to `1`, meaning that there\r\n * are no special restrictions in the amount of tokens that created, moved, or\r\n * destroyed. This makes integration with ERC20 applications seamless.\r\n */\r\ncontract ERC777 is Context, IERC777, IERC20 {\r\n    using Address for address;\r\n\r\n    IERC1820Registry constant internal _ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    bytes32 private constant _TOKENS_SENDER_INTERFACE_HASH = keccak256(\"ERC777TokensSender\");\r\n    bytes32 private constant _TOKENS_RECIPIENT_INTERFACE_HASH = keccak256(\"ERC777TokensRecipient\");\r\n\r\n    // This isn't ever read from - it's only used to respond to the defaultOperators query.\r\n    address[] private _defaultOperatorsArray;\r\n\r\n    // Immutable, but accounts may revoke them (tracked in __revokedDefaultOperators).\r\n    mapping(address => bool) private _defaultOperators;\r\n\r\n    // For each account, a mapping of its operators and revoked default operators.\r\n    mapping(address => mapping(address => bool)) private _operators;\r\n    mapping(address => mapping(address => bool)) private _revokedDefaultOperators;\r\n\r\n    // ERC20-allowances\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    /**\r\n     * @dev `defaultOperators` may be an empty array.\r\n     */\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        address[] memory defaultOperators_\r\n    ) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n\r\n        _defaultOperatorsArray = defaultOperators_;\r\n        for (uint256 i = 0; i < defaultOperators_.length; i++) {\r\n            _defaultOperators[defaultOperators_[i]] = true;\r\n        }\r\n\r\n        // register interfaces\r\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\"ERC777Token\"), address(this));\r\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\"ERC20Token\"), address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC777-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC777-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-decimals}.\r\n     *\r\n     * Always returns 18, as per the\r\n     * [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility).\r\n     */\r\n    function decimals() public pure virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC777-granularity}.\r\n     *\r\n     * This implementation always returns `1`.\r\n     */\r\n    function granularity() public view virtual override returns (uint256) {\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC777-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override(IERC20, IERC777) returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by an account (`tokenHolder`).\r\n     */\r\n    function balanceOf(address tokenHolder) public view virtual override(IERC20, IERC777) returns (uint256) {\r\n        return _balances[tokenHolder];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC777-send}.\r\n     *\r\n     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\r\n     */\r\n    function send(address recipient, uint256 amount, bytes memory data) public virtual override  {\r\n        _send(_msgSender(), recipient, amount, data, \"\", true);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient}\r\n     * interface if it is a contract.\r\n     *\r\n     * Also emits a {Sent} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        require(recipient != address(0), \"ERC777: transfer to the zero address\");\r\n\r\n        address from = _msgSender();\r\n\r\n        _callTokensToSend(from, from, recipient, amount, \"\", \"\");\r\n\r\n        _move(from, from, recipient, amount, \"\", \"\");\r\n\r\n        _callTokensReceived(from, from, recipient, amount, \"\", \"\", false);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC777-burn}.\r\n     *\r\n     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\r\n     */\r\n    function burn(uint256 amount, bytes memory data) public virtual override  {\r\n        _burn(_msgSender(), amount, data, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC777-isOperatorFor}.\r\n     */\r\n    function isOperatorFor(address operator, address tokenHolder) public view virtual override returns (bool) {\r\n        return operator == tokenHolder ||\r\n            (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) ||\r\n            _operators[tokenHolder][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC777-authorizeOperator}.\r\n     */\r\n    function authorizeOperator(address operator) public virtual override  {\r\n        require(_msgSender() != operator, \"ERC777: authorizing self as operator\");\r\n\r\n        if (_defaultOperators[operator]) {\r\n            delete _revokedDefaultOperators[_msgSender()][operator];\r\n        } else {\r\n            _operators[_msgSender()][operator] = true;\r\n        }\r\n\r\n        emit AuthorizedOperator(operator, _msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC777-revokeOperator}.\r\n     */\r\n    function revokeOperator(address operator) public virtual override  {\r\n        require(operator != _msgSender(), \"ERC777: revoking self as operator\");\r\n\r\n        if (_defaultOperators[operator]) {\r\n            _revokedDefaultOperators[_msgSender()][operator] = true;\r\n        } else {\r\n            delete _operators[_msgSender()][operator];\r\n        }\r\n\r\n        emit RevokedOperator(operator, _msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC777-defaultOperators}.\r\n     */\r\n    function defaultOperators() public view virtual override returns (address[] memory) {\r\n        return _defaultOperatorsArray;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC777-operatorSend}.\r\n     *\r\n     * Emits {Sent} and {IERC20-Transfer} events.\r\n     */\r\n    function operatorSend(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bytes memory data,\r\n        bytes memory operatorData\r\n    )\r\n        public\r\n        virtual\r\n        override\r\n    {\r\n        require(isOperatorFor(_msgSender(), sender), \"ERC777: caller is not an operator for holder\");\r\n        _send(sender, recipient, amount, data, operatorData, true);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC777-operatorBurn}.\r\n     *\r\n     * Emits {Burned} and {IERC20-Transfer} events.\r\n     */\r\n    function operatorBurn(address account, uint256 amount, bytes memory data, bytes memory operatorData) public virtual override {\r\n        require(isOperatorFor(_msgSender(), account), \"ERC777: caller is not an operator for holder\");\r\n        _burn(account, amount, data, operatorData);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     *\r\n     * Note that operator and allowance concepts are orthogonal: operators may\r\n     * not have allowance, and accounts with allowance may not be operators\r\n     * themselves.\r\n     */\r\n    function allowance(address holder, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[holder][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Note that accounts cannot have allowance issued by their operators.\r\n     */\r\n    function approve(address spender, uint256 value) public virtual override returns (bool) {\r\n        address holder = _msgSender();\r\n        _approve(holder, spender, value);\r\n        return true;\r\n    }\r\n\r\n   /**\r\n    * @dev See {IERC20-transferFrom}.\r\n    *\r\n    * Note that operator and allowance concepts are orthogonal: operators cannot\r\n    * call `transferFrom` (unless they have allowance), and accounts with\r\n    * allowance cannot call `operatorSend` (unless they are operators).\r\n    *\r\n    * Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events.\r\n    */\r\n    function transferFrom(address holder, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        require(recipient != address(0), \"ERC777: transfer to the zero address\");\r\n        require(holder != address(0), \"ERC777: transfer from the zero address\");\r\n\r\n        address spender = _msgSender();\r\n\r\n        _callTokensToSend(spender, holder, recipient, amount, \"\", \"\");\r\n\r\n        _move(spender, holder, recipient, amount, \"\", \"\");\r\n\r\n        uint256 currentAllowance = _allowances[holder][spender];\r\n        require(currentAllowance >= amount, \"ERC777: transfer amount exceeds allowance\");\r\n        _approve(holder, spender, currentAllowance - amount);\r\n\r\n        _callTokensReceived(spender, holder, recipient, amount, \"\", \"\", false);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * If a send hook is registered for `account`, the corresponding function\r\n     * will be called with `operator`, `data` and `operatorData`.\r\n     *\r\n     * See {IERC777Sender} and {IERC777Recipient}.\r\n     *\r\n     * Emits {Minted} and {IERC20-Transfer} events.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - if `account` is a contract, it must implement the {IERC777Recipient}\r\n     * interface.\r\n     */\r\n    function _mint(\r\n        address account,\r\n        uint256 amount,\r\n        bytes memory userData,\r\n        bytes memory operatorData\r\n    )\r\n        internal\r\n        virtual\r\n    {\r\n        require(account != address(0), \"ERC777: mint to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, address(0), account, amount);\r\n\r\n        // Update state variables\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n\r\n        _callTokensReceived(operator, address(0), account, amount, userData, operatorData, true);\r\n\r\n        emit Minted(operator, account, amount, userData, operatorData);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Send tokens\r\n     * @param from address token holder address\r\n     * @param to address recipient address\r\n     * @param amount uint256 amount of tokens to transfer\r\n     * @param userData bytes extra information provided by the token holder (if any)\r\n     * @param operatorData bytes extra information provided by the operator (if any)\r\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\r\n     */\r\n    function _send(\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes memory userData,\r\n        bytes memory operatorData,\r\n        bool requireReceptionAck\r\n    )\r\n        internal\r\n        virtual\r\n    {\r\n        require(from != address(0), \"ERC777: send from the zero address\");\r\n        require(to != address(0), \"ERC777: send to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _callTokensToSend(operator, from, to, amount, userData, operatorData);\r\n\r\n        _move(operator, from, to, amount, userData, operatorData);\r\n\r\n        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\r\n    }\r\n\r\n    /**\r\n     * @dev Burn tokens\r\n     * @param from address token holder address\r\n     * @param amount uint256 amount of tokens to burn\r\n     * @param data bytes extra information provided by the token holder\r\n     * @param operatorData bytes extra information provided by the operator (if any)\r\n     */\r\n    function _burn(\r\n        address from,\r\n        uint256 amount,\r\n        bytes memory data,\r\n        bytes memory operatorData\r\n    )\r\n        internal\r\n        virtual\r\n    {\r\n        require(from != address(0), \"ERC777: burn from the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _callTokensToSend(operator, from, address(0), amount, data, operatorData);\r\n\r\n        _beforeTokenTransfer(operator, from, address(0), amount);\r\n\r\n        // Update state variables\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC777: burn amount exceeds balance\");\r\n        _balances[from] = fromBalance - amount;\r\n        _totalSupply -= amount;\r\n\r\n        emit Burned(operator, from, amount, data, operatorData);\r\n        emit Transfer(from, address(0), amount);\r\n    }\r\n\r\n    function _move(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes memory userData,\r\n        bytes memory operatorData\r\n    )\r\n        private\r\n    {\r\n        _beforeTokenTransfer(operator, from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC777: transfer amount exceeds balance\");\r\n        _balances[from] = fromBalance - amount;\r\n        _balances[to] += amount;\r\n\r\n        emit Sent(operator, from, to, amount, userData, operatorData);\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-_approve}.\r\n     *\r\n     * Note that accounts cannot have allowance issued by their operators.\r\n     */\r\n    function _approve(address holder, address spender, uint256 value) internal {\r\n        require(holder != address(0), \"ERC777: approve from the zero address\");\r\n        require(spender != address(0), \"ERC777: approve to the zero address\");\r\n\r\n        _allowances[holder][spender] = value;\r\n        emit Approval(holder, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Call from.tokensToSend() if the interface is registered\r\n     * @param operator address operator requesting the transfer\r\n     * @param from address token holder address\r\n     * @param to address recipient address\r\n     * @param amount uint256 amount of tokens to transfer\r\n     * @param userData bytes extra information provided by the token holder (if any)\r\n     * @param operatorData bytes extra information provided by the operator (if any)\r\n     */\r\n    function _callTokensToSend(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes memory userData,\r\n        bytes memory operatorData\r\n    )\r\n        private\r\n    {\r\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(from, _TOKENS_SENDER_INTERFACE_HASH);\r\n        if (implementer != address(0)) {\r\n            IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Call to.tokensReceived() if the interface is registered. Reverts if the recipient is a contract but\r\n     * tokensReceived() was not registered for the recipient\r\n     * @param operator address operator requesting the transfer\r\n     * @param from address token holder address\r\n     * @param to address recipient address\r\n     * @param amount uint256 amount of tokens to transfer\r\n     * @param userData bytes extra information provided by the token holder (if any)\r\n     * @param operatorData bytes extra information provided by the operator (if any)\r\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\r\n     */\r\n    function _callTokensReceived(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes memory userData,\r\n        bytes memory operatorData,\r\n        bool requireReceptionAck\r\n    )\r\n        private\r\n    {\r\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(to, _TOKENS_RECIPIENT_INTERFACE_HASH);\r\n        if (implementer != address(0)) {\r\n            IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\r\n        } else if (requireReceptionAck) {\r\n            require(!to.isContract(), \"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes\r\n     * calls to {send}, {transfer}, {operatorSend}, minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address operator, address from, address to, uint256 amount) internal virtual { }\r\n}\r\n"
    },
    "contracts/token/ERC777/IERC777.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC777Token standard as defined in the EIP.\r\n *\r\n * This contract uses the\r\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\r\n * token holders and recipients react to token movements by using setting implementers\r\n * for the associated interfaces in said registry. See {IERC1820Registry} and\r\n * {ERC1820Implementer}.\r\n */\r\ninterface IERC777 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the smallest part of the token that is not divisible. This\r\n     * means all token operations (creation, movement and destruction) must have\r\n     * amounts that are a multiple of this number.\r\n     *\r\n     * For most token contracts, this value will equal 1.\r\n     */\r\n    function granularity() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by an account (`owner`).\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * If send or receive hooks are registered for the caller and `recipient`,\r\n     * the corresponding functions will be called with `data` and empty\r\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\r\n     *\r\n     * Emits a {Sent} event.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - the caller must have at least `amount` tokens.\r\n     * - `recipient` cannot be the zero address.\r\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\r\n     * interface.\r\n     */\r\n    function send(address recipient, uint256 amount, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\r\n     * total supply.\r\n     *\r\n     * If a send hook is registered for the caller, the corresponding function\r\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\r\n     *\r\n     * Emits a {Burned} event.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - the caller must have at least `amount` tokens.\r\n     */\r\n    function burn(uint256 amount, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev Returns true if an account is an operator of `tokenHolder`.\r\n     * Operators can send and burn tokens on behalf of their owners. All\r\n     * accounts are their own operator.\r\n     *\r\n     * See {operatorSend} and {operatorBurn}.\r\n     */\r\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Make an account an operator of the caller.\r\n     *\r\n     * See {isOperatorFor}.\r\n     *\r\n     * Emits an {AuthorizedOperator} event.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `operator` cannot be calling address.\r\n     */\r\n    function authorizeOperator(address operator) external;\r\n\r\n    /**\r\n     * @dev Revoke an account's operator status for the caller.\r\n     *\r\n     * See {isOperatorFor} and {defaultOperators}.\r\n     *\r\n     * Emits a {RevokedOperator} event.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `operator` cannot be calling address.\r\n     */\r\n    function revokeOperator(address operator) external;\r\n\r\n    /**\r\n     * @dev Returns the list of default operators. These accounts are operators\r\n     * for all token holders, even if {authorizeOperator} was never called on\r\n     * them.\r\n     *\r\n     * This list is immutable, but individual holders may revoke these via\r\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\r\n     */\r\n    function defaultOperators() external view returns (address[] memory);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\r\n     * be an operator of `sender`.\r\n     *\r\n     * If send or receive hooks are registered for `sender` and `recipient`,\r\n     * the corresponding functions will be called with `data` and\r\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\r\n     *\r\n     * Emits a {Sent} event.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `sender` must have at least `amount` tokens.\r\n     * - the caller must be an operator for `sender`.\r\n     * - `recipient` cannot be the zero address.\r\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\r\n     * interface.\r\n     */\r\n    function operatorSend(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bytes calldata data,\r\n        bytes calldata operatorData\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\r\n     * The caller must be an operator of `account`.\r\n     *\r\n     * If a send hook is registered for `account`, the corresponding function\r\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\r\n     *\r\n     * Emits a {Burned} event.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     * - the caller must be an operator for `account`.\r\n     */\r\n    function operatorBurn(\r\n        address account,\r\n        uint256 amount,\r\n        bytes calldata data,\r\n        bytes calldata operatorData\r\n    ) external;\r\n\r\n    event Sent(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 amount,\r\n        bytes data,\r\n        bytes operatorData\r\n    );\r\n\r\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\r\n\r\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\r\n\r\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\r\n\r\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\r\n}\r\n"
    },
    "contracts/token/ERC777/IERC777Recipient.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\r\n *\r\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\r\n * contract implement this interface (contract holders can be their own\r\n * implementer) and registering it on the\r\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\r\n *\r\n * See {IERC1820Registry} and {ERC1820Implementer}.\r\n */\r\ninterface IERC777Recipient {\r\n    /**\r\n     * @dev Called by an {IERC777} token contract whenever tokens are being\r\n     * moved or created into a registered account (`to`). The type of operation\r\n     * is conveyed by `from` being the zero address or not.\r\n     *\r\n     * This call occurs _after_ the token contract's state is updated, so\r\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\r\n     *\r\n     * This function may revert to prevent the operation from being executed.\r\n     */\r\n    function tokensReceived(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes calldata userData,\r\n        bytes calldata operatorData\r\n    ) external;\r\n}\r\n"
    },
    "contracts/token/ERC777/IERC777Sender.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC777TokensSender standard as defined in the EIP.\r\n *\r\n * {IERC777} Token holders can be notified of operations performed on their\r\n * tokens by having a contract implement this interface (contract holders can be\r\n *  their own implementer) and registering it on the\r\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\r\n *\r\n * See {IERC1820Registry} and {ERC1820Implementer}.\r\n */\r\ninterface IERC777Sender {\r\n    /**\r\n     * @dev Called by an {IERC777} token contract whenever a registered holder's\r\n     * (`from`) tokens are about to be moved or destroyed. The type of operation\r\n     * is conveyed by `to` being the zero address or not.\r\n     *\r\n     * This call occurs _before_ the token contract's state is updated, so\r\n     * {IERC777-balanceOf}, etc., can be used to query the pre-operation state.\r\n     *\r\n     * This function may revert to prevent the operation from being executed.\r\n     */\r\n    function tokensToSend(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes calldata userData,\r\n        bytes calldata operatorData\r\n    ) external;\r\n}\r\n"
    },
    "contracts/utils/introspection/IERC1820Registry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the global ERC1820 Registry, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\r\n * implementers for interfaces in this registry, as well as query support.\r\n *\r\n * Implementers may be shared by multiple accounts, and can also implement more\r\n * than a single interface for each account. Contracts can implement interfaces\r\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\r\n * contract.\r\n *\r\n * {IERC165} interfaces can also be queried via the registry.\r\n *\r\n * For an in-depth explanation and source code analysis, see the EIP text.\r\n */\r\ninterface IERC1820Registry {\r\n    /**\r\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\r\n     * account is able to set interface implementers for it.\r\n     *\r\n     * By default, each account is its own manager. Passing a value of `0x0` in\r\n     * `newManager` will reset the manager to this initial state.\r\n     *\r\n     * Emits a {ManagerChanged} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be the current manager for `account`.\r\n     */\r\n    function setManager(address account, address newManager) external;\r\n\r\n    /**\r\n     * @dev Returns the manager for `account`.\r\n     *\r\n     * See {setManager}.\r\n     */\r\n    function getManager(address account) external view returns (address);\r\n\r\n    /**\r\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\r\n     * `interfaceHash`.\r\n     *\r\n     * `account` being the zero address is an alias for the caller's address.\r\n     * The zero address can also be used in `implementer` to remove an old one.\r\n     *\r\n     * See {interfaceHash} to learn how these are created.\r\n     *\r\n     * Emits an {InterfaceImplementerSet} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be the current manager for `account`.\r\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\r\n     * end in 28 zeroes).\r\n     * - `implementer` must implement {IERC1820Implementer} and return true when\r\n     * queried for support, unless `implementer` is the caller. See\r\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\r\n     */\r\n    function setInterfaceImplementer(address account, bytes32 _interfaceHash, address implementer) external;\r\n\r\n    /**\r\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\r\n     * implementer is registered, returns the zero address.\r\n     *\r\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\r\n     * zeroes), `account` will be queried for support of it.\r\n     *\r\n     * `account` being the zero address is an alias for the caller's address.\r\n     */\r\n    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\r\n     * corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\r\n     */\r\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\r\n\r\n    /**\r\n     *  @notice Updates the cache with whether the contract implements an ERC165 interface or not.\r\n     *  @param account Address of the contract for which to update the cache.\r\n     *  @param interfaceId ERC165 interface for which to update the cache.\r\n     */\r\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\r\n\r\n    /**\r\n     *  @notice Checks whether a contract implements an ERC165 interface or not.\r\n     *  If the result is not cached a direct lookup on the contract address is performed.\r\n     *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\r\n     *  {updateERC165Cache} with the contract address.\r\n     *  @param account Address of the contract to check.\r\n     *  @param interfaceId ERC165 interface to check.\r\n     *  @return True if `account` implements `interfaceId`, false otherwise.\r\n     */\r\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\r\n\r\n    /**\r\n     *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\r\n     *  @param account Address of the contract to check.\r\n     *  @param interfaceId ERC165 interface to check.\r\n     *  @return True if `account` implements `interfaceId`, false otherwise.\r\n     */\r\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\r\n\r\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\r\n\r\n    event ManagerChanged(address indexed account, address indexed newManager);\r\n}\r\n"
    },
    "contracts/token/ERC777/presets/ERC777PresetFixedSupply.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../ERC777.sol\";\r\n\r\n/**\r\n * @dev {ERC777} token, including:\r\n *\r\n *  - Preminted initial supply\r\n *  - No access control mechanism (for minting/pausing) and hence no governance\r\n *\r\n * _Available since v3.4._\r\n */\r\ncontract ERC777PresetFixedSupply is ERC777 {\r\n    /**\r\n     * @dev Mints `initialSupply` amount of token and transfers them to `owner`.\r\n     *\r\n     * See {ERC777-constructor}.\r\n     */\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        address[] memory defaultOperators,\r\n        uint256 initialSupply,\r\n        address owner\r\n    ) ERC777(name, symbol, defaultOperators) {\r\n        _mint(owner, initialSupply, \"\", \"\");\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/ERC777SenderRecipientMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../token/ERC777/IERC777.sol\";\r\nimport \"../token/ERC777/IERC777Sender.sol\";\r\nimport \"../token/ERC777/IERC777Recipient.sol\";\r\nimport \"../utils/Context.sol\";\r\nimport \"../utils/introspection/IERC1820Registry.sol\";\r\nimport \"../utils/introspection/ERC1820Implementer.sol\";\r\n\r\ncontract ERC777SenderRecipientMock is Context, IERC777Sender, IERC777Recipient, ERC1820Implementer {\r\n    event TokensToSendCalled(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes data,\r\n        bytes operatorData,\r\n        address token,\r\n        uint256 fromBalance,\r\n        uint256 toBalance\r\n    );\r\n\r\n    event TokensReceivedCalled(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes data,\r\n        bytes operatorData,\r\n        address token,\r\n        uint256 fromBalance,\r\n        uint256 toBalance\r\n    );\r\n\r\n    // Emitted in ERC777Mock. Here for easier decoding\r\n    event BeforeTokenTransfer();\r\n\r\n    bool private _shouldRevertSend;\r\n    bool private _shouldRevertReceive;\r\n\r\n    IERC1820Registry private _erc1820 = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\r\n\r\n    bytes32 constant private _TOKENS_SENDER_INTERFACE_HASH = keccak256(\"ERC777TokensSender\");\r\n    bytes32 constant private _TOKENS_RECIPIENT_INTERFACE_HASH = keccak256(\"ERC777TokensRecipient\");\r\n\r\n    function tokensToSend(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes calldata userData,\r\n        bytes calldata operatorData\r\n    ) external override {\r\n        if (_shouldRevertSend) {\r\n            revert();\r\n        }\r\n\r\n        IERC777 token = IERC777(_msgSender());\r\n\r\n        uint256 fromBalance = token.balanceOf(from);\r\n        // when called due to burn, to will be the zero address, which will have a balance of 0\r\n        uint256 toBalance = token.balanceOf(to);\r\n\r\n        emit TokensToSendCalled(\r\n            operator,\r\n            from,\r\n            to,\r\n            amount,\r\n            userData,\r\n            operatorData,\r\n            address(token),\r\n            fromBalance,\r\n            toBalance\r\n        );\r\n    }\r\n\r\n    function tokensReceived(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes calldata userData,\r\n        bytes calldata operatorData\r\n    ) external override {\r\n        if (_shouldRevertReceive) {\r\n            revert();\r\n        }\r\n\r\n        IERC777 token = IERC777(_msgSender());\r\n\r\n        uint256 fromBalance = token.balanceOf(from);\r\n        // when called due to burn, to will be the zero address, which will have a balance of 0\r\n        uint256 toBalance = token.balanceOf(to);\r\n\r\n        emit TokensReceivedCalled(\r\n            operator,\r\n            from,\r\n            to,\r\n            amount,\r\n            userData,\r\n            operatorData,\r\n            address(token),\r\n            fromBalance,\r\n            toBalance\r\n        );\r\n    }\r\n\r\n    function senderFor(address account) public {\r\n        _registerInterfaceForAddress(_TOKENS_SENDER_INTERFACE_HASH, account);\r\n\r\n        address self = address(this);\r\n        if (account == self) {\r\n            registerSender(self);\r\n        }\r\n    }\r\n\r\n    function registerSender(address sender) public {\r\n        _erc1820.setInterfaceImplementer(address(this), _TOKENS_SENDER_INTERFACE_HASH, sender);\r\n    }\r\n\r\n    function recipientFor(address account) public {\r\n        _registerInterfaceForAddress(_TOKENS_RECIPIENT_INTERFACE_HASH, account);\r\n\r\n        address self = address(this);\r\n        if (account == self) {\r\n            registerRecipient(self);\r\n        }\r\n    }\r\n\r\n    function registerRecipient(address recipient) public {\r\n        _erc1820.setInterfaceImplementer(address(this), _TOKENS_RECIPIENT_INTERFACE_HASH, recipient);\r\n    }\r\n\r\n    function setShouldRevertSend(bool shouldRevert) public {\r\n        _shouldRevertSend = shouldRevert;\r\n    }\r\n\r\n    function setShouldRevertReceive(bool shouldRevert) public {\r\n        _shouldRevertReceive = shouldRevert;\r\n    }\r\n\r\n    function send(IERC777 token, address to, uint256 amount, bytes memory data) public {\r\n        // This is 777's send function, not the Solidity send function\r\n        token.send(to, amount, data); // solhint-disable-line check-send-result\r\n    }\r\n\r\n    function burn(IERC777 token, uint256 amount, bytes memory data) public {\r\n        token.burn(amount, data);\r\n    }\r\n}\r\n"
    },
    "contracts/utils/introspection/ERC1820Implementer.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC1820Implementer.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC1820Implementer} interface.\r\n *\r\n * Contracts may inherit from this and call {_registerInterfaceForAddress} to\r\n * declare their willingness to be implementers.\r\n * {IERC1820Registry-setInterfaceImplementer} should then be called for the\r\n * registration to be complete.\r\n */\r\ncontract ERC1820Implementer is IERC1820Implementer {\r\n    bytes32 private constant _ERC1820_ACCEPT_MAGIC = keccak256(\"ERC1820_ACCEPT_MAGIC\");\r\n\r\n    mapping(bytes32 => mapping(address => bool)) private _supportedInterfaces;\r\n\r\n    /**\r\n     * See {IERC1820Implementer-canImplementInterfaceForAddress}.\r\n     */\r\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address account) public view virtual override returns (bytes32) {\r\n        return _supportedInterfaces[interfaceHash][account] ? _ERC1820_ACCEPT_MAGIC : bytes32(0x00);\r\n    }\r\n\r\n    /**\r\n     * @dev Declares the contract as willing to be an implementer of\r\n     * `interfaceHash` for `account`.\r\n     *\r\n     * See {IERC1820Registry-setInterfaceImplementer} and\r\n     * {IERC1820Registry-interfaceHash}.\r\n     */\r\n    function _registerInterfaceForAddress(bytes32 interfaceHash, address account) internal virtual {\r\n        _supportedInterfaces[interfaceHash][account] = true;\r\n    }\r\n}\r\n"
    },
    "contracts/utils/introspection/IERC1820Implementer.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for an ERC1820 implementer, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1820#interface-implementation-erc1820implementerinterface[EIP].\r\n * Used by contracts that will be registered as implementers in the\r\n * {IERC1820Registry}.\r\n */\r\ninterface IERC1820Implementer {\r\n    /**\r\n     * @dev Returns a special value (`ERC1820_ACCEPT_MAGIC`) if this contract\r\n     * implements `interfaceHash` for `account`.\r\n     *\r\n     * See {IERC1820Registry-setInterfaceImplementer}.\r\n     */\r\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address account) external view returns (bytes32);\r\n}\r\n"
    },
    "contracts/mocks/ERC1820ImplementerMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/introspection/ERC1820Implementer.sol\";\r\n\r\ncontract ERC1820ImplementerMock is ERC1820Implementer {\r\n    function registerInterfaceForAddress(bytes32 interfaceHash, address account) public {\r\n        _registerInterfaceForAddress(interfaceHash, account);\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/Create2Impl.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/Create2.sol\";\r\nimport \"../utils/introspection/ERC1820Implementer.sol\";\r\n\r\ncontract Create2Impl {\r\n    function deploy(uint256 value, bytes32 salt, bytes memory code) public {\r\n        Create2.deploy(value, salt, code);\r\n    }\r\n\r\n    function deployERC1820Implementer(uint256 value, bytes32 salt) public {\r\n        // solhint-disable-next-line indent\r\n        Create2.deploy(value, salt, type(ERC1820Implementer).creationCode);\r\n    }\r\n\r\n    function computeAddress(bytes32 salt, bytes32 codeHash) public view returns (address) {\r\n        return Create2.computeAddress(salt, codeHash);\r\n    }\r\n\r\n    function computeAddressWithDeployer(bytes32 salt, bytes32 codeHash, address deployer) public pure returns (address) {\r\n        return Create2.computeAddress(salt, codeHash, deployer);\r\n    }\r\n\r\n    receive() external payable {}\r\n}\r\n"
    },
    "contracts/utils/Create2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\r\n * `CREATE2` can be used to compute in advance the address where a smart\r\n * contract will be deployed, which allows for interesting new mechanisms known\r\n * as 'counterfactual interactions'.\r\n *\r\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\r\n * information.\r\n */\r\nlibrary Create2 {\r\n    /**\r\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\r\n     * will be deployed can be known in advance via {computeAddress}.\r\n     *\r\n     * The bytecode for a contract can be obtained from Solidity with\r\n     * `type(contractName).creationCode`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `bytecode` must not be empty.\r\n     * - `salt` must have not been used for `bytecode` already.\r\n     * - the factory must have a balance of at least `amount`.\r\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\r\n     */\r\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\r\n        address addr;\r\n        require(address(this).balance >= amount, \"Create2: insufficient balance\");\r\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\r\n        }\r\n        require(addr != address(0), \"Create2: Failed on deploy\");\r\n        return addr;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\r\n     * `bytecodeHash` or `salt` will result in a new destination address.\r\n     */\r\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\r\n        return computeAddress(salt, bytecodeHash, address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\r\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\r\n     */\r\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\r\n        bytes32 _data = keccak256(\r\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\r\n        );\r\n        return address(uint160(uint256(_data)));\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/ERC777Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/Context.sol\";\r\nimport \"../token/ERC777/ERC777.sol\";\r\n\r\ncontract ERC777Mock is Context, ERC777 {\r\n    event BeforeTokenTransfer();\r\n\r\n    constructor(\r\n        address initialHolder,\r\n        uint256 initialBalance,\r\n        string memory name,\r\n        string memory symbol,\r\n        address[] memory defaultOperators\r\n    ) ERC777(name, symbol, defaultOperators) {\r\n        _mint(initialHolder, initialBalance, \"\", \"\");\r\n    }\r\n\r\n    function mintInternal (\r\n        address to,\r\n        uint256 amount,\r\n        bytes memory userData,\r\n        bytes memory operatorData\r\n    ) public {\r\n        _mint(to, amount, userData, operatorData);\r\n    }\r\n\r\n    function approveInternal(address holder, address spender, uint256 value) public {\r\n        _approve(holder, spender, value);\r\n    }\r\n\r\n    function _beforeTokenTransfer(address, address, address, uint256) internal override {\r\n        emit BeforeTokenTransfer();\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/ERC721URIStorageMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../token/ERC721/extensions/ERC721URIStorage.sol\";\r\n\r\n/**\r\n * @title ERC721Mock\r\n * This mock just provides a public safeMint, mint, and burn functions for testing purposes\r\n */\r\ncontract ERC721URIStorageMock is ERC721URIStorage {\r\n    string private _baseTokenURI;\r\n\r\n    constructor (string memory name, string memory symbol) ERC721(name, symbol) { }\r\n\r\n    function _baseURI() internal view virtual override returns (string memory) {\r\n        return _baseTokenURI;\r\n    }\r\n\r\n    function setBaseURI(string calldata newBaseTokenURI) public {\r\n        _baseTokenURI = newBaseTokenURI;\r\n    }\r\n\r\n    function baseURI() public view returns (string memory) {\r\n        return _baseURI();\r\n    }\r\n\r\n    function setTokenURI(uint256 tokenId, string memory _tokenURI) public {\r\n        _setTokenURI(tokenId, _tokenURI);\r\n    }\r\n\r\n    function exists(uint256 tokenId) public view returns (bool) {\r\n        return _exists(tokenId);\r\n    }\r\n\r\n    function mint(address to, uint256 tokenId) public {\r\n        _mint(to, tokenId);\r\n    }\r\n\r\n    function safeMint(address to, uint256 tokenId) public {\r\n        _safeMint(to, tokenId);\r\n    }\r\n\r\n    function safeMint(address to, uint256 tokenId, bytes memory _data) public {\r\n        _safeMint(to, tokenId, _data);\r\n    }\r\n\r\n    function burn(uint256 tokenId) public {\r\n        _burn(tokenId);\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/ERC721Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../token/ERC721/ERC721.sol\";\r\n\r\n/**\r\n * @title ERC721Mock\r\n * This mock just provides a public safeMint, mint, and burn functions for testing purposes\r\n */\r\ncontract ERC721Mock is ERC721 {\r\n    string private _baseTokenURI;\r\n\r\n    constructor (string memory name, string memory symbol) ERC721(name, symbol) { }\r\n\r\n    function _baseURI() internal view virtual override returns (string memory) {\r\n        return _baseTokenURI;\r\n    }\r\n\r\n    function setBaseURI(string calldata newBaseTokenURI) public {\r\n        _baseTokenURI = newBaseTokenURI;\r\n    }\r\n\r\n    function baseURI() public view returns (string memory) {\r\n        return _baseURI();\r\n    }\r\n\r\n    function exists(uint256 tokenId) public view returns (bool) {\r\n        return _exists(tokenId);\r\n    }\r\n\r\n    function mint(address to, uint256 tokenId) public {\r\n        _mint(to, tokenId);\r\n    }\r\n\r\n    function safeMint(address to, uint256 tokenId) public {\r\n        _safeMint(to, tokenId);\r\n    }\r\n\r\n    function safeMint(address to, uint256 tokenId, bytes memory _data) public {\r\n        _safeMint(to, tokenId, _data);\r\n    }\r\n\r\n    function burn(uint256 tokenId) public {\r\n        _burn(tokenId);\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/StringsMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/Strings.sol\";\r\n\r\ncontract StringsMock {\r\n    function fromUint256(uint256 value) public pure returns (string memory) {\r\n        return Strings.toString(value);\r\n    }\r\n    function fromUint256Hex(uint256 value) public pure returns (string memory) {\r\n        return Strings.toHexString(value);\r\n    }\r\n    function fromUint256HexFixed(uint256 value, uint256 length) public pure returns (string memory) {\r\n        return Strings.toHexString(value, length);\r\n    }\r\n}\r\n"
    },
    "contracts/token/ERC721/utils/ERC721Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../IERC721Receiver.sol\";\r\n\r\n  /**\r\n   * @dev Implementation of the {IERC721Receiver} interface.\r\n   *\r\n   * Accepts all token transfers.\r\n   * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\r\n   */\r\ncontract ERC721Holder is IERC721Receiver {\r\n\r\n    /**\r\n     * @dev See {IERC721Receiver-onERC721Received}.\r\n     *\r\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/ERC721ReceiverMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../token/ERC721/IERC721Receiver.sol\";\r\n\r\ncontract ERC721ReceiverMock is IERC721Receiver {\r\n    enum Error {\r\n        None,\r\n        RevertWithMessage,\r\n        RevertWithoutMessage,\r\n        Panic\r\n    }\r\n\r\n    bytes4 private immutable _retval;\r\n    Error private immutable _error;\r\n\r\n    event Received(address operator, address from, uint256 tokenId, bytes data, uint256 gas);\r\n\r\n    constructor (bytes4 retval, Error error) {\r\n        _retval = retval;\r\n        _error = error;\r\n    }\r\n\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\r\n        public override returns (bytes4)\r\n    {\r\n        if (_error == Error.RevertWithMessage) {\r\n            revert(\"ERC721ReceiverMock: reverting\");\r\n        } else if (_error == Error.RevertWithoutMessage) {\r\n            revert();\r\n        } else if (_error == Error.Panic) {\r\n            uint256 a = uint256(0) / uint256(0);\r\n            a;\r\n        }\r\n        emit Received(operator, from, tokenId, data, gasleft());\r\n        return _retval;\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/ERC721PausableMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../token/ERC721/extensions/ERC721Pausable.sol\";\r\n\r\n/**\r\n * @title ERC721PausableMock\r\n * This mock just provides a public mint, burn and exists functions for testing purposes\r\n */\r\ncontract ERC721PausableMock is ERC721Pausable {\r\n    constructor (string memory name, string memory symbol) ERC721(name, symbol) { }\r\n\r\n    function pause() external {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external {\r\n        _unpause();\r\n    }\r\n\r\n    function exists(uint256 tokenId) public view returns (bool) {\r\n        return _exists(tokenId);\r\n    }\r\n\r\n    function mint(address to, uint256 tokenId) public {\r\n        _mint(to, tokenId);\r\n    }\r\n\r\n    function safeMint(address to, uint256 tokenId) public {\r\n        _safeMint(to, tokenId);\r\n    }\r\n\r\n    function safeMint(address to, uint256 tokenId, bytes memory _data) public {\r\n        _safeMint(to, tokenId, _data);\r\n    }\r\n\r\n    function burn(uint256 tokenId) public {\r\n        _burn(tokenId);\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/ERC20PausableMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../token/ERC20/extensions/ERC20Pausable.sol\";\r\n\r\n// mock class using ERC20Pausable\r\ncontract ERC20PausableMock is ERC20Pausable {\r\n    constructor (\r\n        string memory name,\r\n        string memory symbol,\r\n        address initialAccount,\r\n        uint256 initialBalance\r\n    ) ERC20(name, symbol) {\r\n        _mint(initialAccount, initialBalance);\r\n    }\r\n\r\n    function pause() external {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external {\r\n        _unpause();\r\n    }\r\n\r\n    function mint(address to, uint256 amount) public {\r\n        _mint(to, amount);\r\n    }\r\n\r\n    function burn(address from, uint256 amount) public {\r\n        _burn(from, amount);\r\n    }\r\n}\r\n"
    },
    "contracts/utils/introspection/ERC165Checker.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC165.sol\";\r\n\r\n/**\r\n * @dev Library used to query support of an interface declared via {IERC165}.\r\n *\r\n * Note that these functions return the actual result of the query: they do not\r\n * `revert` if an interface is not supported. It is up to the caller to decide\r\n * what to do in these cases.\r\n */\r\nlibrary ERC165Checker {\r\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\r\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports the {IERC165} interface,\r\n     */\r\n    function supportsERC165(address account) internal view returns (bool) {\r\n        // Any contract that implements ERC165 must explicitly indicate support of\r\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\r\n        return _supportsERC165Interface(account, type(IERC165).interfaceId) &&\r\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports the interface defined by\r\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\r\n        // query support of both ERC165 as per the spec and support of _interfaceId\r\n        return supportsERC165(account) &&\r\n            _supportsERC165Interface(account, interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns a boolean array where each value corresponds to the\r\n     * interfaces passed in and whether they're supported or not. This allows\r\n     * you to batch check interfaces for a contract where your expectation\r\n     * is that some interfaces may not be supported.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool[] memory) {\r\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\r\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\r\n\r\n        // query support of ERC165 itself\r\n        if (supportsERC165(account)) {\r\n            // query support of each interface in interfaceIds\r\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\r\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\r\n            }\r\n        }\r\n\r\n        return interfaceIdsSupported;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports all the interfaces defined in\r\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\r\n     *\r\n     * Batch-querying can lead to gas savings by skipping repeated checks for\r\n     * {IERC165} support.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\r\n        // query support of ERC165 itself\r\n        if (!supportsERC165(account)) {\r\n            return false;\r\n        }\r\n\r\n        // query support of each interface in _interfaceIds\r\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\r\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // all interfaces supported\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Query if a contract implements an interface, does not check ERC165 support\r\n     * @param account The address of the contract to query for support of an interface\r\n     * @param interfaceId The interface identifier, as specified in ERC-165\r\n     * @return true if the contract at account indicates support of the interface with\r\n     * identifier interfaceId, false otherwise\r\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\r\n     * the behavior of this method is undefined. This precondition can be checked\r\n     * with {supportsERC165}.\r\n     * Interface identification is specified in ERC-165.\r\n     */\r\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\r\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165(account).supportsInterface.selector, interfaceId);\r\n        (bool success, bytes memory result) = account.staticcall{ gas: 30000 }(encodedParams);\r\n        if (result.length < 32) return false;\r\n        return success && abi.decode(result, (bool));\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/ERC165CheckerMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/introspection/ERC165Checker.sol\";\r\n\r\ncontract ERC165CheckerMock {\r\n    using ERC165Checker for address;\r\n\r\n    function supportsERC165(address account) public view returns (bool) {\r\n        return account.supportsERC165();\r\n    }\r\n\r\n    function supportsInterface(address account, bytes4 interfaceId) public view returns (bool) {\r\n        return account.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) public view returns (bool) {\r\n        return account.supportsAllInterfaces(interfaceIds);\r\n    }\r\n\r\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds) public view returns (bool[] memory) {\r\n        return account.getSupportedInterfaces(interfaceIds);\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/ERC165/ERC165InterfacesSupported.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../../utils/introspection/IERC165.sol\";\r\n\r\n/**\r\n * https://eips.ethereum.org/EIPS/eip-214#specification\r\n * From the specification:\r\n * > Any attempts to make state-changing operations inside an execution instance with STATIC set to true will instead\r\n * throw an exception.\r\n * > These operations include [...], LOG0, LOG1, LOG2, [...]\r\n *\r\n * therefore, because this contract is staticcall'd we need to not emit events (which is how solidity-coverage works)\r\n * solidity-coverage ignores the /mocks folder, so we duplicate its implementation here to avoid instrumenting it\r\n */\r\ncontract SupportsInterfaceWithLookupMock is IERC165 {\r\n    /*\r\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n     */\r\n    bytes4 public constant INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    /**\r\n     * @dev A mapping of interface id to whether or not it's supported.\r\n     */\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    /**\r\n     * @dev A contract implementing SupportsInterfaceWithLookup\r\n     * implement ERC165 itself.\r\n     */\r\n    constructor () {\r\n        _registerInterface(INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    /**\r\n     * @dev Implement supportsInterface(bytes4) using a lookup table.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n     * @dev Private method for registering an interface.\r\n     */\r\n    function _registerInterface(bytes4 interfaceId) internal {\r\n        require(interfaceId != 0xffffffff, \"ERC165InterfacesSupported: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\ncontract ERC165InterfacesSupported is SupportsInterfaceWithLookupMock {\r\n    constructor (bytes4[] memory interfaceIds) {\r\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\r\n            _registerInterface(interfaceIds[i]);\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/token/ERC1155/utils/ERC1155Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./ERC1155Receiver.sol\";\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\ncontract ERC1155Holder is ERC1155Receiver {\r\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n}\r\n"
    },
    "contracts/utils/introspection/ERC165Storage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./ERC165.sol\";\r\n\r\n/**\r\n * @dev Storage based implementation of the {IERC165} interface.\r\n *\r\n * Contracts may inherit from this and call {_registerInterface} to declare\r\n * their support of an interface.\r\n */\r\nabstract contract ERC165Storage is ERC165 {\r\n    /**\r\n     * @dev Mapping of interface ids to whether or not it's supported.\r\n     */\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n     * @dev Registers the contract as an implementer of the interface defined by\r\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\r\n     * registering its interface id is not required.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\r\n     */\r\n    function _registerInterface(bytes4 interfaceId) internal virtual {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/ERC165StorageMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/introspection/ERC165Storage.sol\";\r\n\r\ncontract ERC165StorageMock is ERC165Storage {\r\n    function registerInterface(bytes4 interfaceId) public {\r\n        _registerInterface(interfaceId);\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/ERC165Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/introspection/ERC165.sol\";\r\n\r\ncontract ERC165Mock is ERC165 {\r\n}\r\n"
    },
    "contracts/mocks/AddressImpl.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/Address.sol\";\r\n\r\ncontract AddressImpl {\r\n    string public sharedAnswer;\r\n\r\n    event CallReturnValue(string data);\r\n\r\n    function isContract(address account) external view returns (bool) {\r\n        return Address.isContract(account);\r\n    }\r\n\r\n    function sendValue(address payable receiver, uint256 amount) external {\r\n        Address.sendValue(receiver, amount);\r\n    }\r\n\r\n    function functionCall(address target, bytes calldata data) external {\r\n        bytes memory returnData = Address.functionCall(target, data);\r\n        emit CallReturnValue(abi.decode(returnData, (string)));\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes calldata data, uint256 value) external payable {\r\n        bytes memory returnData = Address.functionCallWithValue(target, data, value);\r\n        emit CallReturnValue(abi.decode(returnData, (string)));\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes calldata data) external {\r\n        bytes memory returnData = Address.functionStaticCall(target, data);\r\n        emit CallReturnValue(abi.decode(returnData, (string)));\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes calldata data) external {\r\n        bytes memory returnData = Address.functionDelegateCall(target, data);\r\n        emit CallReturnValue(abi.decode(returnData, (string)));\r\n    }\r\n\r\n    // sendValue's tests require the contract to hold Ether\r\n    receive () external payable { }\r\n}\r\n"
    },
    "contracts/mocks/ReentrancyAttack.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/Context.sol\";\r\ncontract ReentrancyAttack is Context {\r\n    function callSender(bytes4 data) public {\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success,) = _msgSender().call(abi.encodeWithSelector(data));\r\n        require(success, \"ReentrancyAttack: failed call\");\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/ReentrancyMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../security/ReentrancyGuard.sol\";\r\nimport \"./ReentrancyAttack.sol\";\r\n\r\ncontract ReentrancyMock is ReentrancyGuard {\r\n    uint256 public counter;\r\n\r\n    constructor () {\r\n        counter = 0;\r\n    }\r\n\r\n    function callback() external nonReentrant {\r\n        _count();\r\n    }\r\n\r\n    function countLocalRecursive(uint256 n) public nonReentrant {\r\n        if (n > 0) {\r\n            _count();\r\n            countLocalRecursive(n - 1);\r\n        }\r\n    }\r\n\r\n    function countThisRecursive(uint256 n) public nonReentrant {\r\n        if (n > 0) {\r\n            _count();\r\n            // solhint-disable-next-line avoid-low-level-calls\r\n            (bool success,) = address(this).call(abi.encodeWithSignature(\"countThisRecursive(uint256)\", n - 1));\r\n            require(success, \"ReentrancyMock: failed call\");\r\n        }\r\n    }\r\n\r\n    function countAndCall(ReentrancyAttack attacker) public nonReentrant {\r\n        _count();\r\n        bytes4 func = bytes4(keccak256(\"callback()\"));\r\n        attacker.callSender(func);\r\n    }\r\n\r\n    function _count() private {\r\n        counter += 1;\r\n    }\r\n}\r\n"
    },
    "contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n"
    },
    "contracts/token/ERC20/presets/ERC20PresetFixedSupply.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../extensions/ERC20Burnable.sol\";\r\n\r\n/**\r\n * @dev {ERC20} token, including:\r\n *\r\n *  - Preminted initial supply\r\n *  - Ability for holders to burn (destroy) their tokens\r\n *  - No access control mechanism (for minting/pausing) and hence no governance\r\n *\r\n * This contract uses {ERC20Burnable} to include burn capabilities - head to\r\n * its documentation for details.\r\n *\r\n * _Available since v3.4._\r\n */\r\ncontract ERC20PresetFixedSupply is ERC20Burnable {\r\n    /**\r\n     * @dev Mints `initialSupply` amount of token and transfers them to `owner`.\r\n     *\r\n     * See {ERC20-constructor}.\r\n     */\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint256 initialSupply,\r\n        address owner\r\n    ) ERC20(name, symbol) {\r\n        _mint(owner, initialSupply);\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/ERC20BurnableMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../token/ERC20/extensions/ERC20Burnable.sol\";\r\n\r\ncontract ERC20BurnableMock is ERC20Burnable {\r\n    constructor (\r\n        string memory name,\r\n        string memory symbol,\r\n        address initialAccount,\r\n        uint256 initialBalance\r\n    ) ERC20(name, symbol) {\r\n        _mint(initialAccount, initialBalance);\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/ContextMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/Context.sol\";\r\n\r\ncontract ContextMock is Context {\r\n    event Sender(address sender);\r\n\r\n    function msgSender() public {\r\n        emit Sender(_msgSender());\r\n    }\r\n\r\n    event Data(bytes data, uint256 integerValue, string stringValue);\r\n\r\n    function msgData(uint256 integerValue, string memory stringValue) public {\r\n        emit Data(_msgData(), integerValue, stringValue);\r\n    }\r\n}\r\n\r\ncontract ContextMockCaller {\r\n    function callSender(ContextMock context) public {\r\n        context.msgSender();\r\n    }\r\n\r\n    function callData(ContextMock context, uint256 integerValue, string memory stringValue) public {\r\n        context.msgData(integerValue, stringValue);\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/ERC2771ContextMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./ContextMock.sol\";\r\nimport \"../metatx/ERC2771Context.sol\";\r\n\r\n// By inheriting from ERC2771Context, Context's internal functions are overridden automatically\r\ncontract ERC2771ContextMock is ContextMock, ERC2771Context {\r\n    constructor(address trustedForwarder) ERC2771Context(trustedForwarder) {}\r\n\r\n    function _msgSender() internal override(Context, ERC2771Context) view virtual returns (address) {\r\n        return ERC2771Context._msgSender();\r\n    }\r\n\r\n    function _msgData() internal override(Context, ERC2771Context) view virtual returns (bytes calldata) {\r\n        return ERC2771Context._msgData();\r\n    }\r\n}\r\n"
    },
    "contracts/metatx/ERC2771Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/Context.sol\";\r\n\r\n/*\r\n * @dev Context variant with ERC2771 support.\r\n */\r\nabstract contract ERC2771Context is Context {\r\n    address immutable _trustedForwarder;\r\n\r\n    constructor(address trustedForwarder) {\r\n        _trustedForwarder = trustedForwarder;\r\n    }\r\n\r\n    function isTrustedForwarder(address forwarder) public view virtual returns(bool) {\r\n        return forwarder == _trustedForwarder;\r\n    }\r\n\r\n    function _msgSender() internal view virtual override returns (address sender) {\r\n        if (isTrustedForwarder(msg.sender)) {\r\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\r\n            assembly { sender := shr(96, calldataload(sub(calldatasize(), 20))) }\r\n        } else {\r\n            return super._msgSender();\r\n        }\r\n    }\r\n\r\n    function _msgData() internal view virtual override returns (bytes calldata) {\r\n        if (isTrustedForwarder(msg.sender)) {\r\n            return msg.data[:msg.data.length-20];\r\n        } else {\r\n            return super._msgData();\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/token/ERC20/extensions/draft-ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./draft-IERC20Permit.sol\";\r\nimport \"../ERC20.sol\";\r\nimport \"../../../utils/cryptography/draft-EIP712.sol\";\r\nimport \"../../../utils/cryptography/ECDSA.sol\";\r\nimport \"../../../utils/Counters.sol\";\r\n\r\n/**\r\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n *\r\n * _Available since v3.4._\r\n */\r\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\r\n    using Counters for Counters.Counter;\r\n\r\n    mapping (address => Counters.Counter) private _nonces;\r\n\r\n    // solhint-disable-next-line var-name-mixedcase\r\n    bytes32 private immutable _PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n\r\n    /**\r\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\r\n     *\r\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\r\n     */\r\n    constructor(string memory name) EIP712(name, \"1\") {\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20Permit-permit}.\r\n     */\r\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public virtual override {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\r\n\r\n        bytes32 structHash = keccak256(\r\n            abi.encode(\r\n                _PERMIT_TYPEHASH,\r\n                owner,\r\n                spender,\r\n                value,\r\n                _nonces[owner].current(),\r\n                deadline\r\n            )\r\n        );\r\n\r\n        bytes32 hash = _hashTypedDataV4(structHash);\r\n\r\n        address signer = ECDSA.recover(hash, v, r, s);\r\n        require(signer == owner, \"ERC20Permit: invalid signature\");\r\n\r\n        _nonces[owner].increment();\r\n        _approve(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20Permit-nonces}.\r\n     */\r\n    function nonces(address owner) public view override returns (uint256) {\r\n        return _nonces[owner].current();\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\r\n        return _domainSeparatorV4();\r\n    }\r\n}\r\n"
    },
    "contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\r\n     * given `owner`'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n"
    },
    "contracts/utils/cryptography/draft-EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./ECDSA.sol\";\r\n\r\n/**\r\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\r\n *\r\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\r\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\r\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\r\n *\r\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\r\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\r\n * ({_hashTypedDataV4}).\r\n *\r\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\r\n * the chain id to protect against replay attacks on an eventual fork of the chain.\r\n *\r\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\r\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\r\n *\r\n * _Available since v3.4._\r\n */\r\nabstract contract EIP712 {\r\n    /* solhint-disable var-name-mixedcase */\r\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\r\n    // invalidate the cached domain separator if the chain id changes.\r\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\r\n    uint256 private immutable _CACHED_CHAIN_ID;\r\n\r\n    bytes32 private immutable _HASHED_NAME;\r\n    bytes32 private immutable _HASHED_VERSION;\r\n    bytes32 private immutable _TYPE_HASH;\r\n    /* solhint-enable var-name-mixedcase */\r\n\r\n    /**\r\n     * @dev Initializes the domain separator and parameter caches.\r\n     *\r\n     * The meaning of `name` and `version` is specified in\r\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\r\n     *\r\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\r\n     * - `version`: the current major version of the signing domain.\r\n     *\r\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\r\n     * contract upgrade].\r\n     */\r\n    constructor(string memory name, string memory version) {\r\n        bytes32 hashedName = keccak256(bytes(name));\r\n        bytes32 hashedVersion = keccak256(bytes(version));\r\n        bytes32 typeHash = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\r\n        _HASHED_NAME = hashedName;\r\n        _HASHED_VERSION = hashedVersion;\r\n        _CACHED_CHAIN_ID = block.chainid;\r\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\r\n        _TYPE_HASH = typeHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the domain separator for the current chain.\r\n     */\r\n    function _domainSeparatorV4() internal view returns (bytes32) {\r\n        if (block.chainid == _CACHED_CHAIN_ID) {\r\n            return _CACHED_DOMAIN_SEPARATOR;\r\n        } else {\r\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\r\n        }\r\n    }\r\n\r\n    function _buildDomainSeparator(bytes32 typeHash, bytes32 name, bytes32 version) private view returns (bytes32) {\r\n        return keccak256(\r\n            abi.encode(\r\n                typeHash,\r\n                name,\r\n                version,\r\n                block.chainid,\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\r\n     * function returns the hash of the fully encoded EIP712 message for this domain.\r\n     *\r\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\r\n     *\r\n     * ```solidity\r\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\r\n     *     keccak256(\"Mail(address to,string contents)\"),\r\n     *     mailTo,\r\n     *     keccak256(bytes(mailContents))\r\n     * )));\r\n     * address signer = ECDSA.recover(digest, signature);\r\n     * ```\r\n     */\r\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\r\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\r\n    }\r\n}\r\n"
    },
    "contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        // Check the signature length\r\n        if (signature.length != 65) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        return recover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     */\r\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \"ECDSA: invalid signature 's' value\");\r\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        require(signer != address(0), \"ECDSA: invalid signature\");\r\n\r\n        return signer;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Typed Data, created from a\r\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\r\n     * to the one signed with the\r\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\r\n     * JSON-RPC method as part of EIP-712.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/EIP712External.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/cryptography/draft-EIP712.sol\";\r\nimport \"../utils/cryptography/ECDSA.sol\";\r\n\r\ncontract EIP712External is EIP712 {\r\n    constructor(string memory name, string memory version) EIP712(name, version) {}\r\n\r\n    function domainSeparator() external view returns (bytes32) {\r\n        return _domainSeparatorV4();\r\n    }\r\n\r\n    function verify(bytes memory signature, address signer, address mailTo, string memory mailContents) external view {\r\n        bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\r\n            keccak256(\"Mail(address to,string contents)\"),\r\n            mailTo,\r\n            keccak256(bytes(mailContents))\r\n        )));\r\n        address recoveredSigner = ECDSA.recover(digest, signature);\r\n        require(recoveredSigner == signer);\r\n    }\r\n\r\n    function getChainId() external view returns (uint256) {\r\n        return block.chainid;\r\n    }\r\n}\r\n"
    },
    "contracts/metatx/MinimalForwarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/cryptography/ECDSA.sol\";\r\nimport \"../utils/cryptography/draft-EIP712.sol\";\r\n\r\n/*\r\n * @dev Simple minimal forwarder to be used together with an ERC2771 compatible contract. See {ERC2771Context}.\r\n */\r\ncontract MinimalForwarder is EIP712 {\r\n    using ECDSA for bytes32;\r\n\r\n    struct ForwardRequest {\r\n        address from;\r\n        address to;\r\n        uint256 value;\r\n        uint256 gas;\r\n        uint256 nonce;\r\n        bytes data;\r\n    }\r\n\r\n    bytes32 private constant TYPEHASH = keccak256(\"ForwardRequest(address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data)\");\r\n\r\n    mapping(address => uint256) private _nonces;\r\n\r\n    constructor() EIP712(\"MinimalForwarder\", \"0.0.1\") {}\r\n\r\n    function getNonce(address from) public view returns (uint256) {\r\n        return _nonces[from];\r\n    }\r\n\r\n    function verify(ForwardRequest calldata req, bytes calldata signature) public view returns (bool) {\r\n        address signer = _hashTypedDataV4(keccak256(abi.encode(\r\n            TYPEHASH,\r\n            req.from,\r\n            req.to,\r\n            req.value,\r\n            req.gas,\r\n            req.nonce,\r\n            keccak256(req.data)\r\n        ))).recover(signature);\r\n        return _nonces[req.from] == req.nonce && signer == req.from;\r\n    }\r\n\r\n    function execute(ForwardRequest calldata req, bytes calldata signature) public payable returns (bool, bytes memory) {\r\n        require(verify(req, signature), \"MinimalForwarder: signature does not match request\");\r\n        _nonces[req.from] = req.nonce + 1;\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = req.to.call{gas: req.gas, value: req.value}(abi.encodePacked(req.data, req.from));\r\n        // Validate that the relayer has sent enough gas for the call.\r\n        // See https://ronan.eth.link/blog/ethereum-gas-dangers/\r\n        assert(gasleft() > req.gas / 63);\r\n\r\n        return (success, returndata);\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/ECDSAMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/cryptography/ECDSA.sol\";\r\n\r\ncontract ECDSAMock {\r\n    using ECDSA for bytes32;\r\n\r\n    function recover(bytes32 hash, bytes memory signature) public pure returns (address) {\r\n        return hash.recover(signature);\r\n    }\r\n\r\n    function toEthSignedMessageHash(bytes32 hash) public pure returns (bytes32) {\r\n        return hash.toEthSignedMessageHash();\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/ERC20PermitMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\nimport \"../token/ERC20/extensions/draft-ERC20Permit.sol\";\r\n\r\ncontract ERC20PermitMock is ERC20Permit {\r\n    constructor (\r\n        string memory name,\r\n        string memory symbol,\r\n        address initialAccount,\r\n        uint256 initialBalance\r\n    ) payable ERC20(name, symbol) ERC20Permit(name) {\r\n        _mint(initialAccount, initialBalance);\r\n    }\r\n\r\n    function getChainId() external view returns (uint256) {\r\n        return block.chainid;\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/ERC20Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../token/ERC20/ERC20.sol\";\r\n\r\n// mock class using ERC20\r\ncontract ERC20Mock is ERC20 {\r\n    constructor (\r\n        string memory name,\r\n        string memory symbol,\r\n        address initialAccount,\r\n        uint256 initialBalance\r\n    ) payable ERC20(name, symbol) {\r\n        _mint(initialAccount, initialBalance);\r\n    }\r\n\r\n    function mint(address account, uint256 amount) public {\r\n        _mint(account, amount);\r\n    }\r\n\r\n    function burn(address account, uint256 amount) public {\r\n        _burn(account, amount);\r\n    }\r\n\r\n    function transferInternal(address from, address to, uint256 value) public {\r\n        _transfer(from, to, value);\r\n    }\r\n\r\n    function approveInternal(address owner, address spender, uint256 value) public {\r\n        _approve(owner, spender, value);\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/ERC20DecimalsMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../token/ERC20/ERC20.sol\";\r\n\r\ncontract ERC20DecimalsMock is ERC20 {\r\n    uint8 immutable private _decimals;\r\n\r\n    constructor (string memory name_, string memory symbol_, uint8 decimals_) ERC20(name_, symbol_) {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n"
    },
    "contracts/token/ERC20/extensions/ERC20Capped.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../ERC20.sol\";\r\n\r\n/**\r\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\r\n */\r\nabstract contract ERC20Capped is ERC20 {\r\n    uint256 immutable private _cap;\r\n\r\n    /**\r\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\r\n     * set once during construction.\r\n     */\r\n    constructor (uint256 cap_) {\r\n        require(cap_ > 0, \"ERC20Capped: cap is 0\");\r\n        _cap = cap_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the cap on the token's total supply.\r\n     */\r\n    function cap() public view virtual returns (uint256) {\r\n        return _cap;\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-_mint}.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual override {\r\n        require(ERC20.totalSupply() + amount <= cap(), \"ERC20Capped: cap exceeded\");\r\n        super._mint(account, amount);\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/ERC20CappedMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../token/ERC20/extensions/ERC20Capped.sol\";\r\n\r\ncontract ERC20CappedMock is ERC20Capped {\r\n    constructor (string memory name, string memory symbol, uint256 cap)\r\n        ERC20(name, symbol) ERC20Capped(cap)\r\n    { }\r\n\r\n    function mint(address to, uint256 tokenId) public {\r\n        _mint(to, tokenId);\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/ERC20SnapshotMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../token/ERC20/extensions/ERC20Snapshot.sol\";\r\n\r\n\r\ncontract ERC20SnapshotMock is ERC20Snapshot {\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        address initialAccount,\r\n        uint256 initialBalance\r\n    ) ERC20(name, symbol) {\r\n        _mint(initialAccount, initialBalance);\r\n    }\r\n\r\n    function snapshot() public {\r\n        _snapshot();\r\n    }\r\n\r\n    function mint(address account, uint256 amount) public {\r\n        _mint(account, amount);\r\n    }\r\n\r\n    function burn(address account, uint256 amount) public {\r\n        _burn(account, amount);\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/CountersImpl.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/Counters.sol\";\r\n\r\ncontract CountersImpl {\r\n    using Counters for Counters.Counter;\r\n\r\n    Counters.Counter private _counter;\r\n\r\n    function current() public view returns (uint256) {\r\n        return _counter.current();\r\n    }\r\n\r\n    function increment() public {\r\n        _counter.increment();\r\n    }\r\n\r\n    function decrement() public {\r\n        _counter.decrement();\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/ERC721BurnableMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../token/ERC721/extensions/ERC721Burnable.sol\";\r\n\r\ncontract ERC721BurnableMock is ERC721Burnable {\r\n    constructor(string memory name, string memory symbol) ERC721(name, symbol) { }\r\n\r\n    function exists(uint256 tokenId) public view returns (bool) {\r\n        return _exists(tokenId);\r\n    }\r\n\r\n    function mint(address to, uint256 tokenId) public {\r\n        _mint(to, tokenId);\r\n    }\r\n\r\n    function safeMint(address to, uint256 tokenId) public {\r\n        _safeMint(to, tokenId);\r\n    }\r\n\r\n    function safeMint(address to, uint256 tokenId, bytes memory _data) public {\r\n        _safeMint(to, tokenId, _data);\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/AccessControlMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../access/AccessControl.sol\";\r\n\r\ncontract AccessControlMock is AccessControl {\r\n    constructor() {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n    }\r\n\r\n    function setRoleAdmin(bytes32 roleId, bytes32 adminRoleId) public {\r\n        _setRoleAdmin(roleId, adminRoleId);\r\n    }\r\n}\r\n"
    },
    "contracts/governance/TimelockController.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../access/AccessControl.sol\";\r\n\r\n/**\r\n * @dev Contract module which acts as a timelocked controller. When set as the\r\n * owner of an `Ownable` smart contract, it enforces a timelock on all\r\n * `onlyOwner` maintenance operations. This gives time for users of the\r\n * controlled contract to exit before a potentially dangerous maintenance\r\n * operation is applied.\r\n *\r\n * By default, this contract is self administered, meaning administration tasks\r\n * have to go through the timelock process. The proposer (resp executor) role\r\n * is in charge of proposing (resp executing) operations. A common use case is\r\n * to position this {TimelockController} as the owner of a smart contract, with\r\n * a multisig or a DAO as the sole proposer.\r\n *\r\n * _Available since v3.3._\r\n */\r\ncontract TimelockController is AccessControl {\r\n    bytes32 public constant TIMELOCK_ADMIN_ROLE = keccak256(\"TIMELOCK_ADMIN_ROLE\");\r\n    bytes32 public constant PROPOSER_ROLE = keccak256(\"PROPOSER_ROLE\");\r\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\"EXECUTOR_ROLE\");\r\n    uint256 internal constant _DONE_TIMESTAMP = uint256(1);\r\n\r\n    mapping(bytes32 => uint256) private _timestamps;\r\n    uint256 private _minDelay;\r\n\r\n    /**\r\n     * @dev Emitted when a call is scheduled as part of operation `id`.\r\n     */\r\n    event CallScheduled(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data, bytes32 predecessor, uint256 delay);\r\n\r\n    /**\r\n     * @dev Emitted when a call is performed as part of operation `id`.\r\n     */\r\n    event CallExecuted(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data);\r\n\r\n    /**\r\n     * @dev Emitted when operation `id` is cancelled.\r\n     */\r\n    event Cancelled(bytes32 indexed id);\r\n\r\n    /**\r\n     * @dev Emitted when the minimum delay for future operations is modified.\r\n     */\r\n    event MinDelayChange(uint256 oldDuration, uint256 newDuration);\r\n\r\n    /**\r\n     * @dev Initializes the contract with a given `minDelay`.\r\n     */\r\n    constructor(uint256 minDelay, address[] memory proposers, address[] memory executors) {\r\n        _setRoleAdmin(TIMELOCK_ADMIN_ROLE, TIMELOCK_ADMIN_ROLE);\r\n        _setRoleAdmin(PROPOSER_ROLE, TIMELOCK_ADMIN_ROLE);\r\n        _setRoleAdmin(EXECUTOR_ROLE, TIMELOCK_ADMIN_ROLE);\r\n\r\n        // deployer + self administration\r\n        _setupRole(TIMELOCK_ADMIN_ROLE, _msgSender());\r\n        _setupRole(TIMELOCK_ADMIN_ROLE, address(this));\r\n\r\n        // register proposers\r\n        for (uint256 i = 0; i < proposers.length; ++i) {\r\n            _setupRole(PROPOSER_ROLE, proposers[i]);\r\n        }\r\n\r\n        // register executors\r\n        for (uint256 i = 0; i < executors.length; ++i) {\r\n            _setupRole(EXECUTOR_ROLE, executors[i]);\r\n        }\r\n\r\n        _minDelay = minDelay;\r\n        emit MinDelayChange(0, minDelay);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only by a certain role. In\r\n     * addition to checking the sender's role, `address(0)` 's role is also\r\n     * considered. Granting a role to `address(0)` is equivalent to enabling\r\n     * this role for everyone.\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        require(hasRole(role, _msgSender()) || hasRole(role, address(0)), \"TimelockController: sender requires permission\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Contract might receive/hold ETH as part of the maintenance process.\r\n     */\r\n    receive() external payable {}\r\n\r\n    /**\r\n     * @dev Returns whether an id correspond to a registered operation. This\r\n     * includes both Pending, Ready and Done operations.\r\n     */\r\n    function isOperation(bytes32 id) public view virtual returns (bool pending) {\r\n        return getTimestamp(id) > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether an operation is pending or not.\r\n     */\r\n    function isOperationPending(bytes32 id) public view virtual returns (bool pending) {\r\n        return getTimestamp(id) > _DONE_TIMESTAMP;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether an operation is ready or not.\r\n     */\r\n    function isOperationReady(bytes32 id) public view virtual returns (bool ready) {\r\n        uint256 timestamp = getTimestamp(id);\r\n        // solhint-disable-next-line not-rely-on-time\r\n        return timestamp > _DONE_TIMESTAMP && timestamp <= block.timestamp;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether an operation is done or not.\r\n     */\r\n    function isOperationDone(bytes32 id) public view virtual returns (bool done) {\r\n        return getTimestamp(id) == _DONE_TIMESTAMP;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the timestamp at with an operation becomes ready (0 for\r\n     * unset operations, 1 for done operations).\r\n     */\r\n    function getTimestamp(bytes32 id) public view virtual returns (uint256 timestamp) {\r\n        return _timestamps[id];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the minimum delay for an operation to become valid.\r\n     *\r\n     * This value can be changed by executing an operation that calls `updateDelay`.\r\n     */\r\n    function getMinDelay() public view virtual returns (uint256 duration) {\r\n        return _minDelay;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the identifier of an operation containing a single\r\n     * transaction.\r\n     */\r\n    function hashOperation(address target, uint256 value, bytes calldata data, bytes32 predecessor, bytes32 salt) public pure virtual returns (bytes32 hash) {\r\n        return keccak256(abi.encode(target, value, data, predecessor, salt));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the identifier of an operation containing a batch of\r\n     * transactions.\r\n     */\r\n    function hashOperationBatch(address[] calldata targets, uint256[] calldata values, bytes[] calldata datas, bytes32 predecessor, bytes32 salt) public pure virtual returns (bytes32 hash) {\r\n        return keccak256(abi.encode(targets, values, datas, predecessor, salt));\r\n    }\r\n\r\n    /**\r\n     * @dev Schedule an operation containing a single transaction.\r\n     *\r\n     * Emits a {CallScheduled} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the 'proposer' role.\r\n     */\r\n    function schedule(address target, uint256 value, bytes calldata data, bytes32 predecessor, bytes32 salt, uint256 delay) public virtual onlyRole(PROPOSER_ROLE) {\r\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\r\n        _schedule(id, delay);\r\n        emit CallScheduled(id, 0, target, value, data, predecessor, delay);\r\n    }\r\n\r\n    /**\r\n     * @dev Schedule an operation containing a batch of transactions.\r\n     *\r\n     * Emits one {CallScheduled} event per transaction in the batch.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the 'proposer' role.\r\n     */\r\n    function scheduleBatch(address[] calldata targets, uint256[] calldata values, bytes[] calldata datas, bytes32 predecessor, bytes32 salt, uint256 delay) public virtual onlyRole(PROPOSER_ROLE) {\r\n        require(targets.length == values.length, \"TimelockController: length mismatch\");\r\n        require(targets.length == datas.length, \"TimelockController: length mismatch\");\r\n\r\n        bytes32 id = hashOperationBatch(targets, values, datas, predecessor, salt);\r\n        _schedule(id, delay);\r\n        for (uint256 i = 0; i < targets.length; ++i) {\r\n            emit CallScheduled(id, i, targets[i], values[i], datas[i], predecessor, delay);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Schedule an operation that is to becomes valid after a given delay.\r\n     */\r\n    function _schedule(bytes32 id, uint256 delay) private {\r\n        require(!isOperation(id), \"TimelockController: operation already scheduled\");\r\n        require(delay >= getMinDelay(), \"TimelockController: insufficient delay\");\r\n        // solhint-disable-next-line not-rely-on-time\r\n        _timestamps[id] = block.timestamp + delay;\r\n    }\r\n\r\n    /**\r\n     * @dev Cancel an operation.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the 'proposer' role.\r\n     */\r\n    function cancel(bytes32 id) public virtual onlyRole(PROPOSER_ROLE) {\r\n        require(isOperationPending(id), \"TimelockController: operation cannot be cancelled\");\r\n        delete _timestamps[id];\r\n\r\n        emit Cancelled(id);\r\n    }\r\n\r\n    /**\r\n     * @dev Execute an (ready) operation containing a single transaction.\r\n     *\r\n     * Emits a {CallExecuted} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the 'executor' role.\r\n     */\r\n    function execute(address target, uint256 value, bytes calldata data, bytes32 predecessor, bytes32 salt) public payable virtual onlyRole(EXECUTOR_ROLE) {\r\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\r\n        _beforeCall(predecessor);\r\n        _call(id, 0, target, value, data);\r\n        _afterCall(id);\r\n    }\r\n\r\n    /**\r\n     * @dev Execute an (ready) operation containing a batch of transactions.\r\n     *\r\n     * Emits one {CallExecuted} event per transaction in the batch.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the 'executor' role.\r\n     */\r\n    function executeBatch(address[] calldata targets, uint256[] calldata values, bytes[] calldata datas, bytes32 predecessor, bytes32 salt) public payable virtual onlyRole(EXECUTOR_ROLE) {\r\n        require(targets.length == values.length, \"TimelockController: length mismatch\");\r\n        require(targets.length == datas.length, \"TimelockController: length mismatch\");\r\n\r\n        bytes32 id = hashOperationBatch(targets, values, datas, predecessor, salt);\r\n        _beforeCall(predecessor);\r\n        for (uint256 i = 0; i < targets.length; ++i) {\r\n            _call(id, i, targets[i], values[i], datas[i]);\r\n        }\r\n        _afterCall(id);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks before execution of an operation's calls.\r\n     */\r\n    function _beforeCall(bytes32 predecessor) private view {\r\n        require(predecessor == bytes32(0) || isOperationDone(predecessor), \"TimelockController: missing dependency\");\r\n    }\r\n\r\n    /**\r\n     * @dev Checks after execution of an operation's calls.\r\n     */\r\n    function _afterCall(bytes32 id) private {\r\n        require(isOperationReady(id), \"TimelockController: operation is not ready\");\r\n        _timestamps[id] = _DONE_TIMESTAMP;\r\n    }\r\n\r\n    /**\r\n     * @dev Execute an operation's call.\r\n     *\r\n     * Emits a {CallExecuted} event.\r\n     */\r\n    function _call(bytes32 id, uint256 index, address target, uint256 value, bytes calldata data) private {\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success,) = target.call{value: value}(data);\r\n        require(success, \"TimelockController: underlying transaction reverted\");\r\n\r\n        emit CallExecuted(id, index, target, value, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Changes the minimum timelock duration for future operations.\r\n     *\r\n     * Emits a {MinDelayChange} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be the timelock itself. This can only be achieved by scheduling and later executing\r\n     * an operation where the timelock is the target and the data is the ABI-encoded call to this function.\r\n     */\r\n    function updateDelay(uint256 newDelay) external virtual {\r\n        require(msg.sender == address(this), \"TimelockController: caller must be timelock\");\r\n        emit MinDelayChange(_minDelay, newDelay);\r\n        _minDelay = newDelay;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}